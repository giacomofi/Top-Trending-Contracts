['pragma solidity ^0.6.12;\n', '/*\n', ' * SPDX-License-Identifier: MIT\n', ' */\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() virtual public view returns (uint);\n', '    function balanceOf(address tokenOwner) virtual public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) virtual public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) virtual public returns (bool success);\n', '    function approve(address spender, uint tokens) virtual public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) virtual public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract Oracled is Owned {\n', '    address[] public oracles;\n', '    uint public maxOracles = 50;\n', '\n', '    modifier onlyOracle {\n', '        bool haveAddress = false;\n', '\n', '        for (uint i=0; i<oracles.length; i++){\n', '            if (oracles[i] == msg.sender){\n', '                haveAddress = true;\n', '                break;\n', '            }\n', '        }\n', '\n', '        require(haveAddress, "Account is not a registered oracle");\n', '\n', '        _;\n', '    }\n', '\n', '    function regOracle(address _newOracle) public onlyOwner {\n', '        bool emplaced = false;\n', '        for (uint i=0; i<oracles.length; i++){\n', '            if (oracles[i] == 0x0000000000000000000000000000000000000000){\n', '                oracles[i] = _newOracle;\n', '                emplaced = true;\n', '                break;\n', '            }\n', '        }\n', '        if (!emplaced){\n', '            require(oracles.length < maxOracles, "Registering oracle would exceed maximum");\n', '\n', '            oracles.push(_newOracle);\n', '        }\n', '    }\n', '\n', '    function unregOracle(address _remOracle) public onlyOwner {\n', '        for (uint i=0; i<oracles.length; i++){\n', '            if (oracles[i] == _remOracle){\n', '                delete oracles[i];\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply, added teleport method\n', '// ----------------------------------------------------------------------------\n', 'contract TeleportToken is ERC20Interface, Owned, Oracled {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public threshold;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(uint256 => mapping(address => uint)) public requests;  // number of oracles who have approved this request\n', '    mapping(uint256 => address[]) public approvals;  // addresses of oracles who have approved this request\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(uint256 => bool) completed;\n', '\n', '    event Teleport(address indexed from, string to, uint tokens);\n', '    event Received(address to, uint256 ref, uint tokens);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "TLM";\n', '        name = "Alien Worlds Trilium";\n', '        decimals = 4;\n', '        _totalSupply = 1000000000 * 10**uint(decimals);\n', '        balances[address(0)] = _totalSupply;\n', '        threshold = 3;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() override public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) override public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) override public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) override public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) override public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Moves tokens to the inaccessible account and then sends event for the oracles\n', '    // to monitor and issue on other chain\n', '    // to : EOS address\n', '    // tokens : number of tokens in satoshis\n', '    // ------------------------------------------------------------------------\n', '\n', '    function teleport(string memory to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[address(0)] = balances[address(0)].add(tokens);\n', '        emit Teleport(msg.sender, to, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Called by the oracles to move tokens from inaccessible to accessible\n', '    // reference is the txid on the other chain\n', '    // ------------------------------------------------------------------------\n', '\n', '    function received(address to, uint256 ref, uint tokens) public onlyOracle returns (bool success) {\n', '        requests[ref][to]++;\n', '\n', '        if (requests[ref][to] >= threshold && !completed[ref]){  // 3 confirmations required\n', '            balances[address(0)] = balances[address(0)].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            delete requests[ref][to];\n', '\n', '            completed[ref] = true;\n', '\n', '            emit Received(to, ref, tokens);\n', '            emit Transfer(address(0), to, tokens);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function updateThreshold(uint newThreshold) public onlyOwner returns (bool success) {\n', '        if (newThreshold > 0){\n', '            threshold = newThreshold;\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    receive () external payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']