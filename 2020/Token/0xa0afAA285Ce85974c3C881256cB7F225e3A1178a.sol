['/**************************************************************************\n', ' *            ____        _                              \n', ' *           / ___|      | |     __ _  _   _   ___  _ __ \n', " *          | |    _____ | |    / _` || | | | / _ \\| '__|\n", ' *          | |___|_____|| |___| (_| || |_| ||  __/| |   \n', ' *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \n', ' *                                     |___/             \n', ' * \n', ' **************************************************************************\n', ' *\n', ' *  The MIT License (MIT)\n', ' * SPDX-License-Identifier: MIT\n', ' *\n', ' * Copyright (c) 2016-2020 Cyril Lapinte\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining\n', ' * a copy of this software and associated documentation files (the\n', ' * "Software"), to deal in the Software without restriction, including\n', ' * without limitation the rights to use, copy, modify, merge, publish,\n', ' * distribute, sublicense, and/or sell copies of the Software, and to\n', ' * permit persons to whom the Software is furnished to do so, subject to\n', ' * the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included\n', ' * in all copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' *\n', ' **************************************************************************\n', ' *\n', ' * Flatten Contract: WrappedERC20\n', ' *\n', ' * Git Commit:\n', ' * https://github.com/c-layer/contracts/commit/9993912325afde36151b04d0247ac9ea9ffa2a93\n', ' *\n', ' **************************************************************************/\n', '\n', '\n', '// File: @c-layer/common/contracts/interface/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title IERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' *\n', ' */\n', 'interface IERC20 {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  function name() external view returns (string memory);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint256);\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address _owner) external view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    external view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    external returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue)\n', '    external returns (bool);\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '    external returns (bool);\n', '}\n', '\n', '// File: @c-layer/common/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: @c-layer/common/contracts/token/TokenERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Token ERC20\n', ' * @dev Token ERC20 default implementation\n', ' *\n', ' * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\n', ' *\n', ' * Error messages\n', ' *   TE01: Address is invalid\n', ' *   TE02: Not enougth tokens\n', ' *   TE03: Approval too low\n', ' */\n', 'contract TokenERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string internal name_;\n', '  string internal symbol_;\n', '  uint256 internal decimals_;\n', '\n', '  uint256 internal totalSupply_;\n', '  mapping(address => uint256) internal balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint256 _decimals,\n', '    address _initialAccount,\n', '    uint256 _initialSupply\n', '  ) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '    decimals_ = _decimals;\n', '    totalSupply_ = _initialSupply;\n', '    balances[_initialAccount] = _initialSupply;\n', '\n', '    emit Transfer(address(0), _initialAccount, _initialSupply);\n', '  }\n', '\n', '  function name() external override view returns (string memory) {\n', '    return name_;\n', '  }\n', '\n', '  function symbol() external override view returns (string memory) {\n', '    return symbol_;\n', '  }\n', '\n', '  function decimals() external override view returns (uint256) {\n', '    return decimals_;\n', '  }\n', '\n', '  function totalSupply() external override view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) external override view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender)\n', '    external override view returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) external override returns (bool) {\n', '    require(_to != address(0), "TE01");\n', '    require(_value <= balances[msg.sender], "TE02");\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    external override returns (bool)\n', '  {\n', '    require(_to != address(0), "TE01");\n', '    require(_value <= balances[_from], "TE02");\n', '    require(_value <= allowed[_from][msg.sender], "TE03");\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) external override returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue)\n', '    external override returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue)\n', '    external override returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/interface/IWrappedERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title WrappedERC20\n', ' * @dev WrappedERC20\n', ' * @author Cyril Lapinte - <cyril@openfiz.com>\n', ' *\n', ' * Error messages\n', ' */\n', 'abstract contract IWrappedERC20 is IERC20 {\n', '\n', '  function base() public view virtual returns (IERC20);\n', '\n', '  function deposit(uint256 _value) public virtual returns (bool);\n', '  function depositTo(address _to, uint256 _value) public virtual returns (bool);\n', '\n', '  function withdraw(uint256 _value) public virtual returns (bool);\n', '  function withdrawFrom(address _from, address _to, uint256 _value) public virtual returns (bool);\n', '\n', '  event Deposit(address indexed _address, uint256 value);\n', '  event Withdrawal(address indexed _address, uint256 value);\n', '}\n', '\n', '// File: contracts/WrappedERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title WrappedERC20\n', ' * @dev WrappedERC20\n', ' * @author Cyril Lapinte - <cyril@openfiz.com>\n', ' *\n', ' * Error messages\n', ' *   WE01: Unable to transfer tokens to address 0\n', ' *   WE02: Unable to deposit the base token\n', ' *   WE03: Not enougth tokens\n', ' *   WE04: Approval too low\n', ' *   WE05: Unable to withdraw the base token\n', ' */\n', 'contract WrappedERC20 is TokenERC20, IWrappedERC20 {\n', '\n', '  IERC20 internal base_;\n', '  uint256 internal ratio_;\n', '\n', '  /**\n', '   * @dev constructor\n', '   */\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint256 _decimals,\n', '    IERC20 _base\n', '  ) public\n', '    TokenERC20(_name, _symbol, _decimals, address(0), 0)\n', '  {\n', '    ratio_ = 10 ** _decimals.sub(_base.decimals());\n', '    base_ = _base;\n', '  }\n', '\n', '  /**\n', '   * @dev base token\n', '   */\n', '  function base() public view override returns (IERC20) {\n', '    return base_;\n', '  }\n', '\n', '  /**\n', '   * @dev deposit\n', '   */\n', '  function deposit(uint256 _value) public override returns (bool) {\n', '    return depositTo(msg.sender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev depositTo\n', '   */\n', '  function depositTo(address _to, uint256 _value) public override returns (bool) {\n', '    require(_to != address(0), "WE01");\n', '    require(base_.transferFrom(msg.sender, address(this), _value), "WE02");\n', '\n', '    uint256 wrappedValue = _value.mul(ratio_);\n', '    balances[_to] = balances[_to].add(wrappedValue);\n', '    totalSupply_ = totalSupply_.add(wrappedValue);\n', '    emit Transfer(address(0), _to, wrappedValue);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw\n', '   */\n', '  function withdraw(uint256 _value) public override returns (bool) {\n', '    return withdrawFrom(msg.sender, msg.sender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev withdrawFrom\n', '   */\n', '  function withdrawFrom(address _from, address _to, uint256 _value) public override returns (bool) {\n', '    require(_to != address(0), "WE01");\n', '    uint256 wrappedValue = _value.mul(ratio_);\n', '    require(wrappedValue <= balances[_from], "WE03");\n', '\n', '    if (_from != msg.sender) {\n', '      require(wrappedValue <= allowed[_from][msg.sender], "WE04");\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(wrappedValue);\n', '    }\n', '\n', '    balances[_from] = balances[_from].sub(wrappedValue);\n', '    totalSupply_ = totalSupply_.sub(wrappedValue);\n', '    emit Transfer(_from, address(0), wrappedValue);\n', '\n', '    require(base_.transfer(_to, _value), "WE05");\n', '    return true;\n', '  }\n', '}']