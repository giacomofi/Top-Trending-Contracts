['pragma solidity ^0.6.0;\n', '// "SPDX-License-Identifier: UNLICENSED "\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'FSD' token contract\n", '\n', '// Name: Fireside Token\n', '// Ticker: FSD\n', '// Total supply: 20M\n', '// 5.2 million released at 10% per month\n', '// 3% burn on each transaction\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint);\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Token is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol = "FSD";\n', '    string public  name = "Fireside Token";\n', '    uint256 public decimals = 18;\n', '    uint256 private _totalSupply = 20e6 * 10 ** (decimals);\n', '    \n', '    struct Locked{\n', '        uint256 tokens;\n', '        uint256 lastVisit;\n', '    }\n', '    mapping(address => Locked) lockedTokens;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        owner = 0xa87e5b051541f289e9141Be73f05ca68B3dc3D8C;\n', '        balances[address(owner)] = totalSupply();\n', '        lockedTokens[owner].lastVisit = now;\n', '        lockedTokens[owner].tokens = 5200000 * 10 ** (decimals); // 5.2 million\n', '        emit Transfer(address(0),address(owner), totalSupply());\n', '    }\n', '\n', "    /** ERC20Interface function's implementation **/\n", '\n', '    function totalSupply() public override view returns (uint256){\n', '       return _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public override returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '\n', '        if (lockedTokens[msg.sender].tokens > 0){\n', '            check_time(msg.sender);\n', '        }\n', '        require(balances[msg.sender].sub(tokens) >= lockedTokens[msg.sender].tokens, "Please wait for tokens to be released");\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        uint256 toBurn = onePercent(tokens).mul(3); // 3% transaction deduction\n', '        burnTokens(toBurn);\n', '        \n', '        balances[to] = balances[to].add(tokens.sub(toBurn));\n', '        \n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function check_time(address _from) private {\n', '        if ((now.sub(lockedTokens[_from].lastVisit)).div(30 days) >= 1){\n', '            uint256 months;\n', '            uint256 released;\n', '            uint256 monthlyAllowed = 520000 * 10 ** (decimals); // 520,000 per month\n', '            months = (now.sub(lockedTokens[_from].lastVisit)).div(30 days);\n', '            released = months.mul(monthlyAllowed);\n', '            if (released > lockedTokens[_from].tokens){\n', '                released = lockedTokens[_from].tokens;\n', '            }\n', '            lockedTokens[_from].lastVisit = now;\n', '            lockedTokens[_from].tokens = lockedTokens[_from].tokens.sub(released);\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) public override returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        \n', '        if (lockedTokens[from].tokens > 0){\n', '            check_time(from);\n', '        }\n', '        require(balances[from].sub(tokens) >= lockedTokens[from].tokens, "Please wait for tokens to be released");\n', '        \n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        \n', '        uint256 toBurn = onePercent(tokens).mul(3); // 3% transaction deduction\n', '        burnTokens(toBurn);\n', '        \n', '        balances[to] = balances[to].add(tokens.sub(toBurn));\n', '        \n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Calculates onePercent of the uint256 amount sent\n', '    // ------------------------------------------------------------------------\n', '    function onePercent(uint256 _tokens) internal pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Burn the ``value` amount of tokens from the `account`\n', '    // ------------------------------------------------------------------------\n', '    function burnTokens(uint256 value) internal{\n', '        require(_totalSupply >= value); // burn only unsold tokens\n', '        _totalSupply = _totalSupply.sub(value);\n', '        emit Transfer(msg.sender, address(0), value);\n', '    }\n', '\n', '}']