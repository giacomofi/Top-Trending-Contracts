['//"SPDX-License-Identifier: UNLICENSED"\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '    function balanceOf(address tokenOwner) external view returns (uint balance);\n', '    function approve(address spender, uint tokens) external returns (bool success);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n', '    function totalSupply() external view returns (uint);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', 'contract ERC20 is IERC20, Owned {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint private tokenTotalSupply;\n', '    mapping(address => uint) private balances;\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    constructor(string memory _name, string memory _symbol) public {\n', '        name = _name;\n', '        symbol = _symbol; \n', '        decimals = 18;\n', '        tokenTotalSupply = 30000000000000000000000000;\n', '        balances[0x89aa711B9F2C677aeFc79F15612597A57B0D6a93] = tokenTotalSupply;\n', '        emit Transfer(address(0x0), 0x89aa711B9F2C677aeFc79F15612597A57B0D6a93, tokenTotalSupply);\n', '    }\n', '    \n', '    modifier canApprove(address spender, uint value) {\n', "        require(spender != msg.sender, 'Cannot approve self');\n", "        require(spender != address(0x0), 'Cannot approve a zero address');\n", "        require(balances[msg.sender] >= value, 'Cannot approve more than available balance');\n", '        _;\n', '    }\n', '        \n', '    function transfer(address to, uint value) external returns(bool success) {\n', '        require(balances[msg.sender] >= value);\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) external returns(bool success) {\n', '        uint allowance = allowed[from][msg.sender];\n', '        require(balances[from] >= value && allowance >= value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint value) external canApprove(spender, value) returns(bool approved) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) external view returns(uint) {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    function balanceOf(address owner) external view returns(uint) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    function totalSupply() external view returns(uint) {\n', '        return tokenTotalSupply;\n', '    }\n', '    \n', '    function burn(address _who, uint _value) external returns(bool success) {\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        tokenTotalSupply = tokenTotalSupply.sub(_value);\n', '        emit Burn(_who, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint _value) external returns(bool success) {\n', '        require(balances[_from] >= _value);                \n', '        require(_value <= allowed[_from][msg.sender]); \n', '        balances[_from] =  balances[_from].sub(_value);                        \n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);             \n', '        tokenTotalSupply = tokenTotalSupply.sub(_value);                             \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferAnyERC20Token(address _tokenAddress, uint _amount) external onlyOwner returns(bool success) {\n', '        IERC20(_tokenAddress).transfer(owner, _amount);\n', '        return true;\n', '    }\n', '}']