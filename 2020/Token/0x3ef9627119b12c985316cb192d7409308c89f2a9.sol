['/**\n', ' *\n', '  \n', ' __  ,  , ,_  ,  , ___,_,1 \n', " '|_) |  | |_) |\\ |' | / \\, \n", " _|_)'\\__|'| \\ |'\\|  |'\\_/  \n", "'        ` '  `'  `  ' '    \n", '                            \n', '\n', 'BurnTo1 - The token that burns down to only 1 remaining\n', '\n', '\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint;\n', '\n', '    address admin;\n', '\n', '    uint burnFee = 5;\n', '\n', '    bool firstTransfer = false;\n', '    uint public firstBlock;\n', '    uint MinSupply = 1;\n', '\n', '    mapping(address => uint) private HasBought; \n', '\n', '    mapping (address => uint) private _balances;\n', '\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '\n', '    uint private _totalSupply;\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        \n', '        uint amountRec = amount;\n', '        uint amountLimit = 4e18;\n', '        uint amountBurn = 0;\n', '\n', '      if(sender != admin && recipient != admin){   //this is for the initial Pool Liquidity\n', '            \n', '            if((block.number < firstBlock + 40) ){  \n', '                 require(amount < amountLimit);\n', '                 require(HasBought[recipient] != 121);\n', '                amountBurn = amount.mul(burnFee).div(100);\n', '                amountRec = amount.sub(amountBurn);\n', '                HasBought[recipient] = 121;\n', '            } else {\n', '                amountBurn = amount.mul(burnFee).div(100);\n', '                amountRec = amount.sub(amountBurn);\n', '            }\n', '\n', '        } else {\n', '            \n', '        }\n', '        \n', '        if(_totalSupply.sub(amountBurn) < MinSupply){\n', '           amountRec = amount; \n', '           amountBurn = 0;\n', '        }\n', '        \n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amountRec);\n', '        _totalSupply = _totalSupply.sub(amountBurn);\n', '\n', '         if(!firstTransfer){\n', '            firstTransfer = true;\n', '            //set First Block\n', '            firstBlock = block.number;\n', '\n', '        }\n', '\n', '        emit Transfer(sender, recipient, amountRec);\n', '        emit Transfer(sender, address(0), amountBurn);\n', '        \n', '    }\n', '\n', '\n', '\n', '    function addBalance(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: add to the zero address");\n', '\n', '        _balances[account] = _balances[account].add(amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '\n', '\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract burnto1 is ERC20, ERC20Detailed {\n', '    using SafeMath for uint;\n', '\n', '  \n', '  constructor () public ERC20Detailed("Burnto1", "BRNT1", 18) {\n', '      admin = msg.sender;\n', '      addBalance(admin,120e18);  //Initial tokens for Uniswap Liquidity Pool\n', '  }\n', '\n', '\n', '\n', '  function() external payable {\n', '\n', '  }\n', '\n', '   function withdraw() external {\n', '      require(msg.sender == admin, "!not allowed");\n', '      msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '  function getFirstBlockTime() view external returns (uint) {\n', '      return(block.number - firstBlock);\n', '  }\n', '\n', '}']