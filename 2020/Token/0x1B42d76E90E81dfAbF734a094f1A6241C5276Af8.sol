['// File: contracts/pike/BaseBank.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract BaseBank {\n', '\n', '}\n', '\n', '\n', '// File: contracts/library/ERC20Not.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'interface ERC20Not {\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external ;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external;\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/library/ERC20Yes.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', 'interface ERC20Yes {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address tokenOwner)\n', '        external\n', '        view\n', '        returns (uint256 balance);\n', '\n', '    function allowance(address tokenOwner, address spender)\n', '        external\n', '        view\n', '        returns (uint256 remaining);\n', '\n', '    function transfer(address to, uint256 tokens)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address spender, uint256 tokens)\n', '        external\n', '        returns (bool success);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokens\n', '    ) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(\n', '        address indexed tokenOwner,\n', '        address indexed spender,\n', '        uint256 tokens\n', '    );\n', '}\n', '\n', '// File: contracts/user/BaseUsers.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract BaseUsers {\n', '    //\n', '    function register(address _pid, address _who) external returns (bool);\n', '\n', '    function setActive(address _who) external returns (bool);\n', '    \n', '    function setMiner(address _who) external returns (bool);\n', '\n', '    function isActive(address _who) external view returns (bool);\n', '\n', '    // Determine if the address has been registered\n', '    function isRegister(address _who) external view returns (bool);\n', '\n', '    // Get invitees\n', '    function inviteUser(address _who) external view returns (address);\n', '\n', '    function isBlackList(address _who) external view returns (bool);\n', '\n', '    function getUser(address _who)\n', '        external\n', '        view\n', '        returns (\n', '            address id,\n', '            address pid,\n', '            bool miner,\n', '            bool active,\n', '            uint256 created_at\n', '        );\n', '\n', '}\n', '\n', '// File: contracts/funds/BaseFunds.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract BaseFunds {\n', '    function activeUser(\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function upgradeUser(\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function buyMiner(\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function deposit(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function withdraw(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function loan(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function repay(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function liquidate(\n', '        address _tokenAddress,\n', '        address _who,\n', '        address _owner,\n', '        uint256 _tokens\n', '    ) external returns (bool);\n', '\n', '    function isToken(address _tokenAddress) external view returns (bool);\n', '\n', '    function isErc20(address _tokenAddress) external view returns (bool);\n', '}\n', '\n', '// File: contracts/net/BaseNet.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract BaseNet {\n', '    address payable internal _gasAddress;\n', '    function register(address _who, address _pid) external returns (bool);\n', '\n', '    function activeUser(address _pid, address _who, uint256 _tokens) external returns (bool);\n', '\n', '    function upgradeUser(address _who, uint256 _tokens) external returns (bool);\n', '\n', '    function buyMiner(address _who, uint256 _tokens) external returns (bool);\n', '\n', '    function deposit(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _amount\n', '    ) external returns (bool);\n', '\n', '    function repay(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _amount\n', '    ) external returns (bool);\n', '\n', '    function liquidate(\n', '        address _tokenAddress,\n', '        address _payer,\n', '        uint256 _amount,\n', '        uint256 _oid\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/pause/BasePause.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract BasePause {\n', '    function isPaused() external view returns (bool);\n', '}\n', '\n', '// File: contracts/receipt/BaseReceipt.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract BaseReceipt {\n', '    function active(address _to, uint256 _tokens)\n', '        external\n', '        payable\n', '        returns (bool);\n', '\n', '    function upgrade(address _to, uint256 _tokens)\n', '        external\n', '        payable\n', '        returns (bool);\n', '\n', '    function buyMiner(address _to, uint256 _tokens)\n', '        external\n', '        payable\n', '        returns (bool);\n', '\n', '    function getActive(address _who) external view returns (uint256);\n', '    function getUpgrade(address _who) external view returns (uint256);\n', '    function getMiner(address _who) external view returns (uint256);\n', '}\n', '\n', '\n', '// File: contracts/library/Ownable.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address[3] internal owner;\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner[0] = msg.sender;\n', '        owner[1] = msg.sender;\n', '        owner[2] = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlySafe() {\n', '        require(\n', '            msg.sender == owner[0] ||\n', '                msg.sender == owner[1] ||\n', '                msg.sender == owner[2]\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner, uint256 k) public onlySafe {\n', '        if (newOwner != address(0)) {\n', '            owner[k] = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/library/Interfaces.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract Interfaces is Ownable {\n', '    BaseNet internal NetContract;\n', '    BaseBank internal BankContract;\n', '    BaseUsers internal UserContract;\n', '    BaseFunds internal FundsContract;\n', '    BasePause internal PauseContract;\n', '    BaseReceipt internal ReceiptContract;\n', '\n', '    function setBankContract(BaseBank _address) public onlySafe {\n', '        BankContract = _address;\n', '    }\n', '\n', '    function setUserContract(BaseUsers _address) public onlySafe {\n', '        UserContract = _address;\n', '    }\n', '\n', '    function setFundsContract(BaseFunds _address) public onlySafe {\n', '        FundsContract = _address;\n', '    }\n', '\n', '    function setNetContract(BaseNet _address) public onlySafe {\n', '        NetContract = _address;\n', '    }\n', '\n', '    function setPauseContract(BasePause _address) public onlySafe {\n', '        PauseContract = _address;\n', '    }\n', '\n', '    function setReceiptContract(BaseReceipt _address) public onlySafe {\n', '        ReceiptContract = _address;\n', '    }\n', '}\n', '\n', '// File: contracts/Bank.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '\n', 'contract Bank is BaseBank, Interfaces {\n', '    bool internal open_deposit = true;\n', '    bool internal open_loan = true;\n', '\n', '    modifier isNotBlackList(address _who) {\n', '        require(\n', '            !UserContract.isBlackList(_who),\n', '            "You are already on the blacklist"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!PauseContract.isPaused(), "Data is being maintained");\n', '        _;\n', '    }\n', '\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    function isRegister(address _who) public view returns (bool is_register) {\n', '        return UserContract.isRegister(_who);\n', '    }\n', '\n', '    function isActive(address _who) public view returns (bool is_active) {\n', '        return UserContract.isActive(_who);\n', '    }\n', '\n', '    // register\n', '    function register(address _pid) public returns (bool) {\n', '        if (UserContract.register(_pid, msg.sender)) {\n', '            if (!NetContract.register(_pid, msg.sender)) {\n', '                revert("register failed");\n', '            }\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // active user\n', '    function activeUser(address _pid)\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isNotBlackList(msg.sender)\n', '    {\n', '        require(msg.sender != _pid);\n', '        if (!isRegister(msg.sender)) {\n', '            UserContract.register(_pid, msg.sender);\n', '        }\n', '        if (address(uint160(address(FundsContract))).send(msg.value)) {\n', '            require(FundsContract.activeUser(msg.sender, msg.value));\n', '            UserContract.setActive(msg.sender);\n', '            if (!NetContract.activeUser(_pid, msg.sender, msg.value)) {\n', '                revert("upgrade failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    // 升级矿工\n', '    function upgradeUser()\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isNotBlackList(msg.sender)\n', '    {\n', '        require(isActive(msg.sender));\n', '        if (address(uint160(address(FundsContract))).send(msg.value)) {\n', '            require(FundsContract.upgradeUser(msg.sender, msg.value));\n', '            if (!NetContract.upgradeUser(msg.sender, msg.value)) {\n', '                revert("upgrade failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    // buy mining\n', '    function buyMiner()\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isNotBlackList(msg.sender)\n', '    {\n', '        require(isActive(msg.sender));\n', '        if (address(uint160(address(FundsContract))).send(msg.value)) {\n', '            require(FundsContract.buyMiner(msg.sender, msg.value));\n', '            UserContract.setMiner(msg.sender);\n', '            if (!NetContract.buyMiner(msg.sender, msg.value)) {\n', '                revert("buy mining failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    // deposit\n', '    function deposit(address _tokenAddress, uint256 _tokens)\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isNotBlackList(msg.sender)\n', '    {\n', '        require(open_deposit == true);\n', '        require(isActive(msg.sender));\n', '\n', '        if (address(FundsContract) == _tokenAddress) {\n', '            if (address(uint160(address(FundsContract))).send(msg.value)) {\n', '                require(\n', '                    FundsContract.deposit(_tokenAddress, msg.sender, msg.value)\n', '                );\n', '                if (\n', '                    !NetContract.deposit(_tokenAddress, msg.sender, msg.value)\n', '                ) {\n', '                    revert("deposit failed");\n', '                }\n', '            }\n', '        } else {\n', '            require(FundsContract.deposit(_tokenAddress, msg.sender, _tokens));\n', '            if (!NetContract.deposit(_tokenAddress, msg.sender, _tokens)) {\n', '                revert("deposit failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    // Tokens withdraw\n', '    function withdraw(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _tokens\n', '    )\n', '        public\n', '        whenNotPaused\n', '        isNotBlackList(_who)\n', '        onlySafe\n', '        returns (bool success)\n', '    {\n', '        require(isActive(_who));\n', '        return FundsContract.withdraw(_tokenAddress, _who, _tokens);\n', '    }\n', '\n', '    // loan\n', '    function loan(\n', '        address _tokenAddress,\n', '        address _who,\n', '        uint256 _tokens\n', '    )\n', '        public\n', '        whenNotPaused\n', '        isNotBlackList(_who)\n', '        onlySafe\n', '        returns (bool success)\n', '    {\n', '        require(open_loan == true);\n', '        require(isActive(_who));\n', '        return FundsContract.loan(_tokenAddress, _who, _tokens);\n', '    }\n', '\n', '    // repay\n', '    function repay(address _tokenAddress, uint256 _tokens)\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isNotBlackList(msg.sender)\n', '    {\n', '        if (address(FundsContract) == _tokenAddress) {\n', '            if (address(uint160(address(FundsContract))).send(msg.value)) {\n', '                require(\n', '                    FundsContract.repay(_tokenAddress, msg.sender, msg.value)\n', '                );\n', '                if (!NetContract.repay(_tokenAddress, msg.sender, msg.value)) {\n', '                    revert("repay failed");\n', '                }\n', '            }\n', '        } else {\n', '            require(FundsContract.repay(_tokenAddress, msg.sender, _tokens));\n', '            if (!NetContract.repay(_tokenAddress, msg.sender, _tokens)) {\n', '                revert("repay failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    // liquidate\n', '    function liquidate(\n', '        address _tokenAddress,\n', '        address _owner,\n', '        uint256 _tokens,\n', '        uint256 _oid\n', '    ) public payable whenNotPaused isNotBlackList(msg.sender) {\n', '        require(isActive(_owner));\n', '        require(isActive(msg.sender));\n', '        if (address(FundsContract) == _tokenAddress) {\n', '            if (address(uint160(address(FundsContract))).send(msg.value)) {\n', '                require(\n', '                    FundsContract.liquidate(\n', '                        _tokenAddress,\n', '                        msg.sender,\n', '                        _owner,\n', '                        msg.value\n', '                    )\n', '                );\n', '                if (\n', '                    !NetContract.liquidate(\n', '                        _tokenAddress,\n', '                        msg.sender,\n', '                        msg.value,\n', '                        _oid\n', '                    )\n', '                ) {\n', '                    revert("liquidate failed");\n', '                }\n', '            }\n', '        } else {\n', '            require(\n', '                FundsContract.liquidate(\n', '                    _tokenAddress,\n', '                    msg.sender,\n', '                    _owner,\n', '                    _tokens\n', '                )\n', '            );\n', '            if (\n', '                !NetContract.liquidate(_tokenAddress, msg.sender, _tokens, _oid)\n', '            ) {\n', '                revert("liquidate failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    function setOpenDeposit(bool _status) public onlySafe {\n', '        open_deposit = _status;\n', '    }\n', '\n', '    function setOpenLoan(bool _status) public onlySafe {\n', '        open_loan = _status;\n', '    }\n', '\n', '    function getOpenDeposit() public view returns (bool deposit_status) {\n', '        return open_deposit;\n', '    }\n', '\n', '    function getOpenLoan() public view returns (bool loan_status) {\n', '        return open_loan;\n', '    }\n', '\n', '    // 获取存款余额\n', '    function balanceOf(address _tokenAddress, address _who)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        return ERC20Yes(_tokenAddress).balanceOf(_who);\n', '    }\n', '\n', '    function balanceEth(address _tokenAddress)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        return address(uint160(address(_tokenAddress))).balance;\n', '    }\n', '\n', '    function isPaused() public view returns (bool paused) {\n', '        return PauseContract.isPaused();\n', '    }\n', '\n', '    function getUser(address _who)\n', '        public\n', '        view\n', '        returns (\n', '            address id,\n', '            address pid,\n', '            bool miner,\n', '            bool active,\n', '            uint256 created_at\n', '        )\n', '    {\n', '        return UserContract.getUser(_who);\n', '    }\n', '\n', '    function getActive(address _who) public view returns (uint256 amount) {\n', '        return ReceiptContract.getActive(_who);\n', '    }\n', '\n', '    function getUpgrade(address _who) public view returns (uint256 amount) {\n', '        return ReceiptContract.getUpgrade(_who);\n', '    }\n', '\n', '    function getMiner(address _who) public view returns (uint256 amount) {\n', '        return ReceiptContract.getMiner(_who);\n', '    }\n', '}']