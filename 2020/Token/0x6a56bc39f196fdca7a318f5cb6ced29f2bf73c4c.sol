['pragma solidity ^0.5.16;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0);\n', '        uint256 c = _a / _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '    bool private _paused;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    constructor() internal {\n', '        _paused = false;\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenTimelock is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 private _token;\n', '\n', '    address private _beneficiary;\n', '\n', '    uint256 private _requestTime;\n', '\n', '    uint256 private _releaseDelay;\n', '\n', '    bool private _releaseRequested;\n', '\n', '    event ReleaseRequested(address account);\n', '\n', '    constructor(\n', '        address token,\n', '        address beneficiary,\n', '        uint256 releaseTime,\n', '        uint256 releaseDelay\n', '    ) public {\n', '        require(releaseTime > block.timestamp);\n', '        require(releaseDelay >= 864000 && releaseDelay <= 3888000); // Min = 10 days, Max = 45 days\n', '        require(beneficiary != address(0));\n', '        _token = ERC20(token);\n', '        _beneficiary = beneficiary;\n', '        _requestTime = releaseTime - releaseDelay;\n', '        _releaseDelay = releaseDelay;\n', '        _releaseRequested = false;\n', '    }\n', '\n', '    function token() public view returns (ERC20) {\n', '        return _token;\n', '    }\n', '\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    function releaseTime() public view returns (uint256) {\n', '        return _requestTime + _releaseDelay;\n', '    }\n', '\n', '    function releaseDelay() public view returns (uint256) {\n', '        return _releaseDelay;\n', '    }\n', '\n', '    function releaseRequested() public view returns (bool) {\n', '        return _releaseRequested;\n', '    }\n', '\n', '    function tokenBalance() public view returns (uint256) {\n', '        return _token.balanceOf(address(this));\n', '    }\n', '\n', '    function release() public whenNotPaused {\n', '        require(block.timestamp >= _requestTime);\n', '\n', '        if (!_releaseRequested) {\n', '            _releaseRequested = true;\n', '            emit ReleaseRequested(msg.sender);\n', '        } else {\n', '            require(block.timestamp >= (_requestTime + _releaseDelay));\n', '\n', '            uint256 amount = _token.balanceOf(address(this));\n', '            require(amount > 0);\n', '            _token.transfer(_beneficiary, amount);\n', '        }\n', '    }\n', '}']