['pragma solidity 0.5.16;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) \n', '            return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) internal _allowed;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return A uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token to a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * Note that while this function emits an Approval event, this is not required as per the specification,\n', '    * and other compliant implementations may not emit the event.\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Mintable is ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    function _mint(address to, uint256 amount) internal {\n', '        _balances[to] = _balances[to].add(amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    function _burn(address from, uint256 amount) internal {\n', '        _balances[from] = _balances[from].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(from, address(0), amount);\n', '    }\n', '}\n', '\n', 'contract ThreeFMutual {\n', '\n', '    struct Player {\n', '        uint256 id;             // agent id\n', '        bytes32 name;           // agent name\n', '        uint256 ref;            // referral vault\n', '        bool isAgent;           // referral activated\n', '        bool claimed;           // insurance claimed\n', '        uint256 eth;            // eth player has paid\n', '        uint256 shares;         // shares\n', '        uint256 units;          // uints of insurance\n', '        uint256 plyrLastSeen;   // last day player played\n', '        uint256 mask;           // player mask\n', '        uint256 level;          // agent level\n', '        uint256 accumulatedRef; // accumulated referral income\n', '    }\n', '\n', '    mapping(address => mapping(uint256 => uint256)) public unitToExpirePlayer;\n', '    mapping(uint256 => uint256) public unitToExpire; // unit of insurance due at day x\n', '\n', '    uint256 public issuedInsurance; // all issued insurance\n', '    uint256 public ethOfShare;      // virtual eth pointer\n', '    uint256 public shares;          // total share\n', '    uint256 public pool;            // eth gonna pay to beneficiary\n', "    uint256 public today;           // today's date\n", '    uint256 public _now;            // current time\n', '    uint256 public mask;            // global mask\n', '    uint256 public agents;          // number of agent\n', '\n', '    // player data\n', '    mapping(address => Player) public player;       // player data\n', '    mapping(uint256 => address) public agentxID_;   // return agent address by id\n', '    mapping(bytes32 => address) public agentxName_; // return agent address by name\n', '\n', '}\n', '\n', 'contract TFToken is ERC20Mintable {\n', '    string public constant name = "ThirdFloorToken";\n', '    string public constant symbol = "TFT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    ThreeFMutual public constant Mutual = ThreeFMutual(0x66be1bc6C6aF47900BBD4F3711801bE6C2c6CB32);\n', '\n', '    mapping(address => uint256) public claimedAmount;\n', '\n', '    function claim(address receiver) external {\n', '        uint256 balance;\n', '        (,,,,,balance,,,,,,) = Mutual.player(receiver);\n', '        require(balance > claimedAmount[receiver]);\n', '        _mint(receiver, balance.sub(claimedAmount[receiver]));\n', '        claimedAmount[receiver] = balance;\n', '    }\n', '\n', '}']