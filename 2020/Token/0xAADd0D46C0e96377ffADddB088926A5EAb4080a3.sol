['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity ^ 0.5.0;\n', '\n', '/**\n', ' * @dev 检测数学运算错误\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '//设置合约拥有者及转让\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  \n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '    emit OwnershipTransferred(owner, newOwner);\n', '  }\n', '  }\n', '}\n', '\n', '//使用并扩展ERC20接口\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns(uint);\n', '  function balanceOf(address tokenOwner) public view returns(uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns(uint remaining);\n', '  function transfer(address to, uint tokens) public returns(bool success);\n', '  function approve(address spender, uint tokens) public returns(bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns(bool success);\n', '  uint public basisPointsRate = 0;\n', '  uint public maximumFee = 0;\n', '  uint public MAX_UINT = 2**256 - 1;\n', '  modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '//支付服务\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '\n', '//合约暂停服务功能\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev 使方法仅在合约未暂停时可用\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev 使方法仅在合约暂停时可用\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev 仅合约拥有者可使用：暂停功能\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev 仅合约拥有者可使用：开放功能\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '  //黑名单功能\n', 'contract UserLock is Ownable {\n', '  mapping(address => bool) blacklist;\n', '  modifier permissionCheck {\n', '    require(!blacklist[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  //锁定帐户\n', '  function lockUser(address who) public onlyOwner {\n', '    blacklist[who] = true;\n', '    emit LockUser(who);\n', '  }\n', '  //解锁帐户\n', '  function unlockUser(address LockUser) public onlyOwner {\n', '    blacklist[LockUser] = false;\n', '    emit UnlockUser(LockUser);\n', '  }\n', '  \n', '  \n', '  //黑名单公告\n', '  event LockUser(address indexed who);\n', '  event UnlockUser(address indexed who);\n', '}\n', '\n', ' //合约发布\n', 'contract AYCToken is Pausable, ERC20Interface, UserLock {\n', '    using SafeMath for uint;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    constructor() public {\n', '    name = "Activate Your Chain";//代币全称\n', '    symbol = "AYC";//代币代号\n', '    decimals = 6;//小数位数\n', '    _totalSupply = 180000000000000;//发行总量1亿\n', '    address order = 0xe938B46165B215962d85D27c02bBe5Ae0Ee61bee;\n', '    balances[order] = _totalSupply;\n', '    emit Transfer(address(0), order, _totalSupply);\n', '    }\n', '\n', '    //查询帐号余额\n', '    function balanceOf(address who) public view returns (uint) {\n', '        return balances[who];\n', '    }\n', '\n', '    //普通转帐交易\n', '    function transfer(address _to, uint _value) public whenNotPaused onlyPayloadSize(2 * 32) returns(bool success){\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    //担保交易\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) returns(bool success){\n', '        /*allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;  */\n', '        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    // 代理交易\n', '    function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns(bool success){\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '\n', '    }\n', '    \n', '    // 显示所有代币总值\n', '    function totalSupply() public view returns (uint) {\n', '       return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '  \n', '    //销毁指定黑名单用户代币并从总量减去\n', '    function redeemBLT (address LockUser) public onlyOwner {\n', '        require(blacklist[LockUser]);\n', '        uint dirtyFunds = balanceOf(LockUser);\n', '        balances[LockUser] = 0;\n', '        _totalSupply -= dirtyFunds;\n', '        emit RedeemBLT(LockUser, dirtyFunds);\n', '    }\n', '    \n', '    //错误转帐回调\n', '    function () external payable {\n', '    revert();\n', '    }\n', '  \n', '  //owner地址支持接受其他ERC20代币\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    /* 公告合约行为 如新增、销毁、更新等 */\n', '    event Issue(uint amount);\n', '\n', '    event Redeem(uint amount);\n', '\n', '    event Params(uint feeBasisPoints, uint maxFee);\n', '    \n', '    event RedeemBLT(address LockUser, uint dirtyFunds);\n', '}']