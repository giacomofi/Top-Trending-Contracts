['// File: contracts\\sakeswap\\libraries\\SafeMath.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity =0.6.12;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '// File: contracts\\sakeswap\\SakeSwapSlippageToken.sol\n', '\n', 'pragma solidity =0.6.12;\n', '\n', '\n', 'contract SakeSwapSlippageToken {\n', '    using SafeMath for uint;\n', '\n', '    string public constant name = "SakeSwap Slippage Token";\n', '    string public constant symbol = "SST";\n', '    uint8 public constant decimals = 18;\n', '    uint  public totalSupply;\n', '    address private _owner;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "SlippageToken: Not Owner");\n', '        _;\n', '    }\n', '\n', '    constructor(uint initialSupply) public {\n', '        _owner = msg.sender;\n', '        _mint(msg.sender, initialSupply);\n', '    }\n', '\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(-1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint value) external onlyOwner returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    function burn(address from, uint value) external onlyOwner returns (bool) {\n', '        _burn(from, value);\n', '        return true;\n', '    }\n', '}']