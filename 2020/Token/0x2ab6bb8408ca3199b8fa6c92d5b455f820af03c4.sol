['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2018-02-25\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '\n', '    function balanceOf(address tokenOwner)\n', '        public\n', '        constant\n', '        returns (uint256 balance);\n', '\n', '    function allowance(address tokenOwner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining);\n', '\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint256 tokens)\n', '        public\n', '        returns (bool success);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokens\n', '    ) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(\n', '        address indexed tokenOwner,\n', '        address indexed spender,\n', '        uint256 tokens\n', '    );\n', '}\n', '\n', 'contract ERC827 {\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) public returns (bool);\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) public returns (bool);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) public returns (bool);\n', '}\n', '\n', 'contract TEFoodsToken is Ownable, ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "TE-FOOD/TustChain";\n', '    string public constant symbol = "TONE";\n', '    uint8 public constant decimals = 18;\n', '    uint256 constant _totalSupply = 1000000000 * 1 ether;\n', '    uint256 public transferrableTime = 9999999999;\n', '    uint256 _vestedSupply;\n', '    uint256 _circulatingSupply;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    struct vestedBalance {\n', '        address addr;\n', '        uint256 balance;\n', '    }\n', '    mapping(uint256 => vestedBalance[]) vestingMap;\n', '\n', '    function TEFoodsToken() public {\n', '        owner = msg.sender;\n', '        balances[0x00] = _totalSupply;\n', '    }\n', '\n', '    event VestedTokensReleased(address to, uint256 amount);\n', '\n', '    function allocateTokens(address addr, uint256 amount)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(addr != 0x00);\n', '        require(amount > 0);\n', '        balances[0x00] = balances[0x00].sub(amount);\n', '        balances[addr] = balances[addr].add(amount);\n', '        _circulatingSupply = _circulatingSupply.add(amount);\n', '        assert(\n', '            _vestedSupply.add(_circulatingSupply).add(balances[0x00]) ==\n', '                _totalSupply\n', '        );\n', '        Transfer(0x00, addr, amount);\n', '        return true;\n', '    }\n', '\n', '    function allocateVestedTokens(\n', '        address addr,\n', '        uint256 amount,\n', '        uint256 vestingPeriod\n', '    ) public onlyOwner returns (bool) {\n', '        require(addr != 0x00);\n', '        require(amount > 0);\n', '        require(vestingPeriod > 0);\n', '        balances[0x00] = balances[0x00].sub(amount);\n', '        vestingMap[vestingPeriod].push(vestedBalance(addr, amount));\n', '        _vestedSupply = _vestedSupply.add(amount);\n', '        assert(\n', '            _vestedSupply.add(_circulatingSupply).add(balances[0x00]) ==\n', '                _totalSupply\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function releaseVestedTokens(uint256 vestingPeriod) public {\n', '        require(now >= transferrableTime.add(vestingPeriod));\n', '        require(vestingMap[vestingPeriod].length > 0);\n', '        require(vestingMap[vestingPeriod][0].balance > 0);\n', '        var v = vestingMap[vestingPeriod];\n', '        for (uint8 i = 0; i < v.length; i++) {\n', '            balances[v[i].addr] = balances[v[i].addr].add(v[i].balance);\n', '            _circulatingSupply = _circulatingSupply.add(v[i].balance);\n', '            _vestedSupply = _vestedSupply.sub(v[i].balance);\n', '            VestedTokensReleased(v[i].addr, v[i].balance);\n', '            Transfer(0x00, v[i].addr, v[i].balance);\n', '            v[i].balance = 0;\n', '        }\n', '    }\n', '\n', '    function enableTransfers() public onlyOwner returns (bool) {\n', '        transferrableTime = now.add(0);\n', '        owner = 0x00;\n', '        return true;\n', '    }\n', '\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _circulatingSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function vestedBalanceOf(address tokenOwner, uint256 vestingPeriod)\n', '        public\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        var v = vestingMap[vestingPeriod];\n', '        for (uint8 i = 0; i < v.length; i++) {\n', '            if (v[i].addr == tokenOwner) return v[i].balance;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender)\n', '        public\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(now >= transferrableTime);\n', '        require(to != address(this));\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 tokens)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        require(now >= transferrableTime);\n', '        require(spender != address(this));\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokens\n', '    ) public returns (bool success) {\n', '        require(now >= transferrableTime);\n', '        require(to != address(this));\n', '        require(allowed[from][msg.sender] >= tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TEFoods827Token is TEFoodsToken, ERC827 {\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) public returns (bool) {\n', '        super.approve(_spender, _value);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) public returns (bool) {\n', '        super.transfer(_to, _value);\n', '        require(_to.call(_data));\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    ) public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '        require(_to.call(_data));\n', '        return true;\n', '    }\n', '}']