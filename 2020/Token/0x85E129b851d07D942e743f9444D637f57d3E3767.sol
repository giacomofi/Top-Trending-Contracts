['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'interface StakingRewards {\n', '    function balanceOf(address)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract BT_ETHVoteProxy {\n', '    IERC20 public constant votes = IERC20(\n', '        0x1aDAC7dE5C5d9894a4F6A80868AdE96F8a2ed0eb\n', '    );\n', '\n', '    StakingRewards public constant stakingRewards = StakingRewards(\n', '        0xC74d15D2e61414C0975B9DC31fA8921c9909D08D\n', '    );\n', '\n', '    function decimals() external pure returns (uint8) {\n', '        return uint8(9);\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return "BT In The Citadel";\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return "BT C";\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return sqrt(votes.totalSupply());\n', '    }\n', '\n', '    function balanceOf(address _voter) external view returns (uint256) {\n', '        uint256 _votes = stakingRewards.balanceOf(_voter);\n', '        return sqrt(_votes);\n', '    }\n', '\n', '    function sqrt(uint256 x) public pure returns (uint256 y) {\n', '        uint256 z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '    constructor() public {}\n', '}']