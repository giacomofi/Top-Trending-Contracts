['pragma solidity 0.5.11;\n', '\n', 'interface IRaffle {\n', '\n', '    function mint(address _user, uint256 _amount) external;\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    \n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    \n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    \n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    \n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    \n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    \n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MultiMintRaffle is Ownable {\n', '\n', '    IRaffle public raffle ;\n', '    constructor(IRaffle _raffle) public {\n', '        raffle = IRaffle(_raffle);\n', '    }\n', '\n', '\n', '    function mint(address[] memory _users, uint256[] memory _amounts) public onlyOwner {\n', '        require(_users.length == _amounts.length, "input length missmatch");\n', '        for(uint i = 0; i < _users.length; i++) {\n', '            raffle.mint(_users[i], _amounts[i]);\n', '        }\n', '        \n', '    }\n', '\n', '}']