['/*\n', '\n', '\n', '\n', '   __  __      _ __              \n', '  / / / /___  (_) /   ____  _  __\n', ' / / / / __ \\/ / /   / __ \\| |/_/\n', '/ /_/ / / / / / /___/ /_/ />  <  \n', '\\____/_/ /_/_/_____/\\____/_/|_|  \n', '                                 \n', '\n', '______         _____       _       ______                       \n', '| ___ \\       /  ___|     | |      | ___ \\                      \n', '| |_/ / __ ___\\ `--.  __ _| | ___  | |_/ / ___  _ __  _   _ ___ \n', "|  __/ '__/ _ \\`--. \\/ _` | |/ _ \\ | ___ \\/ _ \\| '_ \\| | | / __|\n", '| |  | | |  __/\\__/ / (_| | |  __/ | |_/ / (_) | | | | |_| \\__ \\\n', '\\_|  |_|  \\___\\____/ \\__,_|_|\\___| \\____/ \\___/|_| |_|\\__,_|___/\n', '                                                                \n', '                                                                \n', '\n', '                                                     \n', 'PRESALE BONUS TOKEN\n', '\n', 'unilox.io\n', '\n', '$PRELOX\n', '\n', '$PRELOX is used to secure a 2X bonus on presale purchases of $LOX token\n', '\n', '$LOX presale begins Sept 18 and ends Sept 20\n', '\n', 'LOX/ETH will launch on Uniswap Setp 20\n', '\n', 'To gain the 2X bonus buyers of $LOX must hold at least 1,000 $PRELOX tokens\n', '\n', '\n', '\n', 'Website:   https://unilox.io\n', '\n', 'Telegram:  https://t.me/unilox\n', '\n', 'Twitter:   https://twitter.com/Uniloxio\n', '\n', 'Discord:   https://discord.gg/PcaQ473\n', '\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract PRELOX is ERC20Detailed {\n', '\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  mapping (uint => string) private _assets;\n', '\n', '  string constant tokenName = "UniLox.io";   \n', '  string constant tokenSymbol = "PRELOX";  \n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 _totalSupply = 2000000e18;\n', '  address admin; \n', '\n', '  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    \n', '    admin = msg.sender;\n', '    _balances[admin] = 1000000e18;\n', '\n', '    emit Transfer(address(0), msg.sender, 1000000e18);\n', '  }\n', '\n', '  function() external payable {\n', '  }\n', '\n', '   function withdraw() external onlyAdministrator() {\n', '\n', '      msg.sender.transfer(address(this).balance);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint tokensToSend = value;\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(tokensToSend);\n', '    _balances[to] = _balances[to].add(tokensToSend);\n', '\n', '    emit Transfer(msg.sender, to, tokensToSend);\n', '\n', '    return true;\n', '  }\n', '\n', '     modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(_customerAddress == admin);\n', '        _;\n', '    }\n', '\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '   \n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint tokensToSend = value;\n', '\n', '    _balances[from] = _balances[from].sub(tokensToSend);\n', '    _balances[to] = _balances[to].add(tokensToSend);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokensToSend);\n', '\n', '    emit Transfer(from, to, tokensToSend);\n', '   \n', '    return true;\n', '  }\n', '\n', '  function destroy(uint256 amount) external {\n', '    _destroy(msg.sender, amount);\n', '  }\n', '\n', '  function _destroy(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    require(amount <= _balances[account]);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  function destroyFrom(address account, uint256 amount) external {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '    _destroy(account, amount);\n', '  }\n', '\n', '}']