['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract Context {\n', '    constructor() internal {}\n', '\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor(string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds balance"\n', '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '}\n', '\n', '\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds allowance"\n', '        );\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', 'interface IERC165 {\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', 'interface IERC1363 is IERC20, IERC165 {\n', '    function transferAndCall(address to, uint256 value) external returns (bool);\n', '\n', '    function transferAndCall(\n', '        address to,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '\n', '    function transferFromAndCall(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function transferFromAndCall(\n', '        address from,\n', '        address to,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '\n', '    function approveAndCall(address spender, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function approveAndCall(\n', '        address spender,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface IERC1363Receiver {\n', '    function onTransferReceived(\n', '        address operator,\n', '        address from,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bytes4); // solhint-disable-line  max-line-length\n', '}\n', '\n', 'interface IERC1363Spender {\n', '    function onApprovalReceived(\n', '        address owner,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '}\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'library ERC165Checker {\n', '    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    function supportsERC165(address account) internal view returns (bool) {\n', '        return\n', '            _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n', '            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n', '    }\n', '\n', '    function supportsInterface(address account, bytes4 interfaceId)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        // query support of both ERC165 as per the spec and support of _interfaceId\n', '        return\n', '            supportsERC165(account) &&\n', '            _supportsERC165Interface(account, interfaceId);\n', '    }\n', '\n', '    function supportsAllInterfaces(\n', '        address account,\n', '        bytes4[] memory interfaceIds\n', '    ) internal view returns (bool) {\n', '        // query support of ERC165 itself\n', '        if (!supportsERC165(account)) {\n', '            return false;\n', '        }\n', '\n', '        // query support of each interface in _interfaceIds\n', '        for (uint256 i = 0; i < interfaceIds.length; i++) {\n', '            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        // all interfaces supported\n', '        return true;\n', '    }\n', '\n', '    function _supportsERC165Interface(address account, bytes4 interfaceId)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        (bool success, bool result) = _callERC165SupportsInterface(\n', '            account,\n', '            interfaceId\n', '        );\n', '\n', '        return (success && result);\n', '    }\n', '\n', '    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n', '        private\n', '        view\n', '        returns (bool, bool)\n', '    {\n', '        bytes memory encodedParams = abi.encodeWithSelector(\n', '            _INTERFACE_ID_ERC165,\n', '            interfaceId\n', '        );\n', '        (bool success, bytes memory result) = account.staticcall{gas: 30000}(\n', '            encodedParams\n', '        );\n', '        if (result.length < 32) return (false, false);\n', '        return (success, abi.decode(result, (bool)));\n', '    }\n', '}\n', '\n', 'contract ERC165 is IERC165 {\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor() internal {\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    function supportsInterface(bytes4 interfaceId)\n', '        public\n', '        override\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', 'contract ERC1363 is ERC20, IERC1363, ERC165 {\n', '    using Address for address;\n', '\n', '    bytes4 internal constant _INTERFACE_ID_ERC1363_TRANSFER = 0x4bbee2df;\n', '\n', '    bytes4 internal constant _INTERFACE_ID_ERC1363_APPROVE = 0xfb9ec8ce;\n', '\n', '    bytes4 private constant _ERC1363_RECEIVED = 0x88a7ca5c;\n', '\n', '    bytes4 private constant _ERC1363_APPROVED = 0x7b04a2d0;\n', '\n', '    constructor(string memory name, string memory symbol)\n', '        public\n', '        payable\n', '        ERC20(name, symbol)\n', '    {\n', '        _registerInterface(_INTERFACE_ID_ERC1363_TRANSFER);\n', '        _registerInterface(_INTERFACE_ID_ERC1363_APPROVE);\n', '    }\n', '\n', '    function transferAndCall(address to, uint256 value)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        return transferAndCall(to, value, "");\n', '    }\n', '\n', '    function transferAndCall(\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) public override returns (bool) {\n', '        transfer(to, value);\n', '        require(\n', '            _checkAndCallTransfer(_msgSender(), to, value, data),\n', '            "ERC1363: _checkAndCallTransfer reverts"\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function transferFromAndCall(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public override returns (bool) {\n', '        return transferFromAndCall(from, to, value, "");\n', '    }\n', '\n', '    function transferFromAndCall(\n', '        address from,\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) public override returns (bool) {\n', '        transferFrom(from, to, value);\n', '        require(\n', '            _checkAndCallTransfer(from, to, value, data),\n', '            "ERC1363: _checkAndCallTransfer reverts"\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint256 value)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        return approveAndCall(spender, value, "");\n', '    }\n', '\n', '    function approveAndCall(\n', '        address spender,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) public override returns (bool) {\n', '        approve(spender, value);\n', '        require(\n', '            _checkAndCallApprove(spender, value, data),\n', '            "ERC1363: _checkAndCallApprove reverts"\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function _checkAndCallTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) internal returns (bool) {\n', '        if (!to.isContract()) {\n', '            return false;\n', '        }\n', '        bytes4 retval = IERC1363Receiver(to).onTransferReceived(\n', '            _msgSender(),\n', '            from,\n', '            value,\n', '            data\n', '        );\n', '        return (retval == _ERC1363_RECEIVED);\n', '    }\n', '\n', '    function _checkAndCallApprove(\n', '        address spender,\n', '        uint256 value,\n', '        bytes memory data\n', '    ) internal returns (bool) {\n', '        if (!spender.isContract()) {\n', '            return false;\n', '        }\n', '        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\n', '            _msgSender(),\n', '            value,\n', '            data\n', '        );\n', '        return (retval == _ERC1363_APPROVED);\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenRecover is Ownable {\n', '    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '    }\n', '}\n', '\n', 'library EnumerableSet {\n', '    struct Set {\n', '        bytes32[] _values;\n', '        mapping(bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) {\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            set._indexes[lastvalue] = toDeleteIndex + 1;\n', '\n', '            set._values.pop();\n', '\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _contains(Set storage set, bytes32 value)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '    function _at(Set storage set, uint256 index)\n', '        private\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        require(\n', '            set._values.length > index,\n', '            "EnumerableSet: index out of bounds"\n', '        );\n', '        return set._values[index];\n', '    }\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    function remove(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    function contains(AddressSet storage set, address value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(AddressSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    function remove(UintSet storage set, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    function contains(UintSet storage set, uint256 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(UintSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping(bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    event RoleGranted(\n', '        bytes32 indexed role,\n', '        address indexed account,\n', '        address indexed sender\n', '    );\n', '\n', '    event RoleRevoked(\n', '        bytes32 indexed role,\n', '        address indexed account,\n', '        address indexed sender\n', '    );\n', '\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    function getRoleMember(bytes32 role, uint256 index)\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(\n', '            hasRole(_roles[role].adminRole, _msgSender()),\n', '            "AccessControl: sender must be an admin to grant"\n', '        );\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(\n', '            hasRole(_roles[role].adminRole, _msgSender()),\n', '            "AccessControl: sender must be an admin to revoke"\n', '        );\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(\n', '            account == _msgSender(),\n', '            "AccessControl: can only renounce roles for self"\n', '        );\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', 'contract Roles is AccessControl {\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER");\n', '    bytes32 public constant OPERATOR_ROLE = keccak256("OPERATOR");\n', '    constructor() public {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        _setupRole(MINTER_ROLE, _msgSender());\n', '        _setupRole(OPERATOR_ROLE, _msgSender());\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(\n', '            hasRole(MINTER_ROLE, _msgSender()),\n', '            "Roles: caller does not have the MINTER role"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(\n', '            hasRole(OPERATOR_ROLE, _msgSender()),\n', '            "Roles: caller does not have the OPERATOR role"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', 'contract BaseToken is  ERC20Burnable, ERC1363, Roles, TokenRecover {\n', '    bool private _mintingFinished = false;\n', '\n', '    event MintFinished();\n', '\n', ' \n', '    modifier canMint() {\n', '        require(!_mintingFinished, "BaseToken: minting is finished");\n', '        _;\n', '    }\n', '\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 initialSupply,\n', '        bool mintingFinished\n', '    ) public  ERC1363(name, symbol) {\n', '       \n', '        _setupDecimals(decimals);\n', '\n', '        if (initialSupply > 0) {\n', '            _mint(owner(), initialSupply);\n', '        }\n', '\n', '        if (mintingFinished) {\n', '            finishMinting();\n', '        }\n', '\n', '    }\n', '\n', '    function mintingFinished() public view returns (bool) {\n', '        return _mintingFinished;\n', '    }\n', '\n', '\n', '\n', '    function mint(address to, uint256 value) public canMint onlyMinter {\n', '        _mint(to, value);\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        virtual\n', '        override(ERC20)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public virtual override(ERC20)  returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function finishMinting() public canMint onlyOwner {\n', '        _mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '    }\n', '}']