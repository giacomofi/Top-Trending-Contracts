['//   _    _ _   _                __ _                            \n', '//  | |  (_) | | |              / _(_)                           \n', '//  | | ___| |_| |_ ___ _ __   | |_ _ _ __   __ _ _ __   ___ ___ \n', "//  | |/ / | __| __/ _ \\ '_ \\  |  _| | '_ \\ / _` | '_ \\ / __/ _ \\\n", '//  |   <| | |_| ||  __/ | | |_| | | | | | | (_| | | | | (_|  __/\n', '//  |_|\\_\\_|\\__|\\__\\___|_| |_(_)_| |_|_| |_|\\__,_|_| |_|\\___\\___|\n', '//\n', 'pragma solidity ^0.5.16;\n', '\n', 'library SafeMathInt {\n', '    int256 private constant MIN_INT256 = int256(1) << 255;\n', '    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n', '\n', '    /**\n', '     * @dev Multiplies two int256 variables and fails on overflow.\n', '     */\n', '    function mul(int256 a, int256 b)\n', '        internal\n', '        pure\n', '        returns (int256)\n', '    {\n', '        int256 c = a * b;\n', '\n', '        // Detect overflow when multiplying MIN_INT256 with -1\n', '        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n', '        require((b == 0) || (c / b == a));\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Division of two int256 variables and fails on overflow.\n', '     */\n', '    function div(int256 a, int256 b)\n', '        internal\n', '        pure\n', '        returns (int256)\n', '    {\n', '        // Prevent overflow when dividing MIN_INT256 by -1\n', '        require(b != -1 || a != MIN_INT256);\n', '\n', '        // Solidity already throws when dividing by 0.\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two int256 variables and fails on overflow.\n', '     */\n', '    function sub(int256 a, int256 b)\n', '        internal\n', '        pure\n', '        returns (int256)\n', '    {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two int256 variables and fails on overflow.\n', '     */\n', '    function add(int256 a, int256 b)\n', '        internal\n', '        pure\n', '        returns (int256)\n', '    {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Converts to absolute value, and fails on overflow.\n', '     */\n', '    function abs(int256 a)\n', '        internal\n', '        pure\n', '        returns (int256)\n', '    {\n', '        require(a != MIN_INT256);\n', '        return a < 0 ? -a : a;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20_BASED is Context, IERC20 {\n', '    using SafeMath for uint;\n', '\n', '    uint internal _gonsPerFragment;\n', '\n', '    mapping(address => uint) internal _gonBalances;\n', '\n', '    mapping (address => mapping (address => uint)) internal _allowedFragments;\n', '\n', '    uint internal _totalSupply;\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _gonBalances[account].div(_gonsPerFragment);\n', '    }\n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowedFragments[owner][spender];\n', '    }\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowedFragments[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowedFragments[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowedFragments[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        uint gonValue = amount.mul(_gonsPerFragment);\n', '        _gonBalances[sender] = _gonBalances[sender].sub(gonValue, "ERC20: transfer amount exceeds balance");\n', '        _gonBalances[recipient] = _gonBalances[recipient].add(gonValue);\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowedFragments[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract kBASEv0 is ERC20_BASED, ERC20Detailed {\n', '    using SafeMath for uint;\n', '    using SafeMathInt for int256;\n', '\n', '    address public governance;\n', '\n', '    constructor () public ERC20Detailed("kBASEv0 - Kitten.Finance", "kBASEv0", uint8(DECIMALS)) {\n', '        governance = msg.sender;\n', '\n', '        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n', '        _gonBalances[msg.sender] = TOTAL_GONS;\n', '        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '        \n', '        emit Transfer(address(0x0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    //=====================================================================\n', '\n', '    uint private constant DECIMALS = 18;\n', '    uint private constant MAX_UINT256 = ~uint(0);\n', '    uint private constant INITIAL_FRAGMENTS_SUPPLY = 100000 * uint(10)**DECIMALS;\n', '    uint private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n', '    uint private constant MAX_SUPPLY = ~uint128(0);  // (2^128) - 1\n', '\n', '    event LogRebase(uint indexed epoch, uint totalSupply);\n', '    event LogMonetaryPolicyUpdated(address monetaryPolicy);\n', '\n', '    address public monetaryPolicy;\n', '    \n', '    function setMonetaryPolicy(address monetaryPolicy_) external\n', '    {\n', '        require(msg.sender == governance, "!governance");\n', '        monetaryPolicy = monetaryPolicy_;\n', '        emit LogMonetaryPolicyUpdated(monetaryPolicy_);\n', '    }\n', '\n', '    function rebase(uint epoch, int256 supplyDelta) external returns (uint)\n', '    {\n', '        require(msg.sender == monetaryPolicy, "!monetaryPolicy");\n', '\n', '        if (supplyDelta == 0) {\n', '            emit LogRebase(epoch, _totalSupply);\n', '            return _totalSupply;\n', '        }\n', '\n', '        if (supplyDelta < 0) {\n', '            _totalSupply = _totalSupply.sub(uint(supplyDelta.abs()));\n', '        } else {\n', '            _totalSupply = _totalSupply.add(uint(supplyDelta));\n', '        }\n', '\n', '        if (_totalSupply > MAX_SUPPLY) {\n', '            _totalSupply = MAX_SUPPLY;\n', '        }\n', '\n', '        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '\n', '        // From this point forward, _gonsPerFragment is taken as the source of truth.\n', '        // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\n', '        // conversion rate.\n', '        // This means our applied supplyDelta can deviate from the requested supplyDelta,\n', '        // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\n', '        //\n', '        // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\n', '        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\n', '        // ever increased, it must be re-included.\n', '        // _totalSupply = TOTAL_GONS.div(_gonsPerFragment)\n', '\n', '        emit LogRebase(epoch, _totalSupply);\n', '        return _totalSupply;\n', '    }\n', '\n', '    //=====================================================================\n', '}']