['pragma solidity ^0.4.18;\n', '\n', '/**\n', '\n', '* @title ERC20Basic\n', '\n', '* @dev Simpler version of ERC20 interface\n', '\n', '*/\n', '\n', 'contract ERC20Basic {\n', '\n', '\n', ' function totalSupply() public view returns (uint256); \n', '\n', ' function balanceOf(address who) public view returns (uint256); \n', '\n', ' function transfer(address to, uint256 value) public returns (bool); \n', '\n', ' event Transfer(address indexed from, address indexed to, uint256 value); \n', '\n', '}\n', '\n', '/**\n', '\n', '* @title SafeMath\n', '\n', '* @dev Math operations with safety checks that throw on error\n', '\n', '*/\n', '\n', 'library SafeMath {\n', '\n', ' /**\n', '\n', ' * @dev Multiplies two numbers, throws on overflow.\n', '\n', ' */\n', '\n', ' function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '  if (a == 0) {\n', '\n', '   return 0;\n', '\n', '  }\n', '\n', '  uint256 c = a * b;\n', '\n', '  assert(c / a == b);\n', '\n', '  return c;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Integer division of two numbers, truncating the quotient.\n', '\n', ' */\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '  // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', '  uint256 c = a / b;\n', '\n', "  // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '  return c;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', ' */\n', '\n', ' function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '  assert(b <= a);\n', '\n', '  return a - b;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Adds two numbers, throws on overflow.\n', '\n', ' */\n', '\n', ' function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '  uint256 c = a + b;\n', '\n', '  assert(c >= a);\n', '\n', '  return c;\n', '\n', ' }\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title ERC20 interface\n', '\n', '*/\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', ' function allowance(address owner, address spender) public view returns (uint256);\n', '\n', ' function transferFrom(address from, address to, uint256 value) public returns (bool); \n', '\n', ' function approve(address spender, uint256 value) public returns (bool); \n', '\n', ' event Approval(address indexed owner, address indexed spender, uint256 value); \n', '\n', '}\n', '\n', '/**\n', '\n', '* @title Basic token\n', '\n', '* @dev Basic version of StandardToken, with no allowances.\n', '\n', '*/\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', ' using SafeMath for uint256;\n', '\n', ' mapping(address => uint256) balances; \n', '\n', ' uint256 totalSupply_; \n', '\n', ' /**\n', '\n', ' * @dev total number of tokens in existence\n', '\n', ' */\n', '\n', ' function totalSupply() public view returns (uint256) {\n', '\n', '  return totalSupply_;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev transfer token for a specified address\n', '\n', ' * @param _to The address to transfer to.\n', '\n', ' * @param _value The amount to be transferred.\n', '\n', ' */\n', '\n', ' function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '  require(_to != address(0)); \n', '\n', '  require(_value <= balances[msg.sender]); \n', '\n', '  // SafeMath.sub will throw if there is not enough balance.\n', '\n', '  balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '  balances[_to] = balances[_to].add(_value); \n', '\n', '  Transfer(msg.sender, _to, _value);\n', '\n', '  return true;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Gets the balance of the specified address.\n', '\n', ' * @param _owner The address to query the the balance of.\n', '\n', ' * @return An uint256 representing the amount owned by the passed address.\n', '\n', ' */\n', '\n', ' function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '  return balances[_owner]; \n', ' \n', ' }\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title Standard ERC20 token\n', '\n', '*\n', '\n', '* @dev Implementation of the basic standard token.\n', '\n', '*/\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', ' mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', ' /**\n', '\n', ' * @dev Transfer tokens from one address to another\n', '\n', ' * @param _from address The address which you want to send tokens from\n', '\n', ' * @param _to address The address which you want to transfer to\n', '\n', ' * @param _value uint256 the amount of tokens to be transferred\n', '\n', ' */\n', '\n', ' function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '  require(_to != address(0)); \n', '\n', '  require(_value <= balances[_from]); \n', '\n', '  require(_value <= allowed[_from][msg.sender]);\n', '\n', '  balances[_from] = balances[_from].sub(_value);\n', '\n', '  balances[_to] = balances[_to].add(_value);\n', '\n', '  allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n', '\n', '  Transfer(_from, _to, _value);\n', '\n', '  return true;\n', '\n', ' }\n', '\n', ' /**\n', '\n', '  * @param _spender address The address which you want to transfer to\n', '\n', '  * @param _value uint256 the amount of tokens to be transferred\n', '\n', '  */\n', '\n', ' function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '  allowed[msg.sender][_spender] = _value;\n', '\n', '  Approval(msg.sender, _spender, _value);\n', '\n', '  return true;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\n', ' * @param _owner address The address which owns the funds.\n', '\n', ' * @param _spender address The address which will spend the funds.\n', '\n', ' * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\n', ' */\n', '\n', ' function allowance(address _owner, address _spender) public view returns (uint256) {\n', '\n', '  return allowed[_owner][_spender];\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\n', ' *\n', '\n', ' * approve should be called when allowed[_spender] == 0. To increment\n', '\n', ' * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\n', ' * the first transaction is mined)\n', '\n', ' * From MonolithDAO Token.sol\n', '\n', ' * @param _spender The address which will spend the funds.\n', '\n', ' * @param _addedValue The amount of tokens to increase the allowance by.\n', '\n', '\n', ' */\n', '\n', ' function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\n', '  allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '  return true;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\n', ' *\n', '\n', ' * approve should be called when allowed[_spender] == 0. To decrement\n', '\n', ' * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\n', ' * the first transaction is mined)\n', '\n', ' * From MonolithDAO Token.sol\n', '\n', ' * @param _spender The address which will spend the funds.\n', '\n', ' * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\n', '\n', ' */\n', '\n', ' function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\n', '  uint oldValue = allowed[msg.sender][_spender];\n', '\n', '  if (_subtractedValue > oldValue) {\n', '\n', '   allowed[msg.sender][_spender] = 0;\n', '\n', '  } else {\n', '\n', '   allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\n', '  }\n', '\n', '  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '  return true;\n', '\n', ' }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '\n', '* @title Ownable\n', '\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '\n', '* functions, this simplifies the implementation of "user permissions". \n', '\n', '*/\n', '\n', 'contract Ownable {\n', '\n', ' address public owner;\n', '\n', ' event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', ' /**\n', '\n', ' * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\n', ' * account.\n', '\n', ' */\n', '\n', ' function Ownable() public {\n', '\n', '  owner = msg.sender;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Throws if called by any account other than the owner.\n', '\n', ' */\n', '\n', ' modifier onlyOwner() {\n', '\n', '  require(msg.sender == owner);\n', '\n', '  _;\n', '\n', ' }\n', '\n', ' /**\n', '\n', ' * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\n', ' * @param newOwner The address to transfer ownership to. \n', '\n', ' */\n', '\n', ' function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '  require(newOwner != address(0));\n', '\n', '  OwnershipTransferred(owner, newOwner);\n', '\n', '  owner = newOwner;\n', '\n', ' }\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title SimpleToken\n', '\n', '* @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', '\n', '* Note they can later distribute these tokens as they wish using `transfer` and other\n', '\n', '\n', '*/\n', '\n', 'contract XXXToken is StandardToken , Ownable {\n', '\n', '  string public constant name = "XXXToken"; // solium-disable-line uppercase\n', '\n', '  string public constant symbol = "XXX"; // solium-disable-line uppercase\n', '\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 30000000 * (10 ** uint256(decimals));\n', '  \n', '  uint256 public  MINTING_SUPPLY = 9000000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '\n', '  * @dev Constructor that gives msg.sender all of existing tokens.\n', '\n', '  */\n', '\n', '  function XXXToken() public {\n', '\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    \n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '\n', '    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', '\n', ' * @dev lock coin\n', '\n', ' */\n', '\n', 'contract XXXTokenVault is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '    \n', '  address private owner;\n', '\n', '  uint256 private teamTimeLock = 1 * 365 days;\n', '  \n', '//   uint256 private mintingTimeLock = 90 days;\n', '\t\n', ' uint256 private mintingTimeLock = 90 seconds;\n', '  \n', '\n', '  /** Reserve allocations */\n', '\n', '  mapping (address=>mapping(uint256 => mapping (uint8 => uint256))) public allocations;\n', '\n', '  /** When timeLocks are over (UNIX Timestamp) */\n', '\n', '  mapping (address=>mapping(uint256 => mapping (uint8 => uint256))) public timeLocks;\n', '\n', '\n', '  /** When this vault was locked (UNIX Timestamp)*/\n', '\n', '  uint256 private lockedAt = 0;\n', '\n', '  XXXToken public token;\n', '\n', '\n', '  /** Distributed reserved tokens */\n', '\n', '  event Distributed(uint256 lockId,uint8 batch, uint256 value);\n', '\n', '  /** Tokens have been locked */\n', '\n', '  event Locked(uint256 lockId,uint256 lockTime, uint256 value);\n', '\n', '\n', '  function XXXTokenVault(ERC20 _token) public { \n', '\n', '    owner = msg.sender; \n', '\n', '    token = XXXToken(_token);\n', '\n', '  }\n', '\n', '  /** lock team coin */\n', '\n', '  function lockTeam(uint256 lockId,uint256 _amount) public onlyOwner returns (bool){\n', '\n', '    lockedAt = block.timestamp; \n', '    timeLocks[msg.sender][lockId][0] = lockedAt.add(teamTimeLock);\n', '    timeLocks[msg.sender][lockId][1] = lockedAt.add(teamTimeLock.mul(2));\n', '    allocations[msg.sender][lockId][0] = _amount;\n', '    allocations[msg.sender][lockId][1] = 0;\n', '\n', '    Locked(lockId,lockedAt,_amount);\n', '\n', '  }\n', '  /** lock minting coin */\n', '  function lockMinting(address _owner, uint256 lockId,uint256 _amount) public  returns (bool){\n', '\n', '    lockedAt = block.timestamp; \n', '    timeLocks[_owner][lockId][0] = lockedAt.add(mintingTimeLock);\n', '    timeLocks[_owner][lockId][1] = lockedAt.add(mintingTimeLock.mul(2));\n', '    allocations[_owner][lockId][0] = _amount.div(2);\n', '    allocations[_owner][lockId][1] = _amount.div(2);\n', '\n', '    Locked(lockId,lockedAt,_amount);\n', '    \n', '    return true;\n', '\n', '  }\n', '  \n', '\n', '  // Total number of tokens currently in the vault\n', '\n', '  function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '    return token.balanceOf(address(this));\n', '\n', '  }\n', '\n', '  // Number of tokens that are still locked\n', '\n', '  function getLockedBalance(address parter,uint256 lockId) public view  returns (uint256 tokensLocked) {\n', '\n', '    return allocations[parter][lockId][0].add(allocations[parter][lockId][1]);\n', '\n', '  }\n', '\n', '  //Claim tokens for reserve wallets\n', '\n', '  function claimTokenReserve(address parter,uint256 lockId,uint8 batch)  public  returns (bool){\n', '      \n', '    require( batch==0 || batch==1);\n', '    \n', '    require(allocations[parter][lockId][batch] !=0 &&timeLocks[parter][lockId][batch] !=0);\n', '    \n', '    require(block.timestamp > timeLocks[parter][lockId][batch]);\n', '\n', '    uint256 amount = allocations[parter][lockId][batch];\n', '    \n', '    require(token.transfer(msg.sender, amount));\n', '    \n', '    allocations[parter][lockId][batch]=0;\n', '    \n', '    timeLocks[parter][lockId][batch]=0;\n', '\n', '    Distributed(lockId,batch, amount);\n', '    \n', '    return true;\n', '\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract TetherToken  {\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32);\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32);\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    function balanceOf(address who) public constant returns (uint);\n', '}\n', '\n', '\n', '\n', 'contract Minting is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address public admin; \n', '\tmapping (address => uint256) public minters;\n', '    \n', '    TetherToken public tokenUsdt;\n', '    XXXToken public tokenXXX;\n', '    XXXTokenVault public tokenVault;\n', '    \n', '    address public beneficiary;\n', '    uint256 public price; \n', '    \n', '      // Transfer all tokens on this contract back to the owner\n', '      function getUsdt(address _Account,uint256 _mount) external  onlyOwner returns (bool){\n', '\n', '        tokenUsdt.transfer(_Account, _mount);\n', '\n', '      }\n', '    \n', '    function Minting(address _adminAccount, ERC20 _tokenUsdt, ERC20 _tokenXXX, ERC20 _tokenVault, uint256 _price) public {\n', '        \n', '\t\tadmin = _adminAccount;\n', '\t\t\n', '        transferOwnership(admin);\n', '        \n', '        tokenXXX = XXXToken(_tokenXXX);\n', '        \n', '        tokenUsdt = TetherToken(_tokenUsdt);\n', '        \n', '        tokenVault = XXXTokenVault(_tokenVault);\n', '        \n', '        price = _price;\n', '\t}\n', '\n', '\tfunction setPrice(uint256 _price) public onlyOwner returns (bool){\n', '\t\t price = _price;\n', '\t}\n', '\n', '\tfunction setMinter(address minter, uint256 _usdtAmount) public onlyOwner returns (bool){\n', '\t\tminters[minter]=_usdtAmount;\n', '\t}\n', '    \n', '    function mintingXXX(uint256 Appid, uint256 _usdtAmount) public returns (bool){\n', '        beneficiary = msg.sender;\n', '\n', '\t\trequire(minters[beneficiary]>0);\n', '        \n', '        _preValidatePurchaseMinting(beneficiary, _usdtAmount);    \n', '        \n', '        uint256 _usdtToXXXAmount = _usdtAmount.mul(price).div(10000);\n', '        \n', '        require(tokenXXX.balanceOf(address(this)) >= _usdtToXXXAmount);\n', '\n', '        tokenUsdt.transferFrom(msg.sender, address(this), _usdtAmount);\n', '        \n', '        require(tokenXXX.transfer(tokenVault, _usdtToXXXAmount));\n', '        \n', '        require(tokenVault.lockMinting(msg.sender,Appid,_usdtToXXXAmount));\n', '        \n', '        minters[beneficiary]=0;\n', '        \n', '        return true;\n', '        \n', '    }\n', '    \n', '     function refundXXX(uint256 _XXXAmount) public returns (bool){\n', '        beneficiary = msg.sender;\n', '        \n', '        _preValidatePurchaseRefund(beneficiary, _XXXAmount);    \n', '        \n', '        uint256 _XXXToUsdtAmount = _XXXAmount.div(price).mul(10000);\n', '        \n', '        require(tokenUsdt.balanceOf(address(this)) >= _XXXToUsdtAmount);\n', '\n', '        require(tokenXXX.transferFrom(msg.sender, address(this), _XXXAmount));\n', '        \n', '        tokenUsdt.transfer(beneficiary, _XXXToUsdtAmount);\n', '        \n', '        return true;\n', '        \n', '    }\n', '    \n', '    \n', '     function _preValidatePurchaseRefund(address _beneficiary, uint256 _amount) internal view {\n', '        require(_amount > 0);\n', '        require(tokenXXX.allowance(_beneficiary, address(this)) >= _amount);\n', '        require(tokenXXX.balanceOf(_beneficiary) >= _amount);\n', '        this; \n', '    }\n', '    \n', '    \n', '    function _preValidatePurchaseMinting(address _beneficiary, uint256 _amount) internal view {\n', '        require(_amount > 0);\n', '        require(tokenUsdt.allowance(_beneficiary, address(this)) >= _amount);\n', '        require(tokenUsdt.balanceOf(_beneficiary) >= _amount);\n', '        this; \n', '    }\n', '    \t\n', '    \n', '}']