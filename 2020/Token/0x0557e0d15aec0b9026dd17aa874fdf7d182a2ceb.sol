['pragma solidity 0.4.26;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '    uint public _totalSupply;\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'contract Proxy {\n', '    /**\n', '    * @dev Tells the address of the implementation where every call will be delegated.\n', '    * @return address of the implementation to which it will be delegated\n', '    */\n', '    function _implementation() internal view returns(address);\n', '\n', '    /**\n', '    * @dev Fallback function.\n', '    * Implemented entirely in `_fallback`.\n', '    */\n', '    function _fallback() internal {\n', '        _delegate(_implementation());\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    function _delegate(address implementation) internal {\n', '        /*solium-disable-next-line security/no-inline-assembly*/\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize)\n', '            // Call the implementation.\n', "            // out and outsize are 0 because we don't know the size yet.\n", '            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize)\n', '            switch result\n', '            // delegatecall returns 0 on error.\n', '            case 0 { revert(0, returndatasize) }\n', '            default { return(0, returndatasize) }\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        _fallback();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n', ' */\n', 'contract UpgradeabilityProxy is Proxy {\n', '    // Version name of the current implementation\n', '    string internal __version;\n', '\n', '    // Address of the current implementation\n', '    address internal __implementation;\n', '\n', '    /**\n', '    * @dev This event will be emitted every time the implementation gets upgraded\n', '    * @param _newVersion representing the version name of the upgraded implementation\n', '    * @param _newImplementation representing the address of the upgraded implementation\n', '    */\n', '    event Upgraded(string _newVersion, address indexed _newImplementation);\n', '\n', '    /**\n', '    * @dev Upgrades the implementation address\n', '    * @param _newVersion representing the version name of the new implementation to be set\n', '    * @param _newImplementation representing the address of the new implementation to be set\n', '    */\n', '    function _upgradeTo(string memory _newVersion, address _newImplementation) internal {\n', '        require(\n', '            __implementation != _newImplementation && _newImplementation != address(0),\n', '            "Old address is not allowed and implementation address should not be 0x"\n', '        );\n', '        require(Address.isContract(_newImplementation), "Cannot set a proxy implementation to a non-contract address");\n', '        require(bytes(_newVersion).length > 0, "Version should not be empty string");\n', '        require(keccak256(abi.encodePacked(__version)) != keccak256(abi.encodePacked(_newVersion)), "New version equals to current");\n', '        __version = _newVersion;\n', '        __implementation = _newImplementation;\n', '        emit Upgraded(_newVersion, _newImplementation);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '    /**\n', '      * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '      * account.\n', '      */\n', '    constructor() public {  \n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '      * @dev Throws if called by any account other than the owner.\n', '      */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "Address should not be 0x");\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function approveOwnership() public{\n', '        require(newOwner == msg.sender);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) public balances;\n', '\n', '    /**\n', '    * @dev Fix for the ERC20 short address attack.\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '    mapping (address => mapping (address => uint)) public allowed;\n', '\n', '    uint public constant MAX_UINT = 2**256 - 1;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '\n', '        if (_allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        }\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '       \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract BlackList is Ownable, BasicToken {\n', '\n', '    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\n', '    function getBlackListStatus(address _maker) external constant returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '\n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList (address _evilUser) public onlyOwner {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList (address _clearedUser) public onlyOwner {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\n', '    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        _totalSupply -= dirtyFunds;\n', '        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '\n', '    event AddedBlackList(address _user);\n', '\n', '    event RemovedBlackList(address _user);\n', '\n', '}\n', '\n', 'contract TetherToken is Pausable, StandardToken, BlackList, UpgradeabilityProxy{\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    bool public deprecated;\n', '\n', '    //  The contract can be initialized with a number of tokens\n', '    //  All the tokens are deposited to the owner address\n', '    //\n', '    // @param _balance Initial supply of the contract\n', '    // @param _name Token Name\n', '    // @param _symbol Token symbol\n', '    // @param _decimals Token decimals\n', '    constructor(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n', '        _totalSupply = _initialSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balances[owner] = _initialSupply;\n', '        deprecated = false;\n', '    }\n', '\n', '    function _implementation() internal view returns(address){\n', '        return __implementation;\n', '    }\n', '\n', '    modifier isDeprecated() {\n', '        if (deprecated) {\n', '            _fallback();\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transfer(address _to, uint _value) public whenNotPaused isDeprecated {\n', '        require(!isBlackListed[msg.sender]);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transferFrom(address _from, address _to, uint _value) public whenNotPaused isDeprecated{\n', '        require(!isBlackListed[_from]);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function balanceOf(address who) public constant returns (uint){\n', '        return super.balanceOf(who);\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) isDeprecated{\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining){\n', '        \n', '        return super.allowance(_owner, _spender);\n', '    }\n', '\n', '    function upgradeTo(string memory _newVersion, address _newImplementation) public onlyOwner{\n', '        _upgradeTo(_newVersion, _newImplementation);\n', '        deprecated = true;\n', '        emit Deprecate(_newImplementation);\n', '    }\n', '\n', '    // deprecate current contract if favour of a new one\n', '    function totalSupply() public constant returns (uint) {\n', '        \n', '        return _totalSupply;\n', '    }\n', '\n', '    // Issue a new amount of tokens\n', '    // these tokens are deposited into the owner address\n', '    //\n', '    // @param _amount Number of tokens to be issued\n', '    function issue(uint amount) public onlyOwner {\n', '        require(_totalSupply + amount > _totalSupply);\n', '        require(balances[owner] + amount > balances[owner]);\n', '\n', '        balances[owner] += amount;\n', '        _totalSupply += amount;\n', '        emit Issue(amount);\n', '    }\n', '\n', '    // Redeem tokens.\n', '    // These tokens are withdrawn from the owner address\n', '    // if the balance must be enough to cover the redeem\n', '    // or the call will fail.\n', '    // @param _amount Number of tokens to be issued\n', '    function redeem(uint amount) public onlyOwner {\n', '        require(_totalSupply >= amount);\n', '        require(balances[owner] >= amount);\n', '\n', '        _totalSupply -= amount;\n', '        balances[owner] -= amount;\n', '        emit Redeem(amount);\n', '    }\n', '\n', '    // Called when new token are issued\n', '    event Issue(uint amount);\n', '\n', '    // Called when tokens are redeemed\n', '    event Redeem(uint amount);\n', '\n', '    // Called when contract is deprecated\n', '    event Deprecate(address newAddress);\n', '\n', '}\n', '\n', '\n', 'contract CFXQ is TetherToken{\n', '    \n', '    event AddPlan(uint256 planNumber, uint256 time, uint256 total);\n', '    \n', '    event DeliverPlan(uint256 planNumber, uint256 amount, address investor);\n', '    \n', '    event PlanReleased(uint256 planNumber, uint256 amount, address investor);\n', '    \n', '    uint planNumber = 0;\n', '    \n', '    mapping(uint => uint) public planTime;\n', '    \n', '    mapping(uint => uint) public planAmount;\n', '     \n', '    mapping(address => mapping(uint => uint)) public plan;\n', '    \n', '    function () external payable isDeprecated{\n', '        \n', '        require(msg.value == 0);\n', '        releaseAllPlans();\n', '    }\n', '    \n', '    function addPlan(uint256 time, uint256 total) public onlyOwner isDeprecated{\n', '        planNumber++;\n', '        planTime[planNumber] = time;\n', '        planAmount[planNumber] = total;\n', '        _totalSupply = _totalSupply.add(total);\n', '        emit AddPlan(planNumber, time, total);\n', '    }\n', '    \n', '    function deliverPlan(address investor, uint256 _planNumber, uint256 amount) public onlyOwner isDeprecated{\n', '        require(amount <= planAmount[_planNumber]);\n', '        plan[investor][_planNumber] = plan[investor][_planNumber].add(amount);\n', '        planAmount[_planNumber] = planAmount[_planNumber].sub(amount);\n', '        emit DeliverPlan(_planNumber, amount, investor);\n', '    }\n', '    \n', '    function releaseAllPlans() public payable isDeprecated{\n', '        \n', '        // uint256 amount = 0;\n', '        uint256 allPlanAmount = 0;\n', '        uint256 _planNumber = planNumber;\n', '        mapping(uint => uint) _planTime = planTime;\n', '        mapping(address => mapping(uint => uint)) _plan = plan;\n', '        for(uint i = 1; i <= _planNumber; i++){\n', '            if(_planTime[i] < block.timestamp){\n', '               if(_plan[tx.origin][i] > 0){\n', '                   allPlanAmount = allPlanAmount.add(_plan[tx.origin][i]);\n', '                   emit PlanReleased(i, _plan[tx.origin][i], tx.origin);\n', '                   delete plan[tx.origin][i];\n', '               }\n', '            }\n', '        }\n', '        balances[tx.origin] = balances[tx.origin].add(allPlanAmount);\n', '        \n', '    }\n', '    \n', '    function allPlanAmount(address investor) public constant returns (uint balance){\n', '\n', '        uint256 amount = 0;\n', '        for(uint i = 1; i <= planNumber; i++){\n', '            amount += plan[investor][i];\n', '        }\n', '        return amount;\n', '    }\n', '    \n', '    function planAmount(address investor, uint256 _planNumber) public constant returns (uint balance){\n', '\n', '        return plan[investor][_planNumber];\n', '    }\n', '    \n', '    function canRelease(uint256 _planNumber) public view returns (bool){\n', '\n', '        if(planTime[_planNumber] <  block.timestamp){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    constructor(uint _initialSupply, string _name, string _symbol, uint _decimals) TetherToken(_initialSupply, _name, _symbol, _decimals) public {\n', '        \n', '    }\n', '\n', '}\n', '\n', 'contract CFXQV1 is CFXQ{\n', '    constructor(uint _initialSupply, string _name, string _symbol, uint _decimals) CFXQ(_initialSupply, _name, _symbol, _decimals) public {\n', '        \n', '    }\n', '}']