['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'interface PctPool {\n', '    function balanceOf(address) external view returns (uint256);\n', '}\n', '\n', 'contract PercentVoteProxy {\n', '    // PCT/WETH BPT token\n', '    IERC20 public constant votes = IERC20(\n', '        0xEB85B2E12320a123d447Ca0dA26B49E666b799dB\n', '    );\n', '\n', "    // Percent's pool contract\n", '    PctPool public constant pctPool = PctPool(\n', '        0x23b53026187626Ed8488e119767ACB2Fe5F8de4e\n', '    );\n', '\n', "    // Using 9 decimals as we're square rooting the votes\n", '    function decimals() external pure returns (uint8) {\n', '        return uint8(9);\n', '    }\n', '\n', '    function name() external pure returns (string memory) {\n', '        return "Percent Vote";\n', '    }\n', '\n', '    function symbol() external pure returns (string memory) {\n', '        return "PCT V";\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return sqrt(votes.totalSupply());\n', '    }\n', '\n', '    function balanceOf(address _voter) external view returns (uint256) {\n', '        return sqrt(pctPool.balanceOf(_voter));\n', '    }\n', '\n', '    function sqrt(uint256 x) public pure returns (uint256 y) {\n', '        uint256 z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '\n', '    constructor() public {}\n', '}']