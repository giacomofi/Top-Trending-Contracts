['pragma solidity ^0.6.0;\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\n', '        require(m != 0, "SafeMath: to ceil number shall not be zero");\n', '        return (a + m - 1) / m * m;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'VANILLA' token AND staking contract\n", '\n', '// Symbol      : VNLA\n', '// Name        : Vanilla Network\n', '// Total supply: 1,000,000 (1 million)\n', '// Min supply  : 100k \n', '// Decimals    : 18\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Vanilla is IERC20, Owned {\n', '    using SafeMath for uint256;\n', '   \n', '    string public symbol = "VNLA";\n', '    string public  name = "Vanilla Network";\n', '    uint256 public decimals = 18;\n', '    address airdropContract;\n', '    uint256 _totalSupply = 98447685 * 10 ** (16); // 984,476.85 \n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '   \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(address icoContract, address _airdropContract) public {\n', '        airdropContract = _airdropContract;\n', '        owner = 0xFa50b82cbf2942008A097B6289F39b1bb797C5Cd;\n', '        \n', '        balances[icoContract] =  150000 * 10 ** (18); // 150,000\n', '        emit Transfer(address(0), icoContract, 150000 * 10 ** (18));\n', '        \n', '        balances[address(owner)] =   54195664  * 10 ** (16); // 541,956.64\n', '        emit Transfer(address(0), address(owner), 54195664  * 10 ** (16));\n', '        \n', '        balances[address(airdropContract)] =   2925202086 * 10 ** (14); // 292520.2086\n', '        emit Transfer(address(0), address(airdropContract), 2925202086 * 10 ** (14));\n', '    }\n', '\n', '   \n', "    /** ERC20Interface function's implementation **/\n", '   \n', '    function totalSupply() external override view returns (uint256){\n', '       return _totalSupply;\n', '    }\n', '   \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) external override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) external override returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) external override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public override returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        \n', '        uint256 deduction = deductionsToApply(tokens);\n', '        applyDeductions(deduction);\n', '        \n', '        balances[to] = balances[to].add(tokens.sub(deduction));\n', '        emit Transfer(msg.sender, to, tokens.sub(deduction));\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) external override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '      \n', '        uint256 deduction = deductionsToApply(tokens);\n', '        applyDeductions(deduction);\n', '       \n', '        balances[to] = balances[to].add(tokens.sub(deduction));\n', '        emit Transfer(from, to, tokens.sub(tokens));\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address to, uint256 tokens, bool rewards) internal returns(bool){\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[address(this)] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[address(this)] = balances[address(this)].sub(tokens);\n', '        \n', '        uint256 deduction = 0;\n', '        \n', '        if(!rewards){\n', '            deduction = deductionsToApply(tokens);\n', '            applyDeductions(deduction);\n', '        }\n', '        \n', '        balances[to] = balances[to].add(tokens.sub(deduction));\n', '            \n', '        emit Transfer(address(this),to,tokens.sub(deduction));\n', '        \n', '        return true;\n', '    }\n', '\n', '    function deductionsToApply(uint256 tokens) private view returns(uint256){\n', '        uint256 deduction = 0;\n', '        uint256 minSupply = 100000 * 10 ** (18);\n', '        \n', '        if(_totalSupply > minSupply && msg.sender != airdropContract){\n', '        \n', '            deduction = onePercent(tokens).mul(5); // 5% transaction cost\n', '        \n', '            if(_totalSupply.sub(deduction) < minSupply)\n', '                deduction = _totalSupply.sub(minSupply);\n', '        }\n', '        \n', '        return deduction;\n', '    }\n', '    \n', '    function applyDeductions(uint256 deduction) private{\n', '        if(stakedCoins == 0){\n', '            burnTokens(deduction);\n', '        }\n', '        else{\n', '            burnTokens(deduction.div(2));\n', '            disburse(deduction.div(2));\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Burn the ``value` amount of tokens from the `account`\n', '    // ------------------------------------------------------------------------\n', '    function burnTokens(uint256 value) internal{\n', '        require(_totalSupply >= value); // burn only unsold tokens\n', '        _totalSupply = _totalSupply.sub(value);\n', '        emit Transfer(msg.sender, address(0), value);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Calculates onePercent of the uint256 amount sent\n', '    // ------------------------------------------------------------------------\n', '    function onePercent(uint256 _tokens) internal pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '    \n', '    /********************************STAKING CONTRACT**********************************/\n', '    \n', '    uint256 deployTime;\n', '    uint256 private totalDividentPoints;\n', '    uint256 private unclaimedDividendPoints;\n', '    uint256 pointMultiplier = 1000000000000000000;\n', '    uint256 public stakedCoins;\n', '    \n', '    uint256 public totalRewardsClaimed;\n', '    \n', '    bool public stakingOpen;\n', '    \n', '    struct  Account {\n', '        uint256 balance;\n', '        uint256 lastDividentPoints;\n', '        uint256 timeInvest;\n', '        uint256 lastClaimed;\n', '        uint256 rewardsClaimed;\n', '        uint256 pending;\n', '    }\n', '\n', '    mapping(address => Account) accounts;\n', '    \n', '    function openStaking() external onlyOwner{\n', '        require(!stakingOpen, "staking already open");\n', '        stakingOpen = true;\n', '    }\n', '    \n', '    function STAKE(uint256 _tokens) external returns(bool){\n', '        require(stakingOpen, "staking is close");\n', '        // gets VANILLA tokens from user to contract address\n', '        require(transfer(address(this), _tokens), "In sufficient tokens in user wallet");\n', '        \n', '        // require(_tokens >= 100 * 10 ** (18), "Minimum stake allowed is 100 EZG");\n', '        \n', '        uint256 owing = dividendsOwing(msg.sender);\n', '        \n', '        if(owing > 0) // early stakes\n', '            accounts[msg.sender].pending = owing;\n', '        \n', '        addToStake(_tokens);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function addToStake(uint256 _tokens) private{\n', '        uint256 deduction = deductionsToApply(_tokens);\n', '        \n', '        if(accounts[msg.sender].balance == 0 ) // first time staking\n', '            accounts[msg.sender].timeInvest = now;\n', '            \n', '        stakedCoins = stakedCoins.add(_tokens.sub(deduction));\n', '        accounts[msg.sender].balance = accounts[msg.sender].balance.add(_tokens.sub(deduction));\n', '        accounts[msg.sender].lastDividentPoints = totalDividentPoints;\n', '        \n', '        accounts[msg.sender].lastClaimed = now;\n', '        \n', '    }\n', '    \n', '    function stakingStartedAt(address user) external view returns(uint256){\n', '        return accounts[user].timeInvest;\n', '    }\n', '    \n', '    function pendingReward(address _user) external view returns(uint256){\n', '        uint256 owing = dividendsOwing(_user);\n', '        return owing;\n', '    }\n', '    \n', '    function dividendsOwing(address investor) internal view returns (uint256){\n', '        uint256 newDividendPoints = totalDividentPoints.sub(accounts[investor].lastDividentPoints);\n', '        return (((accounts[investor].balance).mul(newDividendPoints)).div(pointMultiplier)).add(accounts[investor].pending);\n', '    }\n', '   \n', '    function updateDividend(address investor) internal returns(uint256){\n', '        uint256 owing = dividendsOwing(investor);\n', '        if (owing > 0){\n', '            unclaimedDividendPoints = unclaimedDividendPoints.sub(owing);\n', '            accounts[investor].lastDividentPoints = totalDividentPoints;\n', '            accounts[investor].pending = 0;\n', '        }\n', '        return owing;\n', '    }\n', '   \n', '    function activeStake(address _user) external view returns (uint256){\n', '        return accounts[_user].balance;\n', '    }\n', '    \n', '    function UNSTAKE(uint256 tokens) external returns (bool){\n', '        require(accounts[msg.sender].balance > 0);\n', '        \n', '        uint256 owing = updateDividend(msg.sender);\n', '        \n', '        if(owing > 0) // unclaimed reward\n', '            accounts[msg.sender].pending = owing;\n', '        \n', '        stakedCoins = stakedCoins.sub(tokens);\n', '\n', '        require(_transfer(msg.sender, tokens, false));\n', '       \n', '        accounts[msg.sender].balance = accounts[msg.sender].balance.sub(tokens);\n', '        \n', '        return true;\n', '    }\n', '   \n', '    function disburse(uint256 amount) internal{\n', '        balances[address(this)] = balances[address(this)].add(amount);\n', '        \n', '        uint256 unnormalized = amount.mul(pointMultiplier);\n', '        totalDividentPoints = totalDividentPoints.add(unnormalized.div(stakedCoins));\n', '        unclaimedDividendPoints = unclaimedDividendPoints.add(amount);\n', '    }\n', '   \n', '    function claimReward() external returns(bool){\n', '        uint256 owing = updateDividend(msg.sender);\n', '        \n', '        require(owing > 0);\n', '\n', '        require(_transfer(msg.sender, owing, true));\n', '        \n', '        accounts[msg.sender].rewardsClaimed = accounts[msg.sender].rewardsClaimed.add(owing);\n', '       \n', '        totalRewardsClaimed = totalRewardsClaimed.add(owing);\n', '        return true;\n', '    }\n', '    \n', '    function rewardsClaimed(address _user) external view returns(uint256 rewardClaimed){\n', '        return accounts[_user].rewardsClaimed;\n', '    }\n', '    \n', '    function reinvest() external {\n', '        uint256 owing = updateDividend(msg.sender);\n', '        \n', '        require(owing > 0);\n', '        \n', '        // if there is any pending reward, people can add it to existing stake\n', '        \n', '        addToStake(owing);\n', '    }\n', '}']