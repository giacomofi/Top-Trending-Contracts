['/**\n', ' *Submitted for verification at Etherscan.io on 2020-04-12\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-01-18\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2018-08-03\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', '* Copyright CENTRE SECZ 2018\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy \n', '* of this software and associated documentation files (the "Software"), to deal \n', '* in the Software without restriction, including without limitation the rights \n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n', '* copies of the Software, and to permit persons to whom the Software is furnished to \n', '* do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all \n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n', '* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n', '* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract from https://github.com/zeppelinos/labs/blob/master/upgradeability_ownership/contracts/ownership/Ownable.sol \n', ' * branch: master commit: 3887ab77b8adafba4a26ace002f3a684c1a3388b modified to:\n', ' * 1) Add emit prefix to OwnershipTransferred event (7/13/18)\n', ' * 2) Replace constructor with constructor syntax (7/13/18)\n', ' * 3) consolidate OwnableStorage into this contract\n', ' */\n', 'contract Ownable {\n', '\n', '  // Owner of the contract\n', '  address private _owner;\n', '\n', '  /**\n', '  * @dev Event to show ownership has been transferred\n', '  * @param previousOwner representing the address of the previous owner\n', '  * @param newOwner representing the address of the new owner\n', '  */\n', '  event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '  /**\n', '  * @dev The constructor sets the original owner of the contract to the sender account.\n', '  */\n', '  constructor() public {\n', '    setOwner(msg.sender);\n', '  }\n', '\n', '  /**\n', ' * @dev Tells the address of the owner\n', ' * @return the address of the owner\n', ' */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets a new owner address\n', '   */\n', '  function setOwner(address newOwner) internal {\n', '    _owner = newOwner;\n', '  }\n', '\n', '  /**\n', '  * @dev Throws if called by any account other than the owner.\n', '  */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner(), newOwner);\n', '    setOwner(newOwner);\n', '  }\n', '}\n', '\n', '// File: contracts/Blacklistable.sol\n', '\n', '/**\n', '* Copyright CENTRE SECZ 2018\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy \n', '* of this software and associated documentation files (the "Software"), to deal \n', '* in the Software without restriction, including without limitation the rights \n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n', '* copies of the Software, and to permit persons to whom the Software is furnished to \n', '* do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all \n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n', '* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n', '* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Blacklistable Token\n', ' * @dev Allows accounts to be blacklisted by a "blacklister" role\n', '*/\n', 'contract Blacklistable is Ownable {\n', '\n', '    address public blacklister;\n', '    mapping(address => bool) internal blacklisted;\n', '\n', '    event Blacklisted(address indexed _account);\n', '    event UnBlacklisted(address indexed _account);\n', '    event BlacklisterChanged(address indexed newBlacklister);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the blacklister\n', '    */\n', '    modifier onlyBlacklister() {\n', '        require(msg.sender == blacklister);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if argument account is blacklisted\n', '     * @param _account The address to check\n', '    */\n', '    modifier notBlacklisted(address _account) {\n', '        require(blacklisted[_account] == false);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is blacklisted\n', '     * @param _account The address to check    \n', '    */\n', '    function isBlacklisted(address _account) public view returns (bool) {\n', '        return blacklisted[_account];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds account to blacklist\n', '     * @param _account The address to blacklist\n', '    */\n', '    function blacklist(address _account) public onlyBlacklister {\n', '        blacklisted[_account] = true;\n', '        emit Blacklisted(_account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes account from blacklist\n', '     * @param _account The address to remove from the blacklist\n', '    */\n', '    function unBlacklist(address _account) public onlyBlacklister {\n', '        blacklisted[_account] = false;\n', '        emit UnBlacklisted(_account);\n', '    }\n', '\n', '    function updateBlacklister(address _newBlacklister) public onlyOwner {\n', '        require(_newBlacklister != address(0));\n', '        blacklister = _newBlacklister;\n', '        emit BlacklisterChanged(blacklister);\n', '    }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', '* Copyright CENTRE SECZ 2018\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy \n', '* of this software and associated documentation files (the "Software"), to deal \n', '* in the Software without restriction, including without limitation the rights \n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n', '* copies of the Software, and to permit persons to whom the Software is furnished to \n', '* do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all \n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n', '* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n', '* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' * Based on openzeppelin tag v1.10.0 commit: feb665136c0dae9912e08397c1a21c4af3651ef3\n', ' * Modifications:\n', ' * 1) Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\n', ' * 2) Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\n', ' * 3) Removed whenPaused (6/14/2018)\n', ' * 4) Switches ownable library to use zeppelinos (7/12/18)\n', ' * 5) Remove constructor (7/13/18)\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  event PauserChanged(address indexed newAddress);\n', '\n', '\n', '  address public pauser;\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev throws if called by any account other than the pauser\n', '   */\n', '  modifier onlyPauser() {\n', '    require(msg.sender == pauser);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyPauser public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyPauser public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  /**\n', '   * @dev update the pauser role\n', '   */\n', '  function updatePauser(address _newPauser) onlyOwner public {\n', '    require(_newPauser != address(0));\n', '    pauser = _newPauser;\n', '    emit PauserChanged(pauser);\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/FiatTokenV1.sol\n', '\n', '/**\n', '* Copyright CENTRE SECZ 2018\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy \n', '* of this software and associated documentation files (the "Software"), to deal \n', '* in the Software without restriction, including without limitation the rights \n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell \n', '* copies of the Software, and to permit persons to whom the Software is furnished to \n', '* do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all \n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n', '* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN \n', '* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FiatToken\n', ' * @dev ERC20 Token backed by fiat reserves\n', ' */\n', 'contract FiatTokenV1 is Ownable, ERC20, Pausable, Blacklistable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    string public currency;\n', '    address public masterMinter;\n', '    bool internal initialized;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    uint256 internal totalSupply_ = 0;\n', '    mapping(address => bool) internal minters;\n', '    mapping(address => uint256) internal minterAllowed;\n', '\n', '    event Mint(address indexed minter, address indexed to, uint256 amount);\n', '    event Burn(address indexed burner, uint256 amount);\n', '    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\n', '    event MinterRemoved(address indexed oldMinter);\n', '    event MasterMinterChanged(address indexed newMasterMinter);\n', '\n', '    function initialize(\n', '        string _name,\n', '        string _symbol,\n', '        string _currency,\n', '        uint8 _decimals,\n', '        address _masterMinter,\n', '        address _pauser,\n', '        address _blacklister,\n', '        address _owner\n', '    ) public {\n', '        require(!initialized);\n', '        require(_masterMinter != address(0));\n', '        require(_pauser != address(0));\n', '        require(_blacklister != address(0));\n', '        require(_owner != address(0));\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        currency = _currency;\n', '        decimals = _decimals;\n', '        masterMinter = _masterMinter;\n', '        pauser = _pauser;\n', '        blacklister = _blacklister;\n', '        setOwner(_owner);\n', '        initialized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than a minter\n', '    */\n', '    modifier onlyMinters() {\n', '        require(minters[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller.\n', '     * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_amount > 0);\n', '\n', '        uint256 mintingAllowedAmount = minterAllowed[msg.sender];\n', '        require(_amount <= mintingAllowedAmount);\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount);\n', '        emit Mint(msg.sender, _to, _amount);\n', '        emit Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the masterMinter\n', '    */\n', '    modifier onlyMasterMinter() {\n', '        require(msg.sender == masterMinter);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Get minter allowance for an account\n', '     * @param minter The address of the minter\n', '    */\n', '    function minterAllowance(address minter) public view returns (uint256) {\n', '        return minterAllowed[minter];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is a minter\n', '     * @param account The address to check    \n', '    */\n', '    function isMinter(address account) public view returns (bool) {\n', '        return minters[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Get allowed amount for an account\n', '     * @param owner address The account owner\n', '     * @param spender address The account spender\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Get totalSupply of token\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Get token balance of an account\n', '     * @param account address The account\n', '    */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Adds blacklisted check to approve\n', '     * @return True if the operation was successful.\n', '    */\n', '    function approve(address _spender, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_spender) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     * @return bool success\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused notBlacklisted(_to) notBlacklisted(msg.sender) notBlacklisted(_from) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     * @return bool success\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused notBlacklisted(msg.sender) notBlacklisted(_to) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to add/update a new minter\n', '     * @param minter The address of the minter\n', '     * @param minterAllowedAmount The minting amount allowed for the minter\n', '     * @return True if the operation was successful.\n', '    */\n', '    function configureMinter(address minter, uint256 minterAllowedAmount) whenNotPaused onlyMasterMinter public returns (bool) {\n', '        minters[minter] = true;\n', '        minterAllowed[minter] = minterAllowedAmount;\n', '        emit MinterConfigured(minter, minterAllowedAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to remove a minter\n', '     * @param minter The address of the minter to remove\n', '     * @return True if the operation was successful.\n', '    */\n', '    function removeMinter(address minter) onlyMasterMinter public returns (bool) {\n', '        minters[minter] = false;\n', '        minterAllowed[minter] = 0;\n', '        emit MinterRemoved(minter);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev allows a minter to burn some of its own tokens\n', '     * Validates that caller is a minter and that sender is not blacklisted\n', "     * amount is less than or equal to the minter's account balance\n", '     * @param _amount uint256 the amount of tokens to be burned\n', '    */\n', '    function burn(uint256 _amount) whenNotPaused onlyMinters notBlacklisted(msg.sender) public {\n', '        uint256 balance = balances[msg.sender];\n', '        require(_amount > 0);\n', '        require(balance >= _amount);\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[msg.sender] = balance.sub(_amount);\n', '        emit Burn(msg.sender, _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '    }\n', '\n', '    function updateMasterMinter(address _newMasterMinter) onlyOwner public {\n', '        require(_newMasterMinter != address(0));\n', '        masterMinter = _newMasterMinter;\n', '        emit MasterMinterChanged(masterMinter);\n', '    }\n', '}']