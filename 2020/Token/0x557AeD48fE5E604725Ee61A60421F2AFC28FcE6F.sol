['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IToken {\n', '   function mint(address to, uint256 amount) external;\n', '   function totalSupply() external view returns (uint256);\n', '   function MINTER_ROLE() external view returns (bytes32);\n', '   function MINTER_ADMIN_ROLE() external view returns (bytes32);\n', '   function getRoleMemberCount(bytes32 role) external view returns (uint256);\n', '   function hasRole(bytes32 role, address account) external view returns (bool);\n', '}\n', '\n', 'contract Minter {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public TARGET_SUPPLY = 2_200_000_000 * 1e18; // 2.2B tokens\n', '    uint256 constant public DURATION = 155_520_000; // 1800 days in seconds\n', '    uint256 private s_initialSupply;\n', '    uint256 private s_startTime;\n', '    uint256 private s_minted;\n', '    address private s_beneficiary;\n', '    IToken private s_token;\n', '    bool private s_started;\n', '\n', '    event Created(address sender, address token, address beneficiary);\n', '    event Started(uint256 initialSupply, uint256 timestamp);\n', '    event Minted(uint256 amount, uint256 timestamp);\n', '\n', '    modifier onlyBeneficiary() {\n', '      require(msg.sender == s_beneficiary, "not beneficiary");\n', '      _;\n', '    }\n', '\n', '    constructor (IToken token, address beneficiary) public {\n', '        s_token = token;\n', '        s_beneficiary = beneficiary;\n', '        emit Created(msg.sender, address(token), beneficiary);\n', '    }\n', '\n', '    receive () external payable {\n', '        require(false, "Minter: not accepting ether");\n', '    }\n', '\n', '    function start() external onlyBeneficiary() {\n', '        require(s_started == false, "TokenMinter: already started");\n', '        require(s_token.getRoleMemberCount(s_token.MINTER_ADMIN_ROLE()) == 0, "TokenMinter: minter roles are not final");\n', '        minterRoleValidation();\n', '        s_started = true;\n', '        s_initialSupply = s_token.totalSupply();\n', '        s_startTime = block.timestamp;\n', '        emit Started(s_initialSupply, block.timestamp);\n', '    }\n', '    \n', '    function mint(uint256 amount) public onlyBeneficiary() {\n', '        require(s_started == true, "TokenMinter: not started");\n', '        require(amount > 0, "TokenMinter: nothing to mint");\n', '        s_minted = s_minted.add(amount);\n', '        require(s_minted <= mintLimit(), "TokenMinter: amount too high");\n', '        s_token.mint(s_beneficiary, amount);\n', '        emit Minted(amount, block.timestamp);\n', '    }\n', '\n', '    function mintAll() external {\n', '        mint(mintLimit().sub(s_minted));\n', '    }\n', '\n', '    function minterRoleValidation() public view {\n', '        require(s_token.hasRole(s_token.MINTER_ROLE(), address(this)), "TokenMinter: do not have a minter role");\n', '        require(s_token.getRoleMemberCount(s_token.MINTER_ROLE()) == 1, "TokenMinter: minter role is not exclusive");\n', '    }\n', '\n', '    function mintLimit() public view returns (uint256) {\n', '        uint256 maxMinting = TARGET_SUPPLY.sub(s_initialSupply);\n', '        uint256 currentDuration = block.timestamp.sub(s_startTime);\n', '        uint256 effectiveDuration = currentDuration < DURATION ? currentDuration : DURATION;\n', '        return maxMinting.mul(effectiveDuration).div(DURATION);\n', '    }\n', '\n', '    function left() public view returns (uint256) {\n', '        return TARGET_SUPPLY.sub(s_initialSupply).sub(s_minted);\n', '    }\n', '\n', '    function maxCap() external view returns (uint256) {\n', '        return s_token.totalSupply().add(left());\n', '    }\n', '\n', '    function initialSupply() external view returns (uint256) {\n', '        return s_initialSupply;\n', '    }\n', '\n', '    function startTime() external view returns (uint256) {\n', '        return s_startTime;\n', '    }\n', '\n', '    function endTime() external view returns (uint256) {\n', '        return s_startTime.add(DURATION);\n', '    }\n', '\n', '    function minted() external view returns (uint256) {\n', '        return s_minted;\n', '    }\n', '\n', '    function beneficiary() external view returns (address) {\n', '        return s_beneficiary;\n', '    }\n', '\n', '    function token() external view returns (address) {\n', '        return address(s_token);\n', '    }\n', '\n', '    function started() external view returns (bool) {\n', '        return s_started;\n', '    }\n', '\n', '}']