['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-04\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' */\n', 'contract ERC20 is Initializable, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is Initializable, IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function initialize(string memory name, string memory symbol, uint8 decimals) public initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// import "../openzeppelin/upgrades/contracts/Initializable.sol";\n', '\n', '// import "../openzeppelin/upgrades/contracts/Initializable.sol";\n', '\n', 'contract OwnableUpgradable is Initializable {\n', '    address payable public owner;\n', '    address payable internal newOwnerCandidate;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Permission denied");\n', '        _;\n', '    }\n', '\n', '    // ** INITIALIZERS – Constructors for Upgradable contracts **\n', '\n', '    function initialize() public initializer {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function initialize(address payable newOwner) public initializer {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function changeOwner(address payable newOwner) public onlyOwner {\n', '        newOwnerCandidate = newOwner;\n', '    }\n', '\n', '    function acceptOwner() public {\n', '        require(msg.sender == newOwnerCandidate, "Permission denied");\n', '        owner = newOwnerCandidate;\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract AdminableUpgradable is Initializable, OwnableUpgradable {\n', '    mapping(address => bool) public admins;\n', '\n', '    modifier onlyOwnerOrAdmin {\n', '        require(msg.sender == owner ||\n', '                admins[msg.sender], "Permission denied");\n', '        _;\n', '    }\n', '\n', '    // Initializer – Constructor for Upgradable contracts\n', '    function initialize() public initializer {\n', '        OwnableUpgradable.initialize();  // Initialize Parent Contract\n', '    }\n', '\n', '    function initialize(address payable newOwner) public initializer {\n', '        OwnableUpgradable.initialize(newOwner);  // Initialize Parent Contract\n', '    }\n', '\n', '    function setAdminPermission(address _admin, bool _status) public onlyOwner {\n', '        admins[_admin] = _status;\n', '    }\n', '\n', '    function setAdminPermission(address[] memory _admins, bool _status) public onlyOwner {\n', '        for (uint i = 0; i < _admins.length; i++) {\n', '            admins[_admins[i]] = _status;\n', '        }\n', '    }\n', '\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '// import "./SafeMath.sol";\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol";\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'interface IToken {\n', '    function decimals() external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function approve(address spender, uint value) external;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '    function deposit() external payable;\n', '    function mint(address, uint256) external;\n', '    function withdraw(uint amount) external;\n', '    function totalSupply() view external returns (uint256);\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IToken token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IToken token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IToken token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IToken token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IToken token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IToken token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library UniversalERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IToken;\n', '\n', '    IToken private constant ZERO_ADDRESS = IToken(0x0000000000000000000000000000000000000000);\n', '    IToken private constant ETH_ADDRESS = IToken(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    function universalTransfer(IToken token, address to, uint256 amount) internal {\n', '        universalTransfer(token, to, amount, false);\n', '    }\n', '\n', '    function universalTransfer(IToken token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            if (mayFail) {\n', '                return address(uint160(to)).send(amount);\n', '            } else {\n', '                address(uint160(to)).transfer(amount);\n', '                return true;\n', '            }\n', '        } else {\n', '            token.safeTransfer(to, amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function universalApprove(IToken token, address to, uint256 amount) internal {\n', '        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n', '            token.safeApprove(to, amount);\n', '        }\n', '    }\n', '\n', '    function universalTransferFrom(IToken token, address from, address to, uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            require(from == msg.sender && msg.value >= amount, "msg.value is zero");\n', '            if (to != address(this)) {\n', '                address(uint160(to)).transfer(amount);\n', '            }\n', '            if (msg.value > amount) {\n', '                msg.sender.transfer(uint256(msg.value).sub(amount));\n', '            }\n', '        } else {\n', '            token.safeTransferFrom(from, to, amount);\n', '        }\n', '    }\n', '\n', '    function universalBalanceOf(IToken token, address who) internal view returns (uint256) {\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            return who.balance;\n', '        } else {\n', '            return token.balanceOf(who);\n', '        }\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y, uint base) internal pure returns (uint z) {\n', '        z = add(mul(x, y), base / 2) / base;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    /*function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }*/\n', '}\n', '\n', 'contract IMasterChef {\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) external;\n', '\n', '    function userInfo(uint256 _pid, address _addr) external returns(uint amount, uint rewardDebt);\n', '}\n', '\n', 'contract SushiFarmToken is\n', '    Initializable,\n', '    DSMath,\n', '    ERC20,\n', '    ERC20Detailed,\n', '    AdminableUpgradable\n', '{\n', '    using UniversalERC20 for IToken;\n', '\n', '    address public constant MASTER_CHEF = address(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n', '    IToken public constant SUSHI = IToken(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n', '    IToken public constant USDT = IToken(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '\n', '    IToken public lpUniToken;\n', '    uint public sushiPoolNumber;\n', '\n', '    mapping(address => uint256) public sushiWithdrawal;\n', '    uint256 public totalSushiWithdrawal;\n', '    \n', '    uint256 totalBurnedSushi;\n', '    // ** INITIALIZER **\n', '\n', '    function initialize(address payable newOwner) public initializer {\n', '        // Initialize Parent Contracts\n', '        AdminableUpgradable.initialize(newOwner);\n', '        ERC20Detailed.initialize("Sushi Farm Token", "SFT", 18);\n', '\n', '        admins[0x4d3ff3D6C79a3ad20314B0cf86A32D15277AAb85] = true;\n', '    }\n', '\n', '    // ** PUBLIC functions **\n', '\n', '    // price - Token/USDT (1e6), amount – token numbers (1e18)\n', '    function buy(uint price, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) public {\n', '        // check timestamp\n', '        require(block.timestamp < deadline);\n', '\n', '        // check signature\n', '        bytes32 hash = sha256(abi.encodePacked(address(this), msg.sender, price, amount, deadline));\n', '        address src = ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)), v, r, s);\n', '        require(admins[src] == true, "Access denied");\n', '\n', '        // swap USDT to tokens\n', '        uint usdtAmount = wmul(amount, price * 1e12) / 1e12; //  usdt decimals = 6\n', '        USDT.universalTransferFrom(msg.sender, address(owner), usdtAmount);\n', '\n', '        // internal transfer to msg.sender\n', '        _transfer(address(this), msg.sender, amount);\n', '    }\n', '\n', '    function recalcTotalSushiWithdrawal(uint256 burnAmount) internal {\n', '        \n', '        if (totalBurnedSushi == 0) {\n', '            uint256 _totalSushiWithdrawal = totalSushiWithdrawal;\n', '            totalBurnedSushi = sub(500000 * 10**18, totalSupply());\n', '            totalSushiWithdrawal = sub(_totalSushiWithdrawal, _totalSushiWithdrawal * totalBurnedSushi / (500000 * 10**18));\n', '        } else {\n', '            if (burnAmount > 0) {\n', '                uint256 _totalSushiWithdrawal = totalSushiWithdrawal;\n', '                totalSushiWithdrawal = sub(_totalSushiWithdrawal, _totalSushiWithdrawal * burnAmount / totalSupply());    \n', '            }\n', '            \n', '        }        \n', '    }\n', '    \n', '    function burn(uint amount) public returns(uint256 withdrawalLpTokens, uint256 sushiAmount) {\n', '        address account = msg.sender;\n', '\n', '        recalcTotalSushiWithdrawal(amount);\n', '        \n', '        uint ratio = wdiv(amount, totalSupply());\n', '        uint pid = sushiPoolNumber;\n', '\n', '        // burn tokens\n', '        _burn(account, amount);\n', '\n', '        // withdraw lp tokens\n', '        (uint totalAmountLpTokens,) = IMasterChef(MASTER_CHEF).userInfo(pid, address(this));\n', '        withdrawalLpTokens = wmul(totalAmountLpTokens, ratio);\n', '        IMasterChef(MASTER_CHEF).withdraw(pid, withdrawalLpTokens);\n', '\n', '        // transfer lpTokens to burner\n', '        lpUniToken.transfer(account, withdrawalLpTokens);\n', '\n', '        // transfer Sushi to burner and owner\n', '        uint256 _sushiBalance = SUSHI.balanceOf(address(this));\n', '        _sendSushi(account, account, ratio);\n', '        sushiAmount = _sushiBalance - SUSHI.balanceOf(address(this));\n', '        _sendSushi(address(this), owner, wdiv(balanceOf(address(this)), totalSupply()));\n', '    }\n', '\n', '    function withdrawSushi() public returns(uint256 sushiAmount) {\n', '        address account = msg.sender;\n', '\n', '        uint ratio = wdiv(balanceOf(account), totalSupply());\n', '        uint pid = sushiPoolNumber;\n', '\n', '        // withdraw sushi from MASTER_CHEF\n', '        IMasterChef(MASTER_CHEF).deposit(pid, 0);\n', '\n', '        // transfer Sushi to user and owner\n', '        uint256 _sushiBalance = SUSHI.balanceOf(address(this));\n', '        _sendSushi(account, account, ratio);\n', '        sushiAmount = _sushiBalance - SUSHI.balanceOf(address(this));\n', '        _sendSushi(address(this), owner, wdiv(balanceOf(address(this)), totalSupply()));\n', '        \n', '    }\n', '\n', '    // ** OVERRIDDEN ERC20 functions **\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        require(false, "transfer not available");\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        require(false, "approve not available");\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        require(false, "transferFrom not available");\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(false, "increaseAllowance not available");\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(false, "decreaseAllowance not available");\n', '    }\n', '\n', '    // ** ONLY_OWNER functions **\n', '\n', '    function create(uint _mintAmount, address _lpToken, uint _lpTokenAmount, uint _pool) public onlyOwner {\n', '        // only once\n', '        require(totalSupply() == 0, "Token has already been created");\n', '\n', '        // transfer lpToken to MASTER_CHEF\n', '        IToken(_lpToken).transferFrom(msg.sender, address(this), _lpTokenAmount);\n', '        IToken(_lpToken).approve(MASTER_CHEF, _lpTokenAmount);\n', '        IMasterChef(MASTER_CHEF).deposit(_pool, _lpTokenAmount);\n', '\n', '        // mint tokens to this address\n', '        _mint(address(this), _mintAmount);\n', '\n', '        sushiPoolNumber = _pool;\n', '        lpUniToken = IToken(_lpToken);\n', '    }\n', '\n', '    function withdrawContractTokens(uint amount) public onlyOwner {\n', '        if (amount == uint(-1)) {\n', '            amount = this.balanceOf(address(this));\n', '        }\n', '\n', '        // internal transfer to owner\n', '        _transfer(address(this), address(owner), amount);\n', '    }\n', '\n', '    function burnContractTokens(uint amount) public onlyOwner {\n', '        if (amount == uint(-1)) {\n', '            amount = this.balanceOf(address(this));\n', '        }\n', '        \n', '        recalcTotalSushiWithdrawal(amount);\n', '\n', '        address curOwner = address(owner);\n', '        uint ratio = wdiv(amount, totalSupply());\n', '        uint pid = sushiPoolNumber;\n', '\n', '        // burn tokens\n', '        _burn(address(this), amount);\n', '\n', '        // withdraw lp tokens\n', '        (uint totalAmountLpTokens,) = IMasterChef(MASTER_CHEF).userInfo(pid, address(this));\n', '        uint withdrawalLpTokens = wmul(totalAmountLpTokens, ratio);\n', '        IMasterChef(MASTER_CHEF).withdraw(pid, withdrawalLpTokens);\n', '\n', '        // transfer lpTokens to burner\n', '        lpUniToken.transfer(curOwner, withdrawalLpTokens);\n', '\n', '        // update ratio - add balance of this contract\n', '        ratio = ratio.add(wdiv(balanceOf(address(this)), totalSupply()));\n', '\n', '        // transfer Sushi to owner\n', '        _sendSushi(address(this), curOwner, ratio);\n', '    }\n', '\n', '    function withdrawContractSushi() public onlyOwner {\n', '        uint pid = sushiPoolNumber;\n', '\n', '        recalcTotalSushiWithdrawal(0);\n', '        \n', '        // withdraw sushi from MASTER_CHEF\n', '        IMasterChef(MASTER_CHEF).deposit(pid, 0);\n', '\n', '        // transfer Sushi to owner\n', '        _sendSushi(address(this), owner, wdiv(balanceOf(address(this)), totalSupply()));\n', '    }\n', '\n', '    function setLpToken(address _lpToken) public onlyOwner {\n', '        lpUniToken = IToken(_lpToken);\n', '    }\n', '\n', '    function externalCallEth(address payable[] memory  _to, bytes[] memory _data, uint256[] memory _ethAmount) public payable onlyOwner {\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            _cast(_to[i], _data[i], _ethAmount[i]);\n', '        }\n', '    }\n', '\n', '    // ** INTERNAL functions **\n', '\n', '    \n', '    function _sendSushi(address account, address to, uint ratio) internal {\n', '        // calculate SUSHI tokens\n', '        \n', '        recalcTotalSushiWithdrawal(0);\n', '        \n', '        uint withdrawalSushi = wmul(SUSHI.balanceOf(address(this)).add(totalSushiWithdrawal), ratio);\n', '        uint _sushiWithdrawalForAccount = sushiWithdrawal[account];\n', '        if (withdrawalSushi > _sushiWithdrawalForAccount) {\n', '            withdrawalSushi = withdrawalSushi - _sushiWithdrawalForAccount;\n', '        } else {\n', '            return;\n', '        }\n', '\n', '        // UPD Sushi states\n', '        sushiWithdrawal[account] = sushiWithdrawal[account].add(withdrawalSushi);\n', '        totalSushiWithdrawal = totalSushiWithdrawal.add(withdrawalSushi);\n', '\n', '        // transfer SUSHI to address\n', '        SUSHI.transfer(to, withdrawalSushi);\n', '    }\n', '\n', '    function _cast(address payable _to, bytes memory _data, uint256 _ethAmount) internal {\n', '        bytes32 response;\n', '\n', '        assembly {\n', '            let succeeded := call(sub(gas, 5000), _to, _ethAmount, add(_data, 0x20), mload(_data), 0, 32)\n', '            response := mload(0)\n', '            switch iszero(succeeded)\n', '            case 1 {\n', '                revert(0, 0)\n', '            }\n', '        }\n', '    }\n', '}']