['// SPDX-License-Identifier: MIT\n', 'pragma solidity >= 0.6.0 < 0.8.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '}\n', '\n', 'contract ERC20Imp is IERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) private _balances;\n', '\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '    \n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    uint private _totalSupply;\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    constructor(uint256 totalSupplyValue) {\n', '        _totalSupply = totalSupplyValue;\n', '        _balances[msg.sender] = totalSupplyValue;\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint amount) public override virtual returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(amount > 0);\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(_balances[sender] >= amount);\n', '        require(_balances[recipient].add(amount) >= _balances[recipient]);\n', '        \n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint amount) public override virtual returns (bool) {\n', '        require(_allowances[sender][recipient] >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public override virtual view returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint amount) public override virtual returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    \n', '    function _mint(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        // emit Transfer(address(0), account, amount);\n', '    }\n', '    \n', '    function _burn(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        // emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        require(_balances[owner] >= amount, "ERC20: Approve amount exceeds balance");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) external; \n', '}\n', '\n', '/**\n', ' * @dev Implement of the ERC20 standard Interface.\n', ' * Use for make exchange with USD Coins.\n', ' * Finally use for mint.\n', ' */\n', 'contract TokenLP is ERC20Imp {\n', '    using SafeMath for uint;\n', ' \n', '    // --- ERC20 Data ---\n', '    string public name = "BBB";\n', '    string public symbol = "BBB";\n', '    string public version  = "1";\n', '    uint8 public decimals = 18;\n', '    address public owner;\n', '    \n', '    mapping (address => bool) public availableTokenMapping; \n', '    mapping (address => mapping(address=>uint256))  depositRecords;\n', '    mapping (address => bool) public frozenAccountMapping;\n', '    \n', '    event DepositToken(address indexed _from, address indexed _to, uint256 indexed _value);\n', '    event WithdrawToken(address indexed _from, address _contractAddress, uint256 indexed _value);\n', '    event FrozenAccount(address target, bool frozen);\n', '    event TransferGovernance(address _contractAddress, uint256 indexed _value);\n', '\n', '    constructor(string memory _name, string memory _symbol, string memory _version, uint8 _decimals, uint256 _totalSupply) ERC20Imp(_totalSupply) {\n', '        owner = msg.sender;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        version = _version;\n', '        decimals = _decimals;\n', '    }\n', '    \n', '    /**\n', '     * @dev Tools for check owner of contract.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modify owner of contract.\n', '     */\n', '    function transferOwnerShip(address newOwer) public onlyOwner {\n', '        owner = newOwer;\n', '    }\n', '    \n', '    /**\n', '     * @dev Use for updating contract.\n', '     * Change name, symbol, version, decimals.\n', '     */\n', '    function changeContractInfo(string memory _name, string memory _symbol, string memory _version, uint8 _decimals) public onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        version = _version;\n', '        decimals = _decimals;\n', '    }\n', '    \n', '    /**\n', '     * @dev Use for add available token for Exchange.\n', '     */\n', '    function enableToken(address _tokenAddress) public onlyOwner {\n', '        availableTokenMapping[_tokenAddress] = true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Use for remove available token for Exchange.\n', '     */\n', '    function disableToken(address _tokenAddress) public onlyOwner {\n', '        availableTokenMapping[_tokenAddress] = false;\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address _to, uint256 _amount)  public virtual override returns (bool success) {\n', '        require(frozenAccountMapping[msg.sender] != true, "Address is disabled");\n', '        super.transfer(_to, _amount);\n', '\n', '        // Send Event.\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public virtual override returns (bool success) {\n', '        require(frozenAccountMapping[msg.sender] != true, "Address is disabled");\n', '        super.transferFrom(_from, _to, _value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOfToken(address _account, address _contractAddress) public view returns (uint) {\n', '        return depositRecords[_account][_contractAddress];\n', '    }\n', '    \n', '    /**\n', '     * @dev Exchange token with USDT/USDC/TUSD/DAI etc.\n', '     */\n', '    function depositToken(IERC20 _contractToken, uint256 _value, address _contractAddress) public returns (bool sucess) {\n', '        require(_value > 0);\n', '        require(frozenAccountMapping[msg.sender] != true, "Address is disabled");\n', '        require(availableTokenMapping[_contractAddress] == true, "Inavailable Token");\n', '        bool result = _contractToken.transferFrom(msg.sender, address(this), _value);\n', '        // _e.callcode(bytes4(keccak256("setN(uint256)")), _n);\n', '        if(result) {\n', '            depositRecords[msg.sender][_contractAddress] += _value;\n', '            _mint(msg.sender, _value);\n', '            \n', '            emit DepositToken(msg.sender, address(this), _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw token to USDT/USDC/TUSD/DAI etc.\n', '     */\n', '    function withdrawToken(IERC20 _contractToken, uint256 _value, address _contractAddress) public returns (bool sucess) {\n', '        require(_value > 0);\n', '        require(depositRecords[msg.sender][_contractAddress] >= _value);\n', '        require(balanceOf(msg.sender) >= _value);\n', '        require(frozenAccountMapping[msg.sender] != true, "Address is disabled");\n', '        require(availableTokenMapping[_contractAddress] == true, "Inavailable Token");\n', '        \n', '        bool result = _contractToken.transfer(msg.sender, _value);\n', '        if(result) {\n', '            depositRecords[msg.sender][_contractAddress] -= _value;\n', '            _burn(msg.sender, _value);\n', '            \n', '            emit WithdrawToken(msg.sender, _contractAddress, _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Use for transfer liquidity.\n', '     */\n', '    function transferGovernance(IERC20 _contractToken, uint256 _value, address _contractAddress) public onlyOwner returns (bool sucess) {\n', '        require(_value > 0);\n', '        bool result = _contractToken.approve(_contractAddress, _value);\n', '        if(result) {\n', '            emit TransferGovernance(_contractAddress, _value);\n', '            return true;\n', '        } else return false;\n', '    }\n', '    \n', '    /**\n', '     * @dev Freeze specific account.\n', '     */\n', '    function freezeAccount(address target, bool freeze) public onlyOwner {\n', '        require(target != owner);\n', '        frozenAccountMapping[target] = freeze;\n', '        emit FrozenAccount(target, freeze);\n', '    }\n', '    \n', '}']