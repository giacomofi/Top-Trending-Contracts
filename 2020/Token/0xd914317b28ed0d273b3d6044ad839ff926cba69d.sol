['// SPDX-License-Identifier: MIT\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-20\n', '*/\n', '\n', 'pragma solidity >= 0.6.0 < 0.8.0;\n', '\n', 'interface ERC20 {\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function allowance(address _owner, address _spender) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract AWorldLP is ERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    address private deployer;\n', '    string public name = "AWorld LP";\n', '    string public symbol = "AWLP";\n', '    uint8 public constant decimals = 4;\n', '    uint256 public constant decimalFactor = 10 ** uint256(decimals);\n', '    uint256 public totalSupply = 2000000 * decimalFactor;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => mapping(address=>uint256))  depositRecords;\n', '    mapping (address => bool) public availableTokenMapping; \n', '    mapping (address => bool) public frozenAccountMapping;\n', '    \n', '    event DepositToken(address indexed _from, address indexed _to, uint256 indexed _value);\n', '    event WithdrawToken(address indexed _from, address _contractAddress, uint256 indexed _value);\n', '    \n', '    constructor() {\n', '        balances[msg.sender] = totalSupply;\n', '        deployer = msg.sender;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function balanceOf(address _owner) public override view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public override view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public override returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public override returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == deployer);\n', '        _;\n', '    }\n', '    \n', '    function balanceOfToken(address _account, address _contractAddress) public view returns (uint) {\n', '        return depositRecords[_account][_contractAddress];\n', '    }\n', '    \n', '    function enableToken(address _tokenAddress) public onlyOwner {\n', '        availableTokenMapping[_tokenAddress] = true;\n', '    }\n', '    \n', '    function disableToken(address _tokenAddress) public onlyOwner {\n', '        availableTokenMapping[_tokenAddress] = false;\n', '    }\n', '    \n', '    function transferOwnerShip(address _newOwer) public onlyOwner {\n', '        deployer = _newOwer;\n', '    }\n', '    \n', '    function depositToken(address contractAddress, uint256 _value) public returns (bool sucess) {\n', '        require(availableTokenMapping[contractAddress] == true, "Token NOT allow");\n', '        \n', '        (bool success, ) = contractAddress.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", msg.sender, address(this), _value));\n', '        if(success) {\n', '            depositRecords[msg.sender][contractAddress] = depositRecords[msg.sender][contractAddress].add(_value);\n', '            totalSupply = totalSupply.add(_value);\n', '            balances[msg.sender] = balances[msg.sender].add(_value);\n', '            emit DepositToken(msg.sender, address(this), _value);\n', '        }\n', '        return success;\n', '    }\n', '    \n', '    function withdrawToken(address contractAddress, uint256 _value) public returns (bool sucess) {\n', '        require(balances[msg.sender] >= _value && depositRecords[msg.sender][contractAddress] >= _value);\n', '        require(frozenAccountMapping[msg.sender] != true, "Address is disabled");\n', '        \n', '        (bool success, ) = contractAddress.call(abi.encodeWithSignature("transfer(address,uint256)", msg.sender, _value));\n', '        if(success) {\n', '            depositRecords[msg.sender][contractAddress] -= _value;\n', '            totalSupply = totalSupply.sub(_value);\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            emit WithdrawToken(msg.sender, contractAddress, _value);\n', '        }\n', '        return success;\n', '    }\n', '    \n', '    function transferGovernance(address oldContractAddress, address newContractAddress,uint256 _value) public onlyOwner returns (bool sucess) {\n', '        (bool success, ) = oldContractAddress.call(abi.encodeWithSignature("approve(address,uint256)", newContractAddress, _value));\n', '        return success;\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) public onlyOwner returns (bool sucess) {\n', '        require(target != deployer);\n', '        frozenAccountMapping[target] = freeze;\n', '        return true;\n', '    }\n', '}']