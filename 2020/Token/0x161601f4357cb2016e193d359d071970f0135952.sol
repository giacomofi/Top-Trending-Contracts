['// File: localhost/contracts/interfaces/IMiniMeToken.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'interface IMiniMeToken {\n', '    function decimals() external view returns(uint8);\n', '    function balanceOf(address _account) external view returns(uint256);\n', '    function balanceOfAt(address _account, uint256 _block) external view returns(uint256);\n', '    function totalSupply() external view returns(uint256);\n', '    function totalSupplyAt(uint256 _block) external view returns(uint256);\n', '}\n', '// File: @aragon/os/contracts/lib/math/SafeMath.sol\n', '\n', '// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\n', '// Adapted to use pragma ^0.4.24 and satisfy our linter rules\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    string private constant ERROR_ADD_OVERFLOW = "MATH_ADD_OVERFLOW";\n', '    string private constant ERROR_SUB_UNDERFLOW = "MATH_SUB_UNDERFLOW";\n', '    string private constant ERROR_MUL_OVERFLOW = "MATH_MUL_OVERFLOW";\n', '    string private constant ERROR_DIV_ZERO = "MATH_DIV_ZERO";\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b, ERROR_MUL_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a, ERROR_SUB_UNDERFLOW);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a, ERROR_ADD_OVERFLOW);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, ERROR_DIV_ZERO);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: localhost/contracts/Crust.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '// ❤️ Thanks Rohini for coming up with the name\n', 'contract Crust is IMiniMeToken {\n', '    using SafeMath for uint256;\n', '    IMiniMeToken[] public crumbs;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    constructor(address[] memory _crumbs, string _name, string _symbol, uint8 _decimals) public {\n', '        require(_crumbs.length > 0, "Crust.constructor: Crust must at least have one crumb");\n', '        for(uint256 i = 0; i < _crumbs.length; i ++) {\n', '            crumbs.push(IMiniMeToken(_crumbs[i]));\n', '            require(crumbs[i].decimals() == _decimals, "Crumbs must have same number of decimals as crust");\n', '        }\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    /**\n', '    * @notice Tells the balance of `_account`.\n', '    * @param _account Address of the account.\n', '    * @return The balance of the account.\n', '    */\n', '    function balanceOf(address _account) external view returns(uint256) {\n', '        return this.balanceOfAt(_account, block.number);\n', '    }\n', '\n', '    /**\n', '    * @notice Tells the balance of `_account` at block `_block`.\n', '    * @param _account Address of the account.\n', '    * @param _block Block number.\n', '    * @return The balance of the account.\n', '    */\n', '    function balanceOfAt(address _account, uint256 _block) external view returns(uint256) {\n', '        uint256 result = 0;\n', '        for(uint256 i = 0; i < crumbs.length; i++) {\n', '            result = result.add(crumbs[i].balanceOfAt(_account, _block));\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @notice Tells the total supply of this token.\n', '    * @return The total supply.\n', '    */\n', '    function totalSupply() external view returns(uint256) {\n', '        return this.totalSupplyAt(block.number);\n', '    }\n', '\n', '    /**\n', '    * @notice Tells the total supply of this token at block `_block`.\n', '    * @return The total supply.\n', '    */\n', '    function totalSupplyAt(uint256 _block) external view returns(uint256) {\n', '        uint256 result = 0;\n', '        for(uint256 i = 0; i < crumbs.length; i++) {\n', '            result = result.add(crumbs[i].totalSupplyAt(_block));\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @notice Gets the amount of decimals.\n', '    * @dev Necesary because otherwise typechain does not generate working artifacts\n', '    */\n', '    function decimals() external view returns(uint8) {\n', '        return decimals;\n', '    }\n', '}']