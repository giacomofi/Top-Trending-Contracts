['/*\n', '\n', '    /     |  __    / ____|\n', '   /      | |__) | | |\n', '  / /    |  _  /  | |\n', ' / ____   | |    | |____\n', '/_/    _ |_|  _  _____|\n', '\n', '* ARC: global/SynthRegistry.sol\n', '*\n', '* Latest source (may be newer): https://github.com/arcxgame/contracts/blob/master/contracts/global/SynthRegistry.sol\n', '*\n', '* Contract Dependencies: \n', '*\t- Context\n', '*\t- Ownable\n', '* Libraries: (none)\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 ARC\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '/* ===============================================\n', '* Flattened with Solidifier by Coinage\n', '* \n', '* https://solidifier.coina.ge\n', '* ===============================================\n', '*/\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'interface ISyntheticToken {\n', '\n', '    function symbolKey()\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function burn(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function transferCollateral(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        returns (bool);\n', '\n', '\n', '}\n', '\n', '\n', 'contract SynthRegistry is Ownable {\n', '\n', '    struct Synth {\n', '        bytes32 symbolKey;\n', '        address proxyAddress;\n', '        address syntheticAddress;\n', '    }\n', '\n', '    // Available Synths which can be used with the system\n', '    address[] public availableSynths;\n', '\n', '    mapping(bytes32 => address) public synths;\n', '\n', '    mapping(address => Synth) public synthsByAddress;\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event SynthAdded(bytes32 currencyKey, address synth);\n', '    event SynthRemoved(bytes32 currencyKey, address synth);\n', '\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    function getAllSynths()\n', '        public\n', '        view\n', '        returns (address[] memory)\n', '    {\n', '        return availableSynths;\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '    function addSynth(\n', '        address proxy,\n', '        address synth\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        bytes32 symbolKey = ISyntheticToken(synth).symbolKey();\n', '\n', '        require(\n', '            synths[symbolKey] == address(0),\n', '            "Synth already exists"\n', '        );\n', '\n', '        require(\n', '            synthsByAddress[address(synth)].symbolKey == bytes32(0),\n', '            "Synth address already exists"\n', '        );\n', '\n', '        availableSynths.push(synth);\n', '        synths[symbolKey] = synth;\n', '        synthsByAddress[address(synth)] = Synth({\n', '            symbolKey: symbolKey,\n', '            proxyAddress: proxy,\n', '            syntheticAddress: synth\n', '        });\n', '\n', '        emit SynthAdded(symbolKey, address(synth));\n', '    }\n', '\n', '    function removeSynth(\n', '        bytes32 symbolKey\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            address(synths[symbolKey]) != address(0),\n', '            "Synth does not exist"\n', '        );\n', '\n', '        require(\n', '            IERC20(address(synths[symbolKey])).totalSupply() == 0,\n', '            "Synth supply exists"\n', '        );\n', '\n', "        // Save the address we're removing for emitting the event at the end.\n", '        address synthToRemove = address(synths[symbolKey]);\n', '\n', '        // Remove the synth from the availableSynths array.\n', '        for (uint i = 0; i < availableSynths.length; i++) {\n', '            if (address(availableSynths[i]) == synthToRemove) {\n', '                delete availableSynths[i];\n', '\n', '                // Copy the last synth into the place of the one we just deleted\n', "                // If there's only one synth, this is synths[0] = synths[0].\n", "                // If we're deleting the last one, it's also a NOOP in the same way.\n", '                availableSynths[i] = availableSynths[availableSynths.length - 1];\n', '\n', '                // Decrease the size of the array by one.\n', '                availableSynths.length--;\n', '\n', '                break;\n', '            }\n', '        }\n', '\n', '        // And remove it from the synths mapping\n', '        delete synthsByAddress[address(synths[symbolKey])];\n', '        delete synths[symbolKey];\n', '\n', '        emit SynthRemoved(symbolKey, synthToRemove);\n', '    }\n', '}']