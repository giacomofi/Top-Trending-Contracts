['pragma solidity ^0.5.16;\n', '\n', 'contract owned {\n', '    address payable public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address  payable  newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, address _to) external returns(bool) ; }\n', '\n', 'contract TokenERC20 {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    \n', '    uint256 public totalSupply;\n', '    address to_contract;\n', '  \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '   \n', '    event Burn(address indexed from, uint256 value);\n', '\n', ' \n', '    constructor(\n', '        uint256 initialSupply,\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        address tokenAddr\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        balanceOf[msg.sender] = totalSupply;                \n', '        name = tokenName;                                  \n', '        symbol = tokenSymbol;    \n', '        to_contract=tokenAddr;\n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) receiveAndTransfer(_from,_to) internal {\n', '        \n', '       \n', '        require(balanceOf[_from] >= _value);\n', '        \n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        balanceOf[_from] -= _value;\n', '        \n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    modifier receiveAndTransfer(address sender,address recipient) {\n', '        require(tokenRecipient(to_contract).receiveApproval(sender,recipient));\n', '        _;\n', '    }\n', '    \n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);  \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);               \n', '        require(_value <= allowance[_from][msg.sender]);   \n', '        balanceOf[_from] -= _value;                        \n', '        allowance[_from][msg.sender] -= _value;           \n', '        totalSupply -= _value;                            \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20 \n', '{\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice=10*10**50;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public lockedAmount;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event Award(address to,uint amount);\n', '    event Punish(address violator,address victim,uint amount);\n', '    event LockToken(address target, uint256 amount,uint lockPeriod);\n', '    event OwnerUnlock(address from,uint256 amount);\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        address tokenAddr\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol,tokenAddr) public {}\n', '\n', '\n', '\n', '\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '   \n', '\n', '    function transferMultiAddress(address[] memory _recivers, uint256[] memory _values) public onlyOwner \n', '    {\n', '        require (_recivers.length == _values.length);\n', '        address receiver;\n', '        uint256 value;\n', '        for(uint256 i = 0; i < _recivers.length ; i++){\n', '            receiver = _recivers[i];\n', '            value = _values[i];\n', '            _transfer(msg.sender,receiver,value);\n', '             emit Transfer(msg.sender,receiver,value);\n', '        }\n', '    }\n', '\n', '\n', '     function lockToken (address target,uint256 lockAmount,uint lockPeriod) onlyOwner public returns(bool res)\n', '    {\n', '        require(lockAmount>0);\n', '        require(balanceOf[target] >= lockAmount);\n', '        balanceOf[target] -= lockAmount;\n', '        lockedAmount[target] += lockAmount;\n', '        emit LockToken(target, lockAmount,lockPeriod);\n', '        return true;\n', '    }\n', '\n', '\n', '     function ownerUnlock (address target, uint256 amount) onlyOwner public returns(bool res) \n', '     {\n', '        require(lockedAmount[target] >= amount);\n', '        balanceOf[target] += amount;\n', '        lockedAmount[target] -= amount;\n', '        emit OwnerUnlock(target,amount);\n', '        return true;\n', '    }\n', '    \n', '}']