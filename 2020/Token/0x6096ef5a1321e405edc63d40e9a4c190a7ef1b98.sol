['pragma solidity 0.7.1;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'abstract contract ERC20Basic {\n', '    function totalSupply() external virtual returns (uint);\n', '    function balanceOf(address who) public virtual view returns (uint);\n', '    function transfer(address to, uint value) public virtual;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'abstract contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view virtual returns (uint);\n', '    function transferFrom(address from, address to, uint value) public virtual;\n', '    function approve(address spender, uint value) public virtual;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'abstract contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    function balanceOf(address _owner) public override virtual view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'abstract contract StandardToken is BasicToken, ERC20 {\n', '    using SafeMath for uint;\n', '    \n', '    enum ETransferType{\n', '        transferTo,\n', '        transferFrom,\n', '        transferToTeam\n', '    }\n', '    \n', '    mapping (address => mapping (address => uint)) allowed;\n', '    \n', '    address internal devAddress = 0xBBa154c29688A7422348f68474443b5665d6d92F;\n', '    address internal marketingAddress = 0xFDb4a96229104d7A2F82D520EfD4CffCF6BBe663;\n', '    address internal adviserAddress = 0x544A4d166a1335F50a836F17F01f18Bf2011a440;\n', '    \n', '    address internal privateSaleAddress = 0xaE1F789fAEAAe491327BC84EA5435EdE0d895F67;\n', '    address internal publicSaleAddress = 0x6700e2CF974Bd32014f4C6F1fa35E0DcFDdE7f91;\n', '    address internal communityAddress = 0xBc6F3E510Ca895828c777d1631891D2a8957F36D;\n', '    \n', '    //Specify time that team addresses can transfer token\n', '    uint256 internal teamAddressCanTransferTimestamp = 1609459200;  //01-01-2021\n', '    \n', '    function transfer(address _to, uint _value) public override virtual onlyPayloadSize(2 * 32) {\n', '        _transfer(msg.sender,_to,_value, ETransferType.transferTo);\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) public virtual override onlyPayloadSize(3 * 32) {\n', '        validateNotTransferToTeamAddress(recipient);\n', '        validateTeamCanOnlyTransferAfterConfiguredTime(sender);\n', '        \n', '         require(balances[sender] >= amount && amount > 0, "Not enough balance");\n', '         require(allowance(sender, _msgSender()) >= amount,"Allowance is not enough");\n', '         \n', '        balances[sender] = balances[sender].sub(amount);\n', '        balances[recipient] = balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount, ETransferType transferType) internal {\n', '        require(balances[sender] >= amount);\n', '        \n', '        if(transferType != ETransferType.transferToTeam){\n', '            validateNotTransferToTeamAddress(recipient);\n', '            validateTeamCanOnlyTransferAfterConfiguredTime(sender);\n', '        }\n', '        \n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        balances[sender] = balances[sender].sub(amount);\n', '        balances[recipient] = balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public virtual override onlyPayloadSize(2 * 32) {\n', '        require(_value >= 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public virtual view override returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function _msgSender() internal view returns(address){\n', '        return msg.sender;\n', '    }\n', '    \n', '    function validateNotTransferToTeamAddress(address recipient) internal view{\n', '        require(recipient!= devAddress,"Can not transfer to dev address");\n', '        require(recipient!= marketingAddress,"Can not transfer to marketing address");\n', '        require(recipient!= adviserAddress,"Can not transfer to adviser address");\n', '        require(recipient!= privateSaleAddress,"Can not transfer to private sale address");\n', '        require(recipient!= publicSaleAddress,"Can not transfer to public sale address");\n', '        require(recipient!= communityAddress,"Can not transfer to community address");\n', '    }\n', '    \n', '    function validateTeamCanOnlyTransferAfterConfiguredTime(address sender) internal view{\n', '        if(sender == devAddress || sender == marketingAddress || sender == adviserAddress){\n', '            require (_now() >= teamAddressCanTransferTimestamp,"The team addresses is allowed to transfer after 01-01-2021");\n', '        }\n', '    }\n', '    \n', '    function _now() internal view returns(uint256){\n', '        return block.timestamp;\n', '    }\n', '}\n', '\n', 'contract PFIToken is StandardToken {\n', '    modifier onlyOwner{\n', '        require(_msgSender() == owner, "Fobidden");\n', '        _;\n', '    }\n', '    \n', '    \n', '    using SafeMath for uint;\n', '    \n', "    string public name = 'plain.finance';\n", "    string public symbol = 'PFI';\n", '    uint public decimals = 18;\n', '    uint256 public override totalSupply = 21500000000000000000000;\n', '    address public owner;\n', '\n', '    constructor () {\n', '        balances[_msgSender()] = totalSupply;\n', '        owner = _msgSender();\n', '        \n', '        _transferToTeam(devAddress, totalSupply.mul(87).div(1000)); //8.7%\n', '        _transferToTeam(marketingAddress, totalSupply.mul(8).div(100)); //8%\n', '        _transferToTeam(adviserAddress, totalSupply.mul(5).div(100)); //5%\n', '        _transferToTeam(privateSaleAddress, totalSupply.div(10)); //10%\n', '        _transferToTeam(publicSaleAddress, totalSupply.mul(3).div(10)); //30%\n', '        _transferToTeam(communityAddress, totalSupply.mul(383).div(1000)); //38.3%\n', '    }\n', '    \n', '    function mint(address account, uint256 amount) public onlyOwner {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[account] = balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    \n', '    function burn(address account, uint256 amount) public onlyOwner  {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        balances[account] = balances[account].sub(amount);\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    function _transferToTeam(address recipient, uint256 amount) internal {\n', '        _transfer(_msgSender(),recipient,amount, ETransferType.transferToTeam);\n', '    }\n', '\n', '    event Issue(uint amount);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT']