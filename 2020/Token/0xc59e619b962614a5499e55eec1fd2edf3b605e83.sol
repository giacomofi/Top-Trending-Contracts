['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' * From https://github.com/OpenZeppelin/openzeppelin-contracts\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ILendToAaveMigrator {\n', '  function migrationStarted() external view returns (bool);\n', '\n', '  function LEND() external view returns (IERC20);\n', '\n', '  function AAVE() external view returns (IERC20);\n', '\n', '  function migrateFromLEND(uint256 amount) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title SwapToAaveAndReturnHelper\n', ' * @notice Swaps LEND to AAVE and sends the AAVE balance to the configured `RECEIVER`\n', ' * @author Aave\n', ' **/\n', 'contract SwapToAaveAndReturnHelper {\n', '  address public immutable RECEIVER;\n', '  ILendToAaveMigrator public immutable MIGRATOR;\n', '\n', '  constructor(ILendToAaveMigrator migrator, address receiver) public {\n', '    RECEIVER = receiver;\n', '    MIGRATOR = migrator;\n', '  }\n', '\n', '  /**\n', '   * @dev Swap the whole LEND balance of this contract, migrates to AAVE and sends to `RECEIVER`\n', '   **/\n', '  function swapAndReturn() public {\n', '    IERC20 lend = MIGRATOR.LEND();\n', '    IERC20 aave = MIGRATOR.AAVE();\n', '    uint256 lendBalance = lend.balanceOf(address(this));\n', '\n', '    lend.approve(address(MIGRATOR), lendBalance);\n', '    MIGRATOR.migrateFromLEND(lendBalance);\n', '    aave.transfer(RECEIVER, aave.balanceOf(address(this)));\n', '  }\n', '\n', '  /**\n', '   * @dev Rescue any token sent to this contract, only callable by `RECEIVER`\n', '   **/\n', '  function rescueToken(IERC20 token) public {\n', "    require(msg.sender == RECEIVER, 'ONLY_BY_RECEIVER');\n", '\n', '    token.transfer(RECEIVER, token.balanceOf(address(this)));\n', '  }\n', '}']