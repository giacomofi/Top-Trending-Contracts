['pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function burn(uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20Basic is IERC20 {\n', '    string public constant name = "NoCovid";\n', '    string public constant symbol = "NCVT";\n', '    uint8 public constant decimals = 18;\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    uint256 _totalSupply;\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    constructor(uint256 total) public {\n', '      _totalSupply = total;\n', '      balances[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    function totalSupply() public override view returns (uint256) {\n', '      return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '      return balances[tokenOwner];\n', '    }\n', '    \n', '    function transfer(address receiver, uint256 numTokens) public override returns (bool) {\n', '      _transfer(msg.sender, receiver, numTokens);\n', '      return true;\n', '    }\n', '    \n', '    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', '      allowed[msg.sender][delegate] = numTokens;\n', '      emit Approval(msg.sender, delegate, numTokens);\n', '      return true;\n', '    }\n', '    \n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '      return allowed[owner][delegate];\n', '    }\n', '    \n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {\n', '      require(numTokens <= allowed[owner][msg.sender]);\n', '      allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '      _transfer(owner, buyer, numTokens);\n', '      return true;\n', '    }\n', '    \n', '    function burn(uint256 numTokens) public override returns (bool) {\n', '      _burn(msg.sender, numTokens);\n', '      return true;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '      uint256 receiveAmount = amount.mul(99).div(100);\n', '      balances[sender] = balances[sender].sub(receiveAmount);\n', '      balances[recipient] = balances[recipient].add(receiveAmount);\n', '      emit Transfer(sender, recipient, receiveAmount);\n', '      \n', '      _burn(sender, amount.sub(receiveAmount));\n', '    }\n', '    \n', '    function _burn(address account, uint256 numTokens) internal {\n', '      require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '      balances[account] = balances[account].sub(numTokens);\n', '      _totalSupply = _totalSupply.sub(numTokens);\n', '      emit Transfer(account, address(0), numTokens);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      if (a == 0) {\n', '        return 0;\n', '      }\n', '      uint256 c = a * b;\n', '      require(c / a == b);\n', '      return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '    }\n', '}']