['// --------------------------------\n', '// Smart Contract for Inferno Finance\n', '// \n', '// No Dev Share. No Team Tokens. No Marketing Fund. \n', '// No Airdrop. No Private Sale. No BS.\n', '// All tokens community owned.\n', '// \n', '// Incremental Burn every day up to 35%\n', '// Anti Whale Feature - Only 2% of the total supply can be traded at a time\n', '// \n', '// Telegram: https://t.me/inferno_finance\n', '// Website: https://infernofinance.com\n', '// Email: info@infernofinance.com\n', '// Medium: infernofinance.medium.com\n', '// --------------------------------\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'abstract contract Context \n', '{\n', '    function _msgSender() internal view virtual returns (address payable) \n', '    {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) \n', '    {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// Owner is granted exclusive access to specific functions\n', '// Deployer account is by default owner account\n', '// Can be changed with transferOwnership\n', '\n', 'contract Ownable is Context \n', '{\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t// Initializes contract setting deployer as initial owner\n', '    constructor () internal \n', '\t{\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '\t// Returns address of current owner\n', '    function owner() public view returns (address) \n', '\t{\n', '        return _owner;\n', '    }\n', '\n', '\t// Throw if called by any other account other than owner\n', '    modifier onlyOwner() \n', '\t{\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '\t// Renounce ownership\n', '    function renounceOwnership() public virtual onlyOwner \n', '\t{\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '\t// Transfer ownership\n', '    function transferOwnership(address newOwner) public virtual onlyOwner \n', '\t{\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20 \n', '{\n', '\t// Amount of tokens in existence\n', '    function totalSupply() external view returns (uint256);\n', '\n', '\t// Amount of tokens owned by account\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '\t// Move amount tokens from caller to recipient, returns boolean and emits Transfer event\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\t// Returns remaining number of tokens that spender is allowed to spend on behalf of owner via transferFrom function\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', "\t// Sets amount as allowance of spender over caller's tokens, returns boolean and emits Approval event\n", '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', "\t// Moves amount tokens from sender to recipient using allowance mechanism, amount is then deducted from caller's allowance\n", '\t// Returns boolean and emits Transfer event\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\t// Emitted when value of tokens are moved from one account to another\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t// Emitted when allowance of spender for an owner is set by a call to approve\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library SafeMath \n', '{\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n', '\t{\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) \n', '\t\t{\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n', '\t{\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n', '\t{\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \n', '    {\n', '        uint256 c = add(a,m);\n', '        uint256 d = sub(c,1);\n', '        return mul(div(d,m),m);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'library Address \n', '{\n', '    // Returns true if account is a contract\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal \n', '\t{\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) \n', '\t{\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) \n', '\t{\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) \n', '\t{\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) \n', '\t{\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) \n', '\t{\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) \n', '\t\t{\n', '            return returndata;\n', '        } \n', '\t\t\n', '\t\telse \n', '\t\t{\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) \n', '\t\t\t{\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly \n', '\t\t\t\t{\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } \n', '\t\t\t\n', '\t\t\telse \n', '\t\t\t{\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract ERC20 is Context, IERC20 \n', '{\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol) public \n', '\t{\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '\t// Returns token name\n', '    function name() public view returns (string memory) \n', '\t{\n', '        return _name;\n', '    }\n', '\n', '\t// Returns token symbol\n', '    function symbol() public view returns (string memory) \n', '\t{\n', '        return _symbol;\n', '    }\n', '\n', '\t// Returns decimal\n', '    function decimals() public view returns (uint8) \n', '\t{\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) \n', '\t{\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) \n', '\t{\n', '        return _balances[account];\n', '    }\n', '\n', '\t// Recipient cannot be zero address, caller must have balance of at least amount\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) \n', '\t{\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '\t// Spender cannot be zero address\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) \n', '\t{\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '\t// Emits Approval event indicating updated allowance, (sender and recipient cannot be zero address), sender must have balance of \n', "\t// at least amount and caller must have allowance for sender's tokens of at least amount\n", '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) \n', '\t{\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '\t// Automatically increase allowance granted to spender by caller\n', '\t// Emits Approval eent indicating updated allowance\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) \n', '\t{\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '\t// Automatically decrease allowance granted to spender by caller\n', '\t// Emits Approval event indicating updated allowance\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) \n', '\t{\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '\t// Move tokens from sender to recipient\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual \n', '\t{\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '\t// Mint tokens\n', '    function _mint(address account, uint256 amount) internal virtual \n', '\t{\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '\t// Burn tokens\n', '    function _burn(address account, uint256 amount) internal virtual\n', '\t{\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual \n', '\t{\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal \n', '\t{\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// --------------------------------\n', '// Inferno Finance\n', '// --------------------------------\n', 'pragma solidity ^0.6.2;\n', 'contract InfernoFinance is ERC20, Ownable \n', '{\n', '\t// Token Details\n', '\tstring constant tokenName = "Inferno Finance";\n', '\tstring constant tokenSymbol = "INFNO";\n', '\tuint8  constant tokenDecimals = 18;\n', '    uint256 private _totalSupply = 1000 * (10 ** 18);\n', '\tuint256 public basePercent = 100;\n', '\n', '\tconstructor() public ERC20(tokenName, tokenSymbol) \n', '\t{\n', '\t\t_mint(msg.sender, _totalSupply);\n', '\t}\n', '\n', '\t// Transfer Fee\n', '\tevent TransferFeeChanged(uint256 newFee);\n', '\tevent FeeRecipientChange(address account);\n', '\tevent AddFeeException(address account);\n', '\tevent RemoveFeeException(address account);\n', '\n', '\tbool private activeFee;\n', '\tuint256 public transferFee; // Fee as percentage, where 123 = 1.23%\n', '\taddress public feeRecipient; // Account or contract to send transfer fees to\n', '\n', '\t// Exception to transfer fees, for example for Uniswap contracts.\n', '\tmapping (address => bool) public feeException;\n', '\n', '\tfunction addFeeException(address account) public onlyOwner \n', '\t{\n', '\t\tfeeException[account] = true;\n', '\t\temit AddFeeException(account);\n', '\t}\n', '\n', '\tfunction removeFeeException(address account) public onlyOwner \n', '\t{\n', '\t\tfeeException[account] = false;\n', '\t\temit RemoveFeeException(account);\n', '\t}\n', '\n', '\tfunction setTransferFee(uint256 fee) public onlyOwner \n', '\t{\n', '\t\t// Maximum Possible Fee is 35%\n', '\t\trequire(fee <= 3500, "Fee cannot be greater than 35%");\n', '\t\tif (fee == 0) \n', '\t\t{\n', '\t\t\tactiveFee = false;\n', '\t\t} \n', '\t\t\n', '\t\telse \n', '\t\t{\n', '\t\t\tactiveFee = true;\n', '\t\t}\n', '\t\t\n', '\t\ttransferFee = fee;\n', '\t\temit TransferFeeChanged(fee);\n', '\t}\n', '\n', '\tfunction setTransferFeeRecipient(address account) public onlyOwner \n', '\t{\n', '\t\tfeeRecipient = account;\n', '\t\temit FeeRecipientChange(account);\n', '\t}\n', '\t\n', '\t// Get 2%\n', '\tfunction percentSupply(uint256 value) public view returns (uint256)  \n', '\t{\n', '\t\tuint256 roundValue = value.ceil(basePercent);\n', '\t\tuint256 onePercent = roundValue.mul(basePercent).div(5000);\n', '\t\treturn onePercent;\n', '\t}\n', '\n', '\t// Transfer recipient recives amount - fee\n', '\tfunction transfer(address recipient, uint256 amount) public override returns (bool) \n', '\t{\n', '\t\tif (activeFee && feeException[_msgSender()] == false) \n', '\t\t{\n', '\t\t\tuint256 twoPercent = percentSupply(_totalSupply);\n', '\t\t\n', '\t\t\t// Max transactable amount of 2% of total supply\n', '\t\t\trequire (amount <= twoPercent);\n', '\t\t\n', '\t\t\tuint256 fee = transferFee.mul(amount).div(10000);\n', '\t\t\tuint amountLessFee = amount.sub(fee);\n', '\t\t\t_transfer(_msgSender(), recipient, amountLessFee);\n', '\t\t\t_transfer(_msgSender(), feeRecipient, fee);\n', '\t\t} \n', '\t\t\n', '\t\telse \n', '\t\t{\n', '            _transfer(_msgSender(), recipient, amount);\n', '        }\n', '\t\t\n', '\t\treturn true;\n', '\t}\n', '\n', "\t// TransferFrom recipient recives amount, sender's account is debited amount + fee\n", '\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) \n', '\t{\n', '\t\tif (activeFee && feeException[recipient] == false)\n', '\t\t{ \n', '\t\t    uint256 twoPercent = percentSupply(_totalSupply);\n', '\t\t\n', '\t\t\t// Max transactable amount of 2% of total supply\n', '\t\t\trequire (amount <= twoPercent);\n', '\t\t    \n', '\t\t\t_transfer(sender, recipient, amount);\n', '\t\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '\t\t}\n', '\t    \n', '\t     _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '\t\n', '\t\treturn true;\n', '\t}\n', '}']