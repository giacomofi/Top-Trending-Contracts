['pragma solidity ^0.5.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Detailed.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Roles.sol";\n', '\n', 'contract MToken is ERC20, ERC20Detailed, Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    Roles.Role private _minters;\n', '    using SafeMath for uint256;\n', '\n', '    address[] minters_;\n', '    uint256 maxSupply_;\n', '\n', '    constructor(\n', '     \taddress[] memory minters,\n', '        uint256 maxSupply\n', '    )\n', '       ERC20Detailed("Metis Token", "Metis", 18)\n', '       public\n', '    {\n', '        for (uint256 i = 0; i < minters.length; ++i) {\n', '\t    _minters.add(minters[i]);\n', '        }\n', '        minters_ = minters;\n', '        maxSupply_ = maxSupply;\n', '    }\n', '\n', '    function mint(address target, uint256 amount) external {\n', '        require(_minters.has(msg.sender), "ONLY_MINTER_ALLOWED_TO_DO_THIS");\n', '        require(SafeMath.add(totalSupply(), amount) <= maxSupply_, "EXCEEDING_MAX_SUPPLY");\n', '        _mint(target, amount);\n', '    }\n', '\n', '    function burn(address target, uint256 amount) external {\n', '        require(_minters.has(msg.sender), "ONLY_MINTER_ALLOWED_TO_DO_THIS");\n', '        _burn(target, amount);\n', '    }\n', '    function addMinter(address minter) external onlyOwner {\n', '        require(!_minters.has(minter), "HAVE_MINTER_ROLE_ALREADY");\n', '        _minters.add(minter);\n', '        minters_.push(minter);\n', '    }\n', '\n', '\n', '    function removeMinter(address minter) external onlyOwner {\n', '        require(_minters.has(msg.sender), "HAVE_MINTER_ROLE_ALREADY");\n', '        _minters.remove(minter);\n', '        uint256 i;\n', '        for (i = 0; i < minters_.length; ++i) {\n', '            if (minters_[i] == minter) {\n', '                minters_[i] = address(0);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}']