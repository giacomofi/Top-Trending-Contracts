['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0);\n', '        uint256 c = _a / _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenBurner {\n', '    function kill() public {\n', '        selfdestruct(address(this));\n', '    }\n', '}\n', '\n', 'contract BurnManager is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 private _token;\n', '\n', '    uint256 private _totalBurned;\n', '\n', '    address[] private _burners;\n', '\n', '    event Burn(address indexed from, address indexed to, uint256 amount);\n', '\n', '    constructor(address token) public {\n', '        _token = ERC20(token);\n', '    }\n', '\n', '    function token() public view returns (ERC20) {\n', '        return _token;\n', '    }\n', '\n', '    function burners() public view returns (address[] memory) {\n', '        return _burners;\n', '    }\n', '\n', '    function totalBurned() public view returns (uint256) {\n', '        return _totalBurned;\n', '    }\n', '\n', '    function burn() external {\n', '        uint256 amount = _token.balanceOf(address(this));\n', '        require(amount > 0);\n', '\n', '        // No one in control of this new smart-contract\n', '        TokenBurner burner = new TokenBurner();\n', '        // Transferring the tokens from this contract to new TokenBurner smart-contract\n', '        if (_token.transfer(address(burner), amount)) {\n', '            // Killing the new TokenBurner smart-contract\n', '            burner.kill();\n', '            _burners.push(address(burner));\n', '            _totalBurned = _totalBurned.add(amount);\n', '            emit Burn(address(this), address(burner), amount);\n', '        }\n', '    }\n', '}']