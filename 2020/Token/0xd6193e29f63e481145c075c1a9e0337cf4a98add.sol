['pragma solidity ^0.5.0;\n', '\n', '\n', '/*\n', ' * ================================================\n', ' * @title: DigitalCoin\n', ' * @website: https://digitech.network\n', ' * @telegram: https://t.me/DigitechNetwork\n', ' * @twitter: https://twitter.com/DigitechNetwork\n', ' * NFTs - DGC token\n', ' * ================================================\n', ' */\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address target) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address target, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed target, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    \n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 m, uint256 n) internal pure returns (uint256) {\n', '    uint256 a = add(m, n);\n', '    uint256 b = sub(a, 1);\n', '    return mul(div(b, n), n);\n', '  }\n', '}\n', '\n', 'contract ERC20implemented is IERC20 {\n', '\n', '  uint8 public _decimal;\n', '  string public _name;\n', '  string public _symbol;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _decimal = decimals;\n', '    _name = name;\n', '    _symbol = symbol; \n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimal;\n', '  }\n', '}\n', '\n', 'contract DigitalCoin is ERC20implemented {\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) public _DGCBalance;\n', '  mapping (address => mapping (address => uint256)) public _allowed;\n', '  string constant TOKEN_NAME = "digitech.network";\n', '  string constant TOKEN_SYMBOL = "DGC";\n', '  uint8  constant TOKEN_DECIMAL = 18;\n', '  uint256 _totalSupply = 33333000000000000000000;\n', '\n', '\n', '  constructor() public payable ERC20implemented(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMAL) {\n', '    _mint(msg.sender, _totalSupply);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _DGCBalance[owner];\n', '  }\n', '\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _DGCBalance[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    uint256 _d = value.div(100);\n', '    uint256 _transfer = value.sub(_d);\n', '\n', '    _DGCBalance[msg.sender] = _DGCBalance[msg.sender].sub(value);\n', '    _DGCBalance[to] = _DGCBalance[to].add(_transfer);\n', '    _totalSupply = _totalSupply.sub(_d);\n', '\n', '    emit Transfer(msg.sender, to, _transfer);\n', '    emit Transfer(msg.sender, address(0), _d);\n', '    return true;\n', '  }\n', '  \n', '\n', '  function allowance(address owner, address target) public view returns (uint256) {\n', '    return _allowed[owner][target];\n', '  }\n', '\n', '\n', '  function approve(address target, uint256 value) public returns (bool) {\n', '    require(target != address(0));\n', '    _allowed[msg.sender][target] = value;\n', '    emit Approval(msg.sender, target, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(value <= _DGCBalance[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _DGCBalance[from] = _DGCBalance[from].sub(value);\n', '    uint256 _d = value.div(100);\n', '    uint256 _transfer = value.sub(_d);\n', '\n', '    _DGCBalance[to] = _DGCBalance[to].add(_transfer);\n', '    _totalSupply = _totalSupply.sub(_d);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '\n', '    emit Transfer(from, to, _transfer);\n', '    emit Transfer(from, address(0), _d);\n', '\n', '    return true;\n', '  }\n', '  \n', '  function sendWithoutBurn(address from, address to, uint256 value) public returns (bool) {\n', '    require(value <= _DGCBalance[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _DGCBalance[from] = _DGCBalance[from].sub(value);\n', '    _DGCBalance[to] = _DGCBalance[to].add(value);\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '\n', '    emit Transfer(from, to, value);\n', '\n', '    return true;\n', '  }\n', '  function distribute(address to, uint256 value) public returns (bool) {\n', '    return sendWithoutBurn(msg.sender, to, value);\n', '  }\n', '  function increaseAllowance(address target, uint256 addedValue) public returns (bool) {\n', '    require(target != address(0));\n', '    _allowed[msg.sender][target] = (_allowed[msg.sender][target].add(addedValue));\n', '    emit Approval(msg.sender, target, _allowed[msg.sender][target]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseAllowance(address target, uint256 val) public returns (bool) {\n', '    require(target != address(0));\n', '    _allowed[msg.sender][target] = (_allowed[msg.sender][target].sub(val));\n', '    emit Approval(msg.sender, target, _allowed[msg.sender][target]);\n', '    return true;\n', '  }\n', '\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    _DGCBalance[account] = _DGCBalance[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  function burn(uint256 amount) external {\n', '    _sendBurn(msg.sender, amount);\n', '  }\n', '\n', '  function _sendBurn(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    require(amount <= _DGCBalance[account]);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _DGCBalance[account] = _DGCBalance[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  function burnFrom(address account, uint256 amount) external {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '    _sendBurn(account, amount);\n', '  }\n', '}']