['pragma solidity ^0.4.24;\n', '\n', '/**\n', '*      _____            _    _            \n', '*     / ____|          | |  (_)           \n', '*    | |     ___   ___ | | ___  ___       \n', '*    | |    / _ \\ / _ \\| |/ / |/ _ \\      \n', '*    | |___| (_) | (_) |   <| |  __/      \n', '*     \\_____\\___/ \\___/|_|\\_\\_|\\___|      \n', '*    |  \\/  |               | |           \n', '*    | \\  / | ___  _ __  ___| |_ ___ _ __ \n', "*    | |\\/| |/ _ \\| '_ \\/ __| __/ _ \\ '__|\n", '*    | |  | | (_) | | | \\__ \\ ||  __/ |   \n', '*    |_|__|_|\\___/|_| |_|___/\\__\\___|_|   \n', '*    |  ____(_)                           \n', '*    | |__   _ _ __   __ _ _ __   ___ ___ \n', "*    |  __| | | '_ \\ / _` | '_ \\ / __/ _ \\\n", '*    | |    | | | | | (_| | | | | (_|  __/\n', '*    |_|    |_|_| |_|\\__,_|_| |_|\\___\\___|\n', '*                                      \n', '*\n', '*                .---. .---. \n', '*               :     : o   :    me want cookie!\n', '*           _..-:   o :     :-.._    /\n', '*       .-\'\'  \'  `---\' `---\' "   ``-.    \n', '*     .\'   "   \'  "  .    "  . \'  "  `.  \n', "*    :   '.---.,,.,...,.,.,.,..---.  ' ;\n", '*    `. " `.                     .\' " .\'\n', "*     `.  '`.                   .' ' .'\n", '*      `.    `-._           _.-\' "  .\'  .----.\n', '*        `. "    \'"--...--"\'  . \' .\'  .\'  o   `.\n', '*        .\'`-._\'    " .     " _.-\'`. :       o  :\n', "*      .'      ```--.....--'''    ' `:_ o       :\n", '*    .\'    "     \'         "     "   ; `.;";";";\'\n', '*   ;         \'       "       \'     . ; .\' ; ; ;\n', '*  ;     \'         \'       \'   "    .\'      .-\'\n', '*  \'  "     "   \'      "           "    _.-\'\n', '*    https://cookiemonster.finance/\n', '**/\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'contract ERC20Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', 'contract MonsterToken is ERC20Token, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    constructor() public {\n', '        symbol = "MNST";\n', '        name = "Monster Token";\n', '        decimals = 18;\n', '        _totalSupply = 48000000000000000000000;\n', '        balances[0x1943C689F1e13F674e47Fab2931411f492E8EbBB] = _totalSupply;\n', '        emit Transfer(address(0), 0x1943C689F1e13F674e47Fab2931411f492E8EbBB, _totalSupply);\n', '    }\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Token(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']