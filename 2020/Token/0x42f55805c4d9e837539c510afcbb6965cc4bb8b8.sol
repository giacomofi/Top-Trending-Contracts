['pragma solidity ^0.4.23; /** web: https://arat.life/  telegram: https://t.me/aRATcommunity **/\n', 'contract BasicRAT {\n', '  function totalSupply() public view returns (uint256);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function balanceOf(address who) public view returns (uint256);\n', '}\n', 'contract ERAT20 is BasicRAT {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', 'contract SmartRAT is BasicRAT {\n', '  using RATmath for uint256;\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract rektRAT is SmartRAT {\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', 'contract presidentRAT {\n', '  address public owner;\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'contract standardRAT is ERAT20, SmartRAT {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', 'contract RATmints is standardRAT, presidentRAT {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    if (totalSupply_ + _amount <= 2000000000000) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }   else {\n', '        return false;\n', '    }\n', '  }\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', 'library SafeERAT20 {\n', '  function safeTransfer(BasicRAT token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '  function safeTransferFrom(\n', '    ERAT20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '  function safeApprove(ERAT20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', 'library RATmath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract RATlock {\n', '  using SafeERAT20 for BasicRAT;\n', '  BasicRAT public token;\n', '  address public beneficiary;\n', '  uint256 public releaseTime;\n', '  constructor(\n', '    BasicRAT _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '  function release() public {\n', '    require(block.timestamp >= releaseTime);\n', '    uint256 amount = 10000;\n', '    require(amount > 0);\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', 'contract aRAT is standardRAT, rektRAT, RATmints {\n', '  string public name = "aRAT"; \n', '  string public symbol = "ARAT";\n', '  uint public decimals = 6;\n', '  uint public INITIAL_SUPPLY = 50000000000;\n', 'constructor() public {\n', '  totalSupply_ = INITIAL_SUPPLY;\n', '  balances[msg.sender] = INITIAL_SUPPLY;\n', '}\n', '}']