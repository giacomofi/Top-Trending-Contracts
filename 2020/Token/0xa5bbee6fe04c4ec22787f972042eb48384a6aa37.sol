['pragma solidity ^0.4.23;\n', '/**\n', ' *    A yearn.finance pegged base-money that is\n', ' *  adaptive, transparent, and community-driven.\n', ' *\n', ' *           $$\\     $$\\ $$$$$$$$\\ $$$$$$\\ \n', ' *           \\$$\\   $$  |$$  _____|\\_$$  _|\n', ' *     $$$$$$\\\\$$\\ $$  / $$ |        $$ |  \n', ' *    $$  __$$\\\\$$$$  /  $$$$$\\      $$ |  \n', ' *    $$ /  $$ |\\$$  /   $$  __|     $$ |  \n', ' *    $$ |  $$ | $$ |    $$ |        $$ |  \n', ' *    $$$$$$$  | $$ |    $$ |      $$$$$$\\ \n', ' *    $$  ____/  \\__|    \\__|      \\______|\n', ' *    $$ |                                 \n', ' *    $$ |                                 \n', ' *    \\__|                                 \n', ' *\n', ' *                              \n', ' *         https://pyfi.finance/\n', ' * \n', '**/\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MultiOwnable {\n', '  address public root;\n', '  mapping (address => address) public owners; // owner => parent of owner\n', '  \n', '  constructor() public {\n', '    root = msg.sender;\n', '    owners[root] = root;\n', '  }\n', '  \n', '  modifier onlyOwner() {\n', '    require(owners[msg.sender] != 0);\n', '    _;\n', '  }\n', '  \n', '  function newOwner(address _owner) onlyOwner external returns (bool) {\n', '    require(_owner != 0);\n', '    owners[_owner] = msg.sender;\n', '    return true;\n', '  }\n', '  \n', '  function deleteOwner(address _owner) onlyOwner external returns (bool) {\n', '    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\n', '    owners[_owner] = 0;\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract Blacklisted is MultiOwnable {\n', '\n', '  mapping(address => bool) public blacklist;\n', '\n', '  modifier notBlacklisted() {\n', '    require(blacklist[msg.sender] == false);\n', '    _;\n', '  }\n', '\n', '  function addToBlacklist(address _villain) external onlyOwner {\n', '    blacklist[_villain] = true;\n', '  }\n', '\n', '  function addManyToBlacklist(address[] _villains) external onlyOwner {\n', '    for (uint256 i = 0; i < _villains.length; i++) {\n', '      blacklist[_villains[i]] = true;\n', '    }\n', '  }\n', '\n', '  function removeFromBlacklist(address _villain) external onlyOwner {\n', '    blacklist[_villain] = false;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, MultiOwnable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract KP5R is MintableToken, BurnableToken, Blacklisted {\n', '\n', '  string public constant name = "pyfi.finance"; // solium-disable-line uppercase\n', '  string public constant symbol = "KP5R"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase, // 18 decimals is the strongly suggested default, avoid changing it\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 7 * 1000 * (10 ** uint256(decimals)); \n', '\n', '  bool public isUnlocked = false;\n', '  \n', '\n', '  constructor(address _wallet) public {\n', '    _wallet =   0x50B948B380fcCf1a6E97A15cdf1AA3Aa974D7540;\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[_wallet] = INITIAL_SUPPLY;\n', '    emit Transfer(address(0), _wallet, INITIAL_SUPPLY);\n', '  }\n', '\n', '  modifier onlyTransferable() {\n', '    require(isUnlocked || owners[msg.sender] != 0);\n', '    _;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\n', '      return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public onlyTransferable notBlacklisted returns (bool) {\n', '      return super.transfer(_to, _value);\n', '  }\n', '  \n', '  function unlockTransfer() public onlyOwner {\n', '      isUnlocked = true;\n', '  }\n', '  \n', '  function lockTransfer() public onlyOwner {\n', '      isUnlocked = false;\n', '  }\n', '\n', '}']