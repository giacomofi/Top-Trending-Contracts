['// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/oracle/ICADConversionOracle.sol\n', '\n', '\n', '/**\n', ' * @title ICADRateOracle\n', ' * @notice provides interface for converting USD stable coins to CAD\n', '*/\n', 'interface ICADConversionOracle {\n', '\n', '    /**\n', '     * @notice convert USD amount to CAD amount\n', '     * @param amount     amount of USD in 18 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdToCad(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert Dai amount to CAD amount\n', '     * @param amount     amount of dai in 18 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function daiToCad(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert USDC amount to CAD amount\n', '     * @param amount     amount of USDC in 6 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdcToCad(uint256 amount) external view returns (uint256);\n', '\n', '\n', '    /**\n', '     * @notice convert USDT amount to CAD amount\n', '     * @param amount     amount of USDT in 6 decimal places\n', '     * @return amount of CAD in 18 decimal places\n', '     */\n', '    function usdtToCad(uint256 amount) external view returns (uint256);\n', '\n', '\n', '    /**\n', '     * @notice convert CAD amount to USD amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USD in 18 decimal places\n', '     */\n', '    function cadToUsd(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert CAD amount to Dai amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of Dai in 18 decimal places\n', '     */\n', '    function cadToDai(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert CAD amount to USDC amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USDC in 6 decimal places\n', '     */\n', '    function cadToUsdc(uint256 amount) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice convert CAD amount to USDT amount\n', '     * @param amount     amount of CAD in 18 decimal places\n', '     * @return amount of USDT in 6 decimal places\n', '     */\n', '    function cadToUsdt(uint256 amount) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/acquisition/IAsyncRedemption.sol\n', '\n', '\n', '/**\n', ' * @title IAsyncRedemption\n', ' * @notice provides interface for token redemptions\n', '*/\n', 'interface IAsyncRedemption {\n', '\n', '    /**\n', '    * @notice redeem tokens instantly\n', '    * @param tokenAmount     amount of token to redeem\n', '    * @return true if success\n', '    */\n', '    function instantRedemption(uint256 tokenAmount) external returns (bool);\n', '\n', '    /**\n', '    * @notice redeem tokens asynchronously\n', '    * @param tokenAmount     amount of token to redeem\n', '    * @return true if success\n', '    */\n', '    function asyncRedemption(uint256 tokenAmount) external returns (bool);\n', '\n', '    /**\n', '    * @notice see how much funds is currently available for redemption\n', '    * @return funds amount in 18 decimals\n', '    */\n', '    function fundsAvailable() external view returns (uint256);\n', '\n', '    /**\n', '    * @notice view the max number of tokens that can be instantly redeemed\n', '    * @return amount of tokens instantly redeemable\n', '    */\n', '    function maxTokenForInstantRedemption() external view returns (uint256);\n', '\n', '    /**\n', '    * @notice see the total token balance awaiting redemptions for a given account\n', '    * @param account     account that has tokens pending\n', '    * @return token amount in 18 decimals\n', '    */\n', '    function tokensPending(address account) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/acquisition/ManagedAsyncDaiRedemptionPool.sol\n', '\n', '\n', '\n', '/**\n', ' * @title ManagedAsyncDaiRedemptionPool\n', ' * @notice Token to Dai pool to facilitate immediate and asynchronous redemptions\n', '*/\n', 'contract ManagedAsyncDaiRedemptionPool is IAsyncRedemption {\n', '    using SafeMath for uint256;\n', '\n', '    event Redeemed(address indexed holder, uint256 tokenAmount, uint256 daiAmount);\n', '    event RedemptionPending(address indexed holder, uint256 tokenAmount);\n', '\n', '    event Capitalized(uint256 usdAmount);\n', '\n', '    // source where the Dai comes from\n', '    address public _poolSource;\n', '\n', '    // address of the wToken\n', '    IERC20 public _wToken;\n', '\n', '    // address of the USD to CAD oracle\n', '    ICADConversionOracle public _cadOracle;\n', '\n', '    // wTokens, if fix-priced in CAD, will not require more than 2 decimals\n', '    uint256 public _fixedPriceCADCent;\n', '\n', '    // Dai contract\n', '    IERC20 public _daiContract;\n', '\n', '\n', '    /**\n', '    * @dev records each asynchronous redemption request\n', '    **/\n', '    struct AsyncRedemptionRequest {\n', '        // account that submitted the request\n', '        address account;\n', '\n', '        // amount of tokens to redeem\n', '        uint256 tokenAmount;\n', '    }\n', '\n', '    // array of redemption requests to keep track of\n', '    AsyncRedemptionRequest[] internal _asyncRequests;\n', '\n', '    // index of the first un-fulfilled async redemption request\n', '    uint256 public _asyncIndex = 0;\n', '\n', '\n', '    constructor(\n', '        address poolSource,\n', '        address tokenAddress,\n', '        address cadOracleAddress,\n', '        uint256 fixedPriceCADCent,\n', '\n', '        address daiContractddress\n', '    ) public {\n', '        _poolSource = poolSource;\n', '\n', '        _wToken = IERC20(tokenAddress);\n', '        _cadOracle = ICADConversionOracle(cadOracleAddress);\n', '        _fixedPriceCADCent = fixedPriceCADCent;\n', '\n', '        _daiContract = IERC20(daiContractddress);\n', '    }\n', '\n', '     /**\n', '    * @notice redeem tokens instantly\n', '    * @param tokenAmount     amount of token to redeem\n', '    * @return true if success\n', '    */\n', '    function instantRedemption(uint256 tokenAmount) external virtual override returns (bool) {\n', '        require(tokenAmount > 0, "Token amount must be greater than 0");\n', '\n', '        uint256 requestDaiAmount = _cadOracle\n', '            .cadToDai(tokenAmount.mul(_fixedPriceCADCent))\n', '            .div(100);\n', '\n', '        require(requestDaiAmount <= fundsAvailable(), "Insufficient Dai for instant redemption");\n', '\n', '\n', '        _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);\n', '        _daiContract.transfer(msg.sender, requestDaiAmount);\n', '\n', '        emit Redeemed(msg.sender, tokenAmount, requestDaiAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice redeem tokens asynchronously\n', '    * @param tokenAmount     amount of token to redeem\n', '    * @return true if success\n', '    */\n', '    function asyncRedemption(uint256 tokenAmount) external virtual override returns (bool) {\n', '        require(tokenAmount >= 5e19, "Token amount must be greater than or equal to 50");\n', '\n', '        AsyncRedemptionRequest memory newRequest = AsyncRedemptionRequest(msg.sender, tokenAmount);\n', '        _asyncRequests.push(newRequest);\n', '\n', '        _wToken.transferFrom(msg.sender, address(this), tokenAmount);\n', '\n', '        emit RedemptionPending(msg.sender, tokenAmount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @notice deposit Dai to faciliate redemptions\n', '    * @param maxDaiAmount    max amount of Dai to pay for redemptions\n', '    * @return true if success\n', '    */\n', '    function capitalize(uint256 maxDaiAmount) external returns (bool) {\n', '        uint256 daiAmountRemaining = maxDaiAmount;\n', '        uint256 newIndex = _asyncIndex;\n', '        uint256 requestLength = _asyncRequests.length;\n', '\n', '        for (; newIndex < requestLength; newIndex = newIndex.add(1)) {\n', '            AsyncRedemptionRequest storage request = _asyncRequests[newIndex];\n', '\n', '            uint256 requestDaiAmount = _cadOracle\n', '                .cadToDai(request.tokenAmount.mul(_fixedPriceCADCent))\n', '                .div(100);\n', '\n', '            // if cannot completely redeem a request, then do not perform partial redemptions\n', '            if (requestDaiAmount > daiAmountRemaining) {\n', '                break;\n', '            }\n', '\n', '            daiAmountRemaining = daiAmountRemaining.sub(requestDaiAmount);\n', '\n', '            _wToken.transfer(_poolSource, request.tokenAmount);\n', '            _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);\n', '\n', '            emit Redeemed(request.account, request.tokenAmount, requestDaiAmount);\n', '        }\n', '\n', '        // if all async requests have been redeemed, add Dai to this contract as reserve\n', '        if (newIndex == requestLength && daiAmountRemaining > 0) {\n', '            _daiContract.transferFrom(msg.sender, address(this), daiAmountRemaining);\n', '            emit Capitalized(daiAmountRemaining);\n', '        }\n', '\n', '        // update redemption index to the latest\n', '        _asyncIndex = newIndex;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice withdraw Dai reserves back to source\n', '    * @return true if success\n', '    */\n', '    function withdrawReserve(uint256 daiAmount) external returns (bool) {\n', '        require(msg.sender == _poolSource, "Only designated source can withdraw reserves");\n', '\n', '        _daiContract.transfer(_poolSource, daiAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '    * @notice view how many tokens are currently available\n', '    * @return amount of tokens available in the pool\n', '    */\n', '    function fundsAvailable() public view virtual override returns (uint256) {\n', '        return _daiContract.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '    * @notice view the max number of tokens that can be instantly redeemed\n', '    * @return amount of tokens instantly redeemable\n', '    */\n', '    function maxTokenForInstantRedemption() external view virtual override returns (uint256) {\n', '        return _cadOracle\n', '            .daiToCad(fundsAvailable().mul(100))\n', '            .div(_fixedPriceCADCent);\n', '    }\n', '\n', '    /**\n', '    * @notice see the total token balance awaiting redemptions for a given account\n', '    * @dev IMPORTANT this function involves unbounded loop, should NOT be used in critical logical paths\n', '    * @param account     account that has tokens pending\n', '    * @return token amount in 18 decimals\n', '    */\n', '    function tokensPending(address account) external view virtual override returns (uint256) {\n', '        uint256 pendingAmount = 0;\n', '        uint256 requestLength = _asyncRequests.length;\n', '\n', '        for (uint256 i = _asyncIndex; i < requestLength; i = i.add(1)) {\n', '            AsyncRedemptionRequest storage request = _asyncRequests[i];\n', '\n', '            if (request.account == account) {\n', '                pendingAmount = pendingAmount.add(request.tokenAmount);\n', '            }\n', '        }\n', '\n', '        return pendingAmount;\n', '    }\n', '\n', '    /**\n', '    * @notice view a specific async redemption request\n', '    * @param index     index of the async redemption request\n', '    * @return account and tokenAmount in the request\n', '    */\n', '    function requestAtIndex(uint256 index) external view returns (address, uint256) {\n', '        AsyncRedemptionRequest storage request = _asyncRequests[index];\n', '        return (request.account, request.tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @notice view the current async redemption request index\n', '    * @return the index\n', '    */\n', '    function currentRequestIndex() external view returns (uint256) {\n', '        return _asyncIndex;\n', '    }\n', '\n', '    /**\n', '    * @notice view the number of total async redemption requests\n', '    * @return total number of all async requests\n', '    */\n', '    function numberOfRequests() external view returns (uint256) {\n', '        return _asyncRequests.length;\n', '    }\n', '}']