['// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address[] private _partners = new address[](11);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event PartnershipTransferred(address indexed previousPartner, address indexed newPartner);\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        //partner\n', '        _partners[0] = 0x8f25F0C8Af94DFA6E3F7D50F428fD5C14204D85B;\n', '        _partners[1] = 0x8367691777d6a919EC9093b1F46F68A913933609;\n', '        _partners[2] = 0x21D617Ee5b9CF68c428515B47bD2709119eD0b8f;\n', '        _partners[3] = 0xb07E36Ec905D791954890476A8E9C4e7d9ae0522;\n', '        _partners[4] = 0xa839ff7466F6bF060d2f3a9a9302610b2f71a89b;\n', '        _partners[5] = 0x68D0b8490F76B1B021132d17C247bfDC68BD6f0D;\n', '        _partners[6] = 0x13AA9831D816ab81C4d0C139c1e480B197f2046c;\n', '        _partners[7] = 0xb8A14ECc4AF32012BD305667c82Db4156572043e;\n', '        _partners[8] = 0x0034Eb324848303411177075bf2fB66376aEa90d;\n', '        //presale\n', '        _partners[9] = 0x0000000000000000000000000000000000000000;\n', '        //exchange\n', '        _partners[10] = 0x0000000000000000000000000000000000000000;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    function partner(uint256 index) public view returns (address) {\n', '        require(index < _partners.length, "Ownable: index of partner is incorrect");\n', '        return _partners[index];\n', '    }\n', '    function is_partner(address addr) public view returns (bool) {\n', '        bool partnership = false;\n', '        uint256 partnerIndex = _partners.length;\n', '        for(uint256 i=0; i<partnerIndex; i++){\n', '            if(_partners[i] == addr) {\n', '                partnership = true;\n', '                break;\n', '            }\n', '        }\n', '        return partnership;\n', '    }\n', '    function partner_length() public view returns (uint256) {\n', '        return _partners.length;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    modifier onlyPartner() {\n', '        bool partnership = false;\n', '        address msgSender = _msgSender();\n', '        uint256 partnerIndex = _partners.length;\n', '        for(uint256 i=0; i<partnerIndex; i++){\n', '            if(_partners[i] == msgSender) {\n', '                partnership = true;\n', '                break;\n', '            }\n', '        }\n', '        require(partnership == true, "Partner not found");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    function transferPartnership(address newPartner,uint256 index) public virtual onlyPartner {\n', '        require(index < _partners.length, "Ownable: index of partner is incorrect");\n', '        require(_partners[index] == _msgSender(), "Ownable: partner can only change its address");\n', '        emit PartnershipTransferred(_partners[index], newPartner);\n', '        _partners[index] = newPartner;\n', '    }\n', '    function transferPresaleship(address newPartner) public virtual onlyOwner {\n', '        require(newPartner != address(0), "Ownable: new partner is the zero address");\n', '        emit PartnershipTransferred(_partners[partner_length()-2], newPartner);\n', '        _partners[partner_length()-2] = newPartner;\n', '    }\n', '    function transferExchangeship(address newPartner) public virtual onlyOwner {\n', '        require(newPartner != address(0), "Ownable: new partner is the zero address");\n', '        emit PartnershipTransferred(_partners[partner_length()-1], newPartner);\n', '        _partners[partner_length()-1] = newPartner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', 'contract Pausable is Context {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '    bool private _paused;\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    constructor (string memory name, string memory symbol) {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Capped.sol\n', '\n', 'abstract contract ERC20Capped is ERC20 {\n', '    using SafeMath for uint256;\n', '    uint256 private _cap;\n', '    constructor (uint256 cap) {\n', '        require(cap > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap;\n', '    }\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '        if (from == address(0)) {\n', '            require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    using SafeMath for uint256;\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\n', '\n', 'abstract contract ERC20Pausable is ERC20, Pausable {\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '        require(!paused(), "ERC20Pausable: token transfer while paused");\n', '    }\n', '}\n', '\n', '// File: eth-token-recover/contracts/TokenRecover.sol\n', '\n', 'contract TokenRecover is Ownable {\n', '    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n', '        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '    }\n', '}\n', '\n', '// File: @vittominacori/erc20-token/contracts/ERC20Base.sol\n', '\n', 'contract ERC20Base is ERC20Capped, ERC20Burnable, ERC20Pausable, TokenRecover {\n', '    bool private _mintingFinished = false;\n', '    bool private _transferEnabled = false;\n', '    event MintFinished();\n', '    event TransferEnabled();\n', '    event TransferDisabled();\n', '    modifier canMint() {\n', '        require(!_mintingFinished, "ERC20Base: minting is finished");\n', '        _;\n', '    }\n', '    modifier canTransfer(address from) {\n', '        require(\n', '            _transferEnabled || owner() == from || is_partner(from) == true,\n', '            "ERC20Base: transfer is not enabled or from does not have status owner"\n', '        );\n', '        _;\n', '    }\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 cap,\n', '        uint256 initialSupply,\n', '        bool transferEnabled,\n', '        bool mintingFinished\n', '    )\n', '    ERC20Capped(cap)\n', '    ERC20(name, symbol)\n', '    {\n', '        require(\n', '            mintingFinished == false || cap == initialSupply,\n', '            "ERC20Base: if finish minting, cap must be equal to initialSupply"\n', '        );\n', '        _setupDecimals(decimals);\n', '        if (initialSupply > 0) {\n', '            _mint(owner(), initialSupply);\n', '            _mint(partner(0), 100000*10**uint256(decimals));\n', '            _mint(partner(1), 100000*10**uint256(decimals));\n', '            _mint(partner(2), 100000*10**uint256(decimals));\n', '            _mint(partner(3), 100000*10**uint256(decimals));\n', '            _mint(partner(4), 100000*10**uint256(decimals));\n', '            _mint(partner(5), 100000*10**uint256(decimals));\n', '            _mint(partner(6), 100000*10**uint256(decimals));\n', '            _mint(partner(7), 100000*10**uint256(decimals));\n', '            _mint(partner(8), 100000*10**uint256(decimals));\n', '        }\n', '        if (mintingFinished) {\n', '            finishMinting();\n', '        }\n', '        if (transferEnabled) {\n', '            enableTransfer();\n', '        }\n', '    }\n', '    function mintingFinished() public view returns (bool) {\n', '        return _mintingFinished;\n', '    }\n', '    function transferEnabled() public view returns (bool) {\n', '        return _transferEnabled;\n', '    }\n', '    function mint(address to, uint256 value) public canMint onlyOwner {\n', '        _mint(to, value);\n', '    }\n', '    function transfer(address to, uint256 value) public virtual override(ERC20) canTransfer(_msgSender()) returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '    function transferFrom(address from, address to, uint256 value) public virtual override(ERC20) canTransfer(from) returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    function finishMinting() public canMint onlyOwner {\n', '        _mintingFinished = true;\n', '        emit MintFinished();\n', '    }\n', '    function disableTransfer() public onlyOwner {\n', '        _transferEnabled = false;\n', '        emit TransferDisabled();\n', '    }\n', '    function enableTransfer() public onlyOwner {\n', '        _transferEnabled = true;\n', '        emit TransferEnabled();\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped, ERC20Pausable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/DCBet.sol\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'contract DCBet is ERC20Base {\n', '    string private constant _VERSION = "v3.2.0";\n', '    constructor (\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 cap,\n', '        uint256 initialSupply,\n', '        bool transferEnabled,\n', '        bool mintingFinished\n', '    ) ERC20Base(name, symbol, decimals, cap, initialSupply, transferEnabled, mintingFinished) { }\n', '    function version() public pure returns (string memory) {\n', '        return _VERSION;\n', '    }\n', '}']