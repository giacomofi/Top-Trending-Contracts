['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', 'contract DEAN {\n', '    address public owner;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    event ChangeSupply(uint amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event IsFrozenAccount(address target, bool isFrozen);\n', '    event Burn(address target, uint amount);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping (address => mapping(address => uint256)) public allowed;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        name = "DEAN";\n', '        symbol = "DEAN";\n', '        decimals = 18;\n', '        totalSupply = 200000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    modifier onlyOwner {\n', '        if(msg.sender != owner) {\n', '            return;\n', '        }\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    function changeSupply(address target, uint256 amount) public onlyOwner {\n', '        totalSupply += amount;\n', '        balanceOf[target] += amount;\n', '\n', '        emit ChangeSupply(amount);\n', '        emit Transfer(address(0), target, amount);\n', '\n', '    }\n', '    function freezeAccount(address target, bool isFrozen) public onlyOwner{\n', '        frozenAccount[target] = isFrozen;\n', '        emit IsFrozenAccount(target, isFrozen);\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        if((_to != address(0)) && (!frozenAccount[msg.sender]) && (balanceOf[msg.sender] >= _value) && (balanceOf[_to] + _value >= balanceOf[_to])) {\n', '            balanceOf[msg.sender] -= _value;\n', '            balanceOf[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        if((_to != address(0)) && (!frozenAccount[_from]) && (allowed[_from][msg.sender] >= _value) && (balanceOf[msg.sender] >= _value) && (balanceOf[_to] + _value >= balanceOf[_to])) {\n', '            allowed[msg.sender][_from] -= _value;\n', '            balanceOf[msg.sender] -= _value;\n', '            balanceOf[_to] += _value;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function burn(uint256 _value) public onlyOwner returns(bool success){\n', '        if(balanceOf[msg.sender] >= _value){\n', '            totalSupply -= _value;\n', '            balanceOf[msg.sender] -= _value;\n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns(bool success){\n', '        if((balanceOf[_from] >= _value) && (allowed[_from][msg.sender] >= _value)) {\n', '            totalSupply -= _value;\n', '            balanceOf[msg.sender] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']