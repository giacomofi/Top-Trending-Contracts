['pragma solidity ^0.5.7;\n', '\n', 'contract Identity {\n', '    mapping(address => string) private _names;\n', '\n', '    /**\n', '     * Handy function to associate a short name with the account.\n', '     */\n', '    function iAm(string memory shortName) public {\n', '        _names[msg.sender] = shortName;\n', '    }\n', '\n', '    /**\n', '     * Handy function to confirm address of the current account.\n', '     */\n', '    function whereAmI() public view returns (address yourAddress) {\n', '        address myself = msg.sender;\n', '        return myself;\n', '    }\n', '\n', '    /**\n', '     * Handy function to confirm short name of the current account.\n', '     */\n', '    function whoAmI() public view returns (string memory yourName) {\n', '        return (_names[msg.sender]);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "Insufficient funds");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0));\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0));\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0));\n', '        require(spender != address(0));\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'contract ERC20Burnable is Context, ERC20 {\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_burnFrom}.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public {\n', '        _burnFrom(account, amount);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account));\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account));\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @dev This role allows the contract to be paused, so that in case something goes horribly wrong\n', ' * during an ICO, the owner/administrator has an ability to suspend all transactions while things\n', ' * are sorted out.\n', ' *\n', ' * NOTE: We have implemented a role model only the contract owner can assign/un-assign roles.\n', ' * This is necessary to support enterprise software, which requires a permissions model in which\n', ' * roles can be owner-administered, in contrast to a blockchain community approach in which\n', ' * permissions can be self-administered. Therefore, this implementation replaces the self-service\n', ' * "renounce" approach with one where only the owner is allowed to makes role changes.\n', ' *\n', ' * Owner is not allowed to renounce ownership, lest the contract go without administration. But\n', ' * it is ok for owner to shed initially granted roles by removing role from self.\n', ' */\n', 'contract PauserRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "onlyPauser");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function removePauser(address account) public onlyOwner {\n', '        _removePauser(account);\n', '    }\n', '\n', '    function _addPauser(address account) private {\n', '        require(account != address(0));\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) private {\n', '        require(account != address(0));\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Overridden ERC20 functionality\n', '    // =========================================================================\n', '\n', '    /**\n', '     * Ensure there is no way for the contract to end up with no owner. That would inadvertently result in\n', '     * pauser administration becoming impossible. We override this to always disallow it.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        require(false, "forbidden");\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _removePauser(msg.sender);\n', '        super.transferOwnership(newOwner);\n', '        _addPauser(newOwner);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context, PauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 with pausable transfers and allowances.\n', ' *\n', ' * Useful if you want to stop trades until the end of a crowdsale, or have\n', ' * an emergency switch for freezing all token transfers in the event of a large\n', ' * bug.\n', ' */\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', 'contract VerifiedAccount is ERC20, Ownable {\n', '\n', '    mapping(address => bool) private _isRegistered;\n', '\n', '    constructor () internal {\n', '        // The smart contract starts off registering itself, since address is known.\n', '        registerAccount();\n', '    }\n', '\n', '    event AccountRegistered(address indexed account);\n', '\n', '    /**\n', '     * This registers the calling wallet address as a known address. Operations that transfer responsibility\n', '     * may require the target account to be a registered account, to protect the system from getting into a\n', '     * state where administration or a large amount of funds can become forever inaccessible.\n', '     */\n', '    function registerAccount() public returns (bool ok) {\n', '        _isRegistered[msg.sender] = true;\n', '        emit AccountRegistered(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function isRegistered(address account) public view returns (bool ok) {\n', '        return _isRegistered[account];\n', '    }\n', '\n', '    function _accountExists(address account) internal view returns (bool exists) {\n', '        return account == msg.sender || _isRegistered[account];\n', '    }\n', '\n', '    modifier onlyExistingAccount(address account) {\n', '        require(_accountExists(account), "account not registered");\n', '        _;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Safe ERC20 methods\n', '    // =========================================================================\n', '\n', '    function safeTransfer(address to, uint256 value) public onlyExistingAccount(to) returns (bool ok) {\n', '        transfer(to, value);\n', '        return true;\n', '    }\n', '\n', '    function safeApprove(address spender, uint256 value) public onlyExistingAccount(spender) returns (bool ok) {\n', '        approve(spender, value);\n', '        return true;\n', '    }\n', '\n', '    function safeTransferFrom(address from, address to, uint256 value) public onlyExistingAccount(to) returns (bool ok) {\n', '        transferFrom(from, to, value);\n', '        return true;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Safe ownership transfer\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyExistingAccount(newOwner) onlyOwner {\n', '        super.transferOwnership(newOwner);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @dev GrantorRole trait\n', ' *\n', ' * This adds support for a role that allows creation of vesting token grants, allocated from the\n', " * role holder's wallet.\n", ' *\n', ' * NOTE: We have implemented a role model only the contract owner can assign/un-assign roles.\n', ' * This is necessary to support enterprise software, which requires a permissions model in which\n', ' * roles can be owner-administered, in contrast to a blockchain community approach in which\n', ' * permissions can be self-administered. Therefore, this implementation replaces the self-service\n', ' * "renounce" approach with one where only the owner is allowed to makes role changes.\n', ' *\n', ' * Owner is not allowed to renounce ownership, lest the contract go without administration. But\n', ' * it is ok for owner to shed initially granted roles by removing role from self.\n', ' */\n', 'contract GrantorRole is Ownable {\n', '    bool private constant OWNER_UNIFORM_GRANTOR_FLAG = false;\n', '\n', '    using Roles for Roles.Role;\n', '\n', '    event GrantorAdded(address indexed account);\n', '    event GrantorRemoved(address indexed account);\n', '\n', '    Roles.Role private _grantors;\n', '    mapping(address => bool) private _isUniformGrantor;\n', '\n', '    constructor () internal {\n', '        _addGrantor(msg.sender, OWNER_UNIFORM_GRANTOR_FLAG);\n', '    }\n', '\n', '    modifier onlyGrantor() {\n', '        require(isGrantor(msg.sender), "onlyGrantor");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGrantorOrSelf(address account) {\n', '        require(isGrantor(msg.sender) || msg.sender == account, "onlyGrantorOrSelf");\n', '        _;\n', '    }\n', '\n', '    function isGrantor(address account) public view returns (bool) {\n', '        return _grantors.has(account);\n', '    }\n', '\n', '    function addGrantor(address account, bool isUniformGrantor) public onlyOwner {\n', '        _addGrantor(account, isUniformGrantor);\n', '    }\n', '\n', '    function removeGrantor(address account) public onlyOwner {\n', '        _removeGrantor(account);\n', '    }\n', '\n', '    function _addGrantor(address account, bool isUniformGrantor) private {\n', '        require(account != address(0));\n', '        _grantors.add(account);\n', '        _isUniformGrantor[account] = isUniformGrantor;\n', '        emit GrantorAdded(account);\n', '    }\n', '\n', '    function _removeGrantor(address account) private {\n', '        require(account != address(0));\n', '        _grantors.remove(account);\n', '        emit GrantorRemoved(account);\n', '    }\n', '\n', '    function isUniformGrantor(address account) public view returns (bool) {\n', '        return isGrantor(account) && _isUniformGrantor[account];\n', '    }\n', '\n', '    modifier onlyUniformGrantor() {\n', '        require(isUniformGrantor(msg.sender), "onlyUniformGrantor");\n', '        // Only grantor role can do this.\n', '        _;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Overridden ERC20 functionality\n', '    // =========================================================================\n', '\n', '    /**\n', '     * Ensure there is no way for the contract to end up with no owner. That would inadvertently result in\n', '     * token grant administration becoming impossible. We override this to always disallow it.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        require(false, "forbidden");\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _removeGrantor(msg.sender);\n', '        super.transferOwnership(newOwner);\n', '        _addGrantor(newOwner, OWNER_UNIFORM_GRANTOR_FLAG);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', 'interface IERC20Vestable {\n', '    function getIntrinsicVestingSchedule(address grantHolder)\n', '    external\n', '    view\n', '    returns (\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays\n', '    );\n', '\n', '    function grantVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay,\n', '        uint32 duration,\n', '        uint32 cliffDuration,\n', '        uint32 interval,\n', '        bool isRevocable\n', '    ) external returns (bool ok);\n', '\n', '    function today() external view returns (uint32 dayNumber);\n', '\n', '    function vestingForAccountAsOf(\n', '        address grantHolder,\n', '        uint32 onDayOrToday\n', '    )\n', '    external\n', '    view\n', '    returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    );\n', '\n', '    function vestingAsOf(uint32 onDayOrToday) external view returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 cliffDuration,\n', '        uint32 vestDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    );\n', '\n', '    function revokeGrant(address grantHolder, uint32 onDay) external returns (bool);\n', '\n', '\n', '    event VestingScheduleCreated(\n', '        address indexed vestingLocation,\n', '        uint32 cliffDuration, uint32 indexed duration, uint32 interval,\n', '        bool indexed isRevocable);\n', '\n', '    event VestingTokensGranted(\n', '        address indexed beneficiary,\n', '        uint256 indexed vestingAmount,\n', '        uint32 startDay,\n', '        address vestingLocation,\n', '        address indexed grantor);\n', '\n', '    event GrantRevoked(address indexed grantHolder, uint32 indexed onDay);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @title Contract for grantable ERC20 token vesting schedules\n', ' *\n', ' * @notice Adds to an ERC20 support for grantor wallets, which are able to grant vesting tokens to\n', ' *   beneficiary wallets, following per-wallet custom vesting schedules.\n', ' *\n', ' * @dev Contract which gives subclass contracts the ability to act as a pool of funds for allocating\n', ' *   tokens to any number of other addresses. Token grants support the ability to vest over time in\n', ' *   accordance a predefined vesting schedule. A given wallet can receive no more than one token grant.\n', ' *\n', ' *   Tokens are transferred from the pool to the recipient at the time of grant, but the recipient\n', ' *   will only able to transfer tokens out of their wallet after they have vested. Transfers of non-\n', ' *   vested tokens are prevented.\n', ' *\n', ' *   Two types of toke grants are supported:\n', ' *   - Irrevocable grants, intended for use in cases when vesting tokens have been issued in exchange\n', ' *     for value, such as with tokens that have been purchased in an ICO.\n', ' *   - Revocable grants, intended for use in cases when vesting tokens have been gifted to the holder,\n', ' *     such as with employee grants that are given as compensation.\n', ' */\n', 'contract ERC20Vestable is ERC20, VerifiedAccount, GrantorRole, IERC20Vestable {\n', '    using SafeMath for uint256;\n', '\n', '    // Date-related constants for sanity-checking dates to reject obvious erroneous inputs\n', '    // and conversions from seconds to days and years that are more or less leap year-aware.\n', '    uint32 private constant THOUSAND_YEARS_DAYS = 365243;                   /* See https://www.timeanddate.com/date/durationresult.html?m1=1&d1=1&y1=2000&m2=1&d2=1&y2=3000 */\n', "    uint32 private constant TEN_YEARS_DAYS = THOUSAND_YEARS_DAYS / 100;     /* Includes leap years (though it doesn't really matter) */\n", '    uint32 private constant SECONDS_PER_DAY = 24 * 60 * 60;                 /* 86400 seconds in a day */\n', '    uint32 private constant JAN_1_2000_SECONDS = 946684800;                 /* Saturday, January 1, 2000 0:00:00 (GMT) (see https://www.epochconverter.com/) */\n', '    uint32 private constant JAN_1_2000_DAYS = JAN_1_2000_SECONDS / SECONDS_PER_DAY;\n', '    uint32 private constant JAN_1_3000_DAYS = JAN_1_2000_DAYS + THOUSAND_YEARS_DAYS;\n', '\n', '    struct vestingSchedule {\n', '        bool isValid;               /* true if an entry exists and is valid */\n', '        bool isRevocable;           /* true if the vesting option is revocable (a gift), false if irrevocable (purchased) */\n', '        uint32 cliffDuration;       /* Duration of the cliff, with respect to the grant start day, in days. */\n', '        uint32 duration;            /* Duration of the vesting schedule, with respect to the grant start day, in days. */\n', '        uint32 interval;            /* Duration in days of the vesting interval. */\n', '    }\n', '\n', '    struct tokenGrant {\n', '        bool isActive;              /* true if this vesting entry is active and in-effect entry. */\n', '        bool wasRevoked;            /* true if this vesting schedule was revoked. */\n', '        uint32 startDay;            /* Start day of the grant, in days since the UNIX epoch (start of day). */\n', '        uint256 amount;             /* Total number of tokens that vest. */\n', '        address vestingLocation;    /* Address of wallet that is holding the vesting schedule. */\n', '        address grantor;            /* Grantor that made the grant */\n', '    }\n', '\n', '    mapping(address => vestingSchedule) private _vestingSchedules;\n', '    mapping(address => tokenGrant) private _tokenGrants;\n', '\n', '\n', '    // =========================================================================\n', '    // === Methods for administratively creating a vesting schedule for an account.\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev This one-time operation permanently establishes a vesting schedule in the given account.\n', '     *\n', "     * For standard grants, this establishes the vesting schedule in the beneficiary's account.\n", "     * For uniform grants, this establishes the vesting schedule in the linked grantor's account.\n", '     *\n', '     * @param vestingLocation = Account into which to store the vesting schedule. Can be the account\n', '     *   of the beneficiary (for one-off grants) or the account of the grantor (for uniform grants\n', '     *   made from grant pools).\n', '     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\n', '     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\n', '     * @param interval = Number of days between vesting increases.\n', '     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\n', '     *   be revoked (i.e. tokens were purchased).\n', '     */\n', '    function _setVestingSchedule(\n', '        address vestingLocation,\n', '        uint32 cliffDuration, uint32 duration, uint32 interval,\n', '        bool isRevocable) internal returns (bool ok) {\n', '\n', '        // Check for a valid vesting schedule given (disallow absurd values to reject likely bad input).\n', '        require(\n', '            duration > 0 && duration <= TEN_YEARS_DAYS\n', '            && cliffDuration < duration\n', '            && interval >= 1,\n', '            "invalid vesting schedule"\n', '        );\n', '\n', '        // Make sure the duration values are in harmony with interval (both should be an exact multiple of interval).\n', '        require(\n', '            duration % interval == 0 && cliffDuration % interval == 0,\n', '            "invalid cliff/duration for interval"\n', '        );\n', '\n', '        // Create and populate a vesting schedule.\n', '        _vestingSchedules[vestingLocation] = vestingSchedule(\n', '            true/*isValid*/,\n', '            isRevocable,\n', '            cliffDuration, duration, interval\n', '        );\n', '\n', '        // Emit the event and return success.\n', '        emit VestingScheduleCreated(\n', '            vestingLocation,\n', '            cliffDuration, duration, interval,\n', '            isRevocable);\n', '        return true;\n', '    }\n', '\n', '    function _hasVestingSchedule(address account) internal view returns (bool ok) {\n', '        return _vestingSchedules[account].isValid;\n', '    }\n', '\n', '    /**\n', '     * @dev returns all information about the vesting schedule directly associated with the given\n', '     * account. This can be used to double check that a uniform grantor has been set up with a\n', '     * correct vesting schedule. Also, recipients of standard (non-uniform) grants can use this.\n', '     * This method is only callable by the account holder or a grantor, so this is mainly intended\n', '     * for administrative use.\n', '     *\n', '     * Holders of uniform grants must use vestingAsOf() to view their vesting schedule, as it is\n', '     * stored in the grantor account.\n', '     *\n', '     * @param grantHolder = The address to do this for.\n', '     *   the special value 0 to indicate today.\n', '     * @return = A tuple with the following values:\n', '     *   vestDuration = grant duration in days.\n', '     *   cliffDuration = duration of the cliff.\n', '     *   vestIntervalDays = number of days between vesting periods.\n', '     */\n', '    function getIntrinsicVestingSchedule(address grantHolder)\n', '    public\n', '    view\n', '    onlyGrantorOrSelf(grantHolder)\n', '    returns (\n', '        uint32 vestDuration,\n', '        uint32 cliffDuration,\n', '        uint32 vestIntervalDays\n', '    )\n', '    {\n', '        return (\n', '        _vestingSchedules[grantHolder].duration,\n', '        _vestingSchedules[grantHolder].cliffDuration,\n', '        _vestingSchedules[grantHolder].interval\n', '        );\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Token grants (general-purpose)\n', '    // === Methods to be used for administratively creating one-off token grants with vesting schedules.\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev Immediately grants tokens to an account, referencing a vesting schedule which may be\n', '     * stored in the same account (individual/one-off) or in a different account (shared/uniform).\n', '     *\n', '     * @param beneficiary = Address to which tokens will be granted.\n', '     * @param totalAmount = Total number of tokens to deposit into the account.\n', '     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\n', "     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\n", '     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\n', '     *   back as year 2000.\n', '     * @param vestingLocation = Account where the vesting schedule is held (must already exist).\n', '     * @param grantor = Account which performed the grant. Also the account from where the granted\n', '     *   funds will be withdrawn.\n', '     */\n', '    function _grantVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay,\n', '        address vestingLocation,\n', '        address grantor\n', '    )\n', '    internal returns (bool ok)\n', '    {\n', '        // Make sure no prior grant is in effect.\n', '        require(!_tokenGrants[beneficiary].isActive, "grant already exists");\n', '\n', '        // Check for valid vestingAmount\n', '        require(\n', '            vestingAmount <= totalAmount && vestingAmount > 0\n', '            && startDay >= JAN_1_2000_DAYS && startDay < JAN_1_3000_DAYS,\n', '            "invalid vesting params");\n', '\n', '        // Make sure the vesting schedule we are about to use is valid.\n', '        require(_hasVestingSchedule(vestingLocation), "no such vesting schedule");\n', '\n', "        // Transfer the total number of tokens from grantor into the account's holdings.\n", '        _transfer(grantor, beneficiary, totalAmount);\n', '        /* Emits a Transfer event. */\n', '\n', '        // Create and populate a token grant, referencing vesting schedule.\n', '        _tokenGrants[beneficiary] = tokenGrant(\n', '            true/*isActive*/,\n', '            false/*wasRevoked*/,\n', '            startDay,\n', '            vestingAmount,\n', '            vestingLocation, /* The wallet address where the vesting schedule is kept. */\n', '            grantor             /* The account that performed the grant (where revoked funds would be sent) */\n', '        );\n', '\n', '        // Emit the event and return success.\n', '        emit VestingTokensGranted(beneficiary, vestingAmount, startDay, vestingLocation, grantor);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Immediately grants tokens to an address, including a portion that will vest over time\n', '     * according to a set vesting schedule. The overall duration and cliff duration of the grant must\n', '     * be an even multiple of the vesting interval.\n', '     *\n', '     * @param beneficiary = Address to which tokens will be granted.\n', '     * @param totalAmount = Total number of tokens to deposit into the account.\n', '     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\n', "     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\n", '     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\n', '     *   back as year 2000.\n', '     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\n', '     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\n', '     * @param interval = Number of days between vesting increases.\n', '     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\n', '     *   be revoked (i.e. tokens were purchased).\n', '     */\n', '    function grantVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay,\n', '        uint32 duration,\n', '        uint32 cliffDuration,\n', '        uint32 interval,\n', '        bool isRevocable\n', '    ) public onlyGrantor returns (bool ok) {\n', '        // Make sure no prior vesting schedule has been set.\n', '        require(!_tokenGrants[beneficiary].isActive, "grant already exists");\n', '\n', '        // The vesting schedule is unique to this wallet and so will be stored here,\n', '        _setVestingSchedule(beneficiary, cliffDuration, duration, interval, isRevocable);\n', '\n', "        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\n", '        _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, beneficiary, msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev This variant only grants tokens if the beneficiary account has previously self-registered.\n', '     */\n', '    function safeGrantVestingTokens(\n', '        address beneficiary, uint256 totalAmount, uint256 vestingAmount,\n', '        uint32 startDay, uint32 duration, uint32 cliffDuration, uint32 interval,\n', '        bool isRevocable) public onlyGrantor onlyExistingAccount(beneficiary) returns (bool ok) {\n', '\n', '        return grantVestingTokens(\n', '            beneficiary, totalAmount, vestingAmount,\n', '            startDay, duration, cliffDuration, interval,\n', '            isRevocable);\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Check vesting.\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev returns the day number of the current day, in days since the UNIX epoch.\n', '     */\n', '    function today() public view returns (uint32 dayNumber) {\n', '        return uint32(block.timestamp / SECONDS_PER_DAY);\n', '    }\n', '\n', '    function _effectiveDay(uint32 onDayOrToday) internal view returns (uint32 dayNumber) {\n', '        return onDayOrToday == 0 ? today() : onDayOrToday;\n', '    }\n', '\n', '    /**\n', '     * @dev Determines the amount of tokens that have not vested in the given account.\n', '     *\n', '     * The math is: not vested amount = vesting amount * (end date - on date)/(end date - start date)\n', '     *\n', '     * @param grantHolder = The account to check.\n', '     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\n', '     *   the special value 0 to indicate today.\n', '     */\n', '    function _getNotVestedAmount(address grantHolder, uint32 onDayOrToday) internal view returns (uint256 amountNotVested) {\n', '        tokenGrant storage grant = _tokenGrants[grantHolder];\n', '        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\n', '        uint32 onDay = _effectiveDay(onDayOrToday);\n', '\n', "        // If there's no schedule, or before the vesting cliff, then the full amount is not vested.\n", '        if (!grant.isActive || onDay < grant.startDay + vesting.cliffDuration)\n', '        {\n', '            // None are vested (all are not vested)\n', '            return grant.amount;\n', '        }\n', '        // If after end of vesting, then the not vested amount is zero (all are vested).\n', '        else if (onDay >= grant.startDay + vesting.duration)\n', '        {\n', '            // All are vested (none are not vested)\n', '            return uint256(0);\n', '        }\n', '        // Otherwise a fractional amount is vested.\n', '        else\n', '        {\n', '            // Compute the exact number of days vested.\n', '            uint32 daysVested = onDay - grant.startDay;\n', '            // Adjust result rounding down to take into consideration the interval.\n', '            uint32 effectiveDaysVested = (daysVested / vesting.interval) * vesting.interval;\n', '\n', '            // Compute the fraction vested from schedule using 224.32 fixed point math for date range ratio.\n', '            // Note: This is safe in 256-bit math because max value of X billion tokens = X*10^27 wei, and\n', '            // typical token amounts can fit into 90 bits. Scaling using a 32 bits value results in only 125\n', '            // bits before reducing back to 90 bits by dividing. There is plenty of room left, even for token\n', '            // amounts many orders of magnitude greater than mere billions.\n', '            uint256 vested = grant.amount.mul(effectiveDaysVested).div(vesting.duration);\n', '            return grant.amount.sub(vested);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Computes the amount of funds in the given account which are available for use as of\n', "     * the given day. If there's no vesting schedule then 0 tokens are considered to be vested and\n", '     * this just returns the full account balance.\n', '     *\n', '     * The math is: available amount = total funds - notVestedAmount.\n', '     *\n', '     * @param grantHolder = The account to check.\n', '     * @param onDay = The day to check for, in days since the UNIX epoch.\n', '     */\n', '    function _getAvailableAmount(address grantHolder, uint32 onDay) internal view returns (uint256 amountAvailable) {\n', '        uint256 totalTokens = balanceOf(grantHolder);\n', '        uint256 vested = totalTokens.sub(_getNotVestedAmount(grantHolder, onDay));\n', '        return vested;\n', '    }\n', '\n', '    /**\n', "     * @dev returns all information about the grant's vesting as of the given day\n", '     * for the given account. Only callable by the account holder or a grantor, so\n', '     * this is mainly intended for administrative use.\n', '     *\n', '     * @param grantHolder = The address to do this for.\n', '     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\n', '     *   the special value 0 to indicate today.\n', '     * @return = A tuple with the following values:\n', '     *   amountVested = the amount out of vestingAmount that is vested\n', '     *   amountNotVested = the amount that is vested (equal to vestingAmount - vestedAmount)\n', '     *   amountOfGrant = the amount of tokens subject to vesting.\n', '     *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\n', '     *   vestDuration = grant duration in days.\n', '     *   cliffDuration = duration of the cliff.\n', '     *   vestIntervalDays = number of days between vesting periods.\n', '     *   isActive = true if the vesting schedule is currently active.\n', '     *   wasRevoked = true if the vesting schedule was revoked.\n', '     */\n', '    function vestingForAccountAsOf(\n', '        address grantHolder,\n', '        uint32 onDayOrToday\n', '    )\n', '    public\n', '    view\n', '    onlyGrantorOrSelf(grantHolder)\n', '    returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 vestDuration,\n', '        uint32 cliffDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    )\n', '    {\n', '        tokenGrant storage grant = _tokenGrants[grantHolder];\n', '        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\n', '        uint256 notVestedAmount = _getNotVestedAmount(grantHolder, onDayOrToday);\n', '        uint256 grantAmount = grant.amount;\n', '\n', '        return (\n', '        grantAmount.sub(notVestedAmount),\n', '        notVestedAmount,\n', '        grantAmount,\n', '        grant.startDay,\n', '        vesting.duration,\n', '        vesting.cliffDuration,\n', '        vesting.interval,\n', '        grant.isActive,\n', '        grant.wasRevoked\n', '        );\n', '    }\n', '\n', '    /**\n', "     * @dev returns all information about the grant's vesting as of the given day\n", '     * for the current account, to be called by the account holder.\n', '     *\n', '     * @param onDayOrToday = The day to check for, in days since the UNIX epoch. Can pass\n', '     *   the special value 0 to indicate today.\n', '     * @return = A tuple with the following values:\n', '     *   amountVested = the amount out of vestingAmount that is vested\n', '     *   amountNotVested = the amount that is vested (equal to vestingAmount - vestedAmount)\n', '     *   amountOfGrant = the amount of tokens subject to vesting.\n', '     *   vestStartDay = starting day of the grant (in days since the UNIX epoch).\n', '     *   cliffDuration = duration of the cliff.\n', '     *   vestDuration = grant duration in days.\n', '     *   vestIntervalDays = number of days between vesting periods.\n', '     *   isActive = true if the vesting schedule is currently active.\n', '     *   wasRevoked = true if the vesting schedule was revoked.\n', '     */\n', '    function vestingAsOf(uint32 onDayOrToday) public view returns (\n', '        uint256 amountVested,\n', '        uint256 amountNotVested,\n', '        uint256 amountOfGrant,\n', '        uint32 vestStartDay,\n', '        uint32 vestDuration,\n', '        uint32 cliffDuration,\n', '        uint32 vestIntervalDays,\n', '        bool isActive,\n', '        bool wasRevoked\n', '    )\n', '    {\n', '        return vestingForAccountAsOf(msg.sender, onDayOrToday);\n', '    }\n', '\n', '    /**\n', '     * @dev returns true if the account has sufficient funds available to cover the given amount,\n', '     *   including consideration for vesting tokens.\n', '     *\n', '     * @param account = The account to check.\n', '     * @param amount = The required amount of vested funds.\n', '     * @param onDay = The day to check for, in days since the UNIX epoch.\n', '     */\n', '    function _fundsAreAvailableOn(address account, uint256 amount, uint32 onDay) internal view returns (bool ok) {\n', '        return (amount <= _getAvailableAmount(account, onDay));\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the amount is sufficiently vested right now.\n', '     *\n', '     * @param account = The account to check.\n', '     * @param amount = The required amount of vested funds.\n', '     */\n', '    modifier onlyIfFundsAvailableNow(address account, uint256 amount) {\n', '        // Distinguish insufficient overall balance from insufficient vested funds balance in failure msg.\n', '        require(_fundsAreAvailableOn(account, amount, today()),\n', '            balanceOf(account) < amount ? "insufficient funds" : "insufficient vested funds");\n', '        _;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Grant revocation\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev If the account has a revocable grant, this forces the grant to end based on computing\n', '     * the amount vested up to the given date. All tokens that would no longer vest are returned\n', '     * to the account of the original grantor.\n', '     *\n', '     * @param grantHolder = Address to which tokens will be granted.\n', '     * @param onDay = The date upon which the vesting schedule will be effectively terminated,\n', '     *   in days since the UNIX epoch (start of day).\n', '     */\n', '    function revokeGrant(address grantHolder, uint32 onDay) public onlyGrantor returns (bool ok) {\n', '        tokenGrant storage grant = _tokenGrants[grantHolder];\n', '        vestingSchedule storage vesting = _vestingSchedules[grant.vestingLocation];\n', '        uint256 notVestedAmount;\n', '\n', '        // Make sure grantor can only revoke from own pool.\n', '        require(msg.sender == owner() || msg.sender == grant.grantor, "not allowed");\n', '        // Make sure a vesting schedule has previously been set.\n', '        require(grant.isActive, "no active grant");\n', "        // Make sure it's revocable.\n", '        require(vesting.isRevocable, "irrevocable");\n', '        // Fail on likely erroneous input.\n', '        require(onDay <= grant.startDay + vesting.duration, "no effect");\n', '        // Don"t let grantor revoke anf portion of vested amount.\n', '        require(onDay >= today(), "cannot revoke vested holdings");\n', '\n', '        notVestedAmount = _getNotVestedAmount(grantHolder, onDay);\n', '\n', '        // Use ERC20 _approve() to forcibly approve grantor to take back not-vested tokens from grantHolder.\n', '        _approve(grantHolder, grant.grantor, notVestedAmount);\n', '        /* Emits an Approval Event. */\n', '        transferFrom(grantHolder, grant.grantor, notVestedAmount);\n', '        /* Emits a Transfer and an Approval Event. */\n', '\n', '        // Kill the grant by updating wasRevoked and isActive.\n', '        _tokenGrants[grantHolder].wasRevoked = true;\n', '        _tokenGrants[grantHolder].isActive = false;\n', '\n', '        emit GrantRevoked(grantHolder, onDay);\n', '        /* Emits the GrantRevoked event. */\n', '        return true;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Overridden ERC20 functionality\n', '    // =========================================================================\n', '\n', '    /**\n', '     * @dev Methods transfer() and approve() require an additional available funds check to\n', '     * prevent spending held but non-vested tokens. Note that transferFrom() does NOT have this\n', '     * additional check because approved funds come from an already set-aside allowance, not from the wallet.\n', '     */\n', '    function transfer(address to, uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) returns (bool ok) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Additional available funds check to prevent spending held but non-vested tokens.\n', '     */\n', '    function approve(address spender, uint256 value) public onlyIfFundsAvailableNow(msg.sender, value) returns (bool ok) {\n', '        return super.approve(spender, value);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @title Contract for uniform granting of vesting tokens\n', ' *\n', ' * @notice Adds methods for programmatic creation of uniform or standard token vesting grants.\n', ' *\n', ' * @dev This is primarily for use by exchanges and scripted internal employee incentive grant creation.\n', ' */\n', 'contract UniformTokenGrantor is ERC20Vestable {\n', '\n', '    struct restrictions {\n', '        bool isValid;\n', '        uint32 minStartDay;        /* The smallest value for startDay allowed in grant creation. */\n', '        uint32 maxStartDay;        /* The maximum value for startDay allowed in grant creation. */\n', '        uint32 expirationDay;       /* The last day this grantor may make grants. */\n', '    }\n', '\n', '    mapping(address => restrictions) private _restrictions;\n', '\n', '\n', '    // =========================================================================\n', '    // === Uniform token grant setup\n', '    // === Methods used by owner to set up uniform grants on restricted grantor\n', '    // =========================================================================\n', '\n', '    event GrantorRestrictionsSet(\n', '        address indexed grantor,\n', '        uint32 minStartDay,\n', '        uint32 maxStartDay,\n', '        uint32 expirationDay);\n', '\n', '    /**\n', '     * @dev Lets owner set or change existing specific restrictions. Restrictions must be established\n', '     * before the grantor will be allowed to issue grants.\n', '     *\n', '     * All date values are expressed as number of days since the UNIX epoch. Note that the inputs are\n', '     * themselves not very thoroughly restricted. However, this method can be called more than once\n', "     * if incorrect values need to be changed, or to extend a grantor's expiration date.\n", '     *\n', '     * @param grantor = Address which will receive the uniform grantable vesting schedule.\n', '     * @param minStartDay = The smallest value for startDay allowed in grant creation.\n', '     * @param maxStartDay = The maximum value for startDay allowed in grant creation.\n', '     * @param expirationDay = The last day this grantor may make grants.\n', '     */\n', '    function setRestrictions(\n', '        address grantor,\n', '        uint32 minStartDay,\n', '        uint32 maxStartDay,\n', '        uint32 expirationDay\n', '    )\n', '    public\n', '    onlyOwner\n', '    onlyExistingAccount(grantor)\n', '    returns (bool ok)\n', '    {\n', '        require(\n', '            isUniformGrantor(grantor)\n', '         && maxStartDay > minStartDay\n', '         && expirationDay > today(), "invalid params");\n', '\n', '        // We allow owner to set or change existing specific restrictions.\n', '        _restrictions[grantor] = restrictions(\n', '            true/*isValid*/,\n', '            minStartDay,\n', '            maxStartDay,\n', '            expirationDay\n', '        );\n', '\n', '        // Emit the event and return success.\n', '        emit GrantorRestrictionsSet(grantor, minStartDay, maxStartDay, expirationDay);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Lets owner permanently establish a vesting schedule for a restricted grantor to use when\n', "     * creating uniform token grants. Grantee accounts forever refer to the grantor's account to look up\n", '     * vesting, so this method can only be used once per grantor.\n', '     *\n', '     * @param grantor = Address which will receive the uniform grantable vesting schedule.\n', '     * @param duration = Duration of the vesting schedule, with respect to the grant start day, in days.\n', '     * @param cliffDuration = Duration of the cliff, with respect to the grant start day, in days.\n', '     * @param interval = Number of days between vesting increases.\n', '     * @param isRevocable = True if the grant can be revoked (i.e. was a gift) or false if it cannot\n', '     *   be revoked (i.e. tokens were purchased).\n', '     */\n', '    function setGrantorVestingSchedule(\n', '        address grantor,\n', '        uint32 duration,\n', '        uint32 cliffDuration,\n', '        uint32 interval,\n', '        bool isRevocable\n', '    )\n', '    public\n', '    onlyOwner\n', '    onlyExistingAccount(grantor)\n', '    returns (bool ok)\n', '    {\n', '        // Only allow doing this to restricted grantor role account.\n', '        require(isUniformGrantor(grantor), "uniform grantor only");\n', '        // Make sure no prior vesting schedule has been set!\n', '        require(!_hasVestingSchedule(grantor), "schedule already exists");\n', '\n', '        // The vesting schedule is unique to this grantor wallet and so will be stored here to be\n', '        // referenced by future grants. Emits VestingScheduleCreated event.\n', '        _setVestingSchedule(grantor, cliffDuration, duration, interval, isRevocable);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    // =========================================================================\n', '    // === Uniform token grants\n', '    // === Methods to be used by exchanges to use for creating tokens.\n', '    // =========================================================================\n', '\n', '    function isUniformGrantorWithSchedule(address account) internal view returns (bool ok) {\n', '        // Check for grantor that has a uniform vesting schedule already set.\n', '        return isUniformGrantor(account) && _hasVestingSchedule(account);\n', '    }\n', '\n', '    modifier onlyUniformGrantorWithSchedule(address account) {\n', '        require(isUniformGrantorWithSchedule(account), "grantor account not ready");\n', '        _;\n', '    }\n', '\n', '    modifier whenGrantorRestrictionsMet(uint32 startDay) {\n', '        restrictions storage restriction = _restrictions[msg.sender];\n', '        require(restriction.isValid, "set restrictions first");\n', '\n', '        require(\n', '            startDay >= restriction.minStartDay\n', '            && startDay < restriction.maxStartDay, "startDay too early");\n', '\n', '        require(today() < restriction.expirationDay, "grantor expired");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Immediately grants tokens to an address, including a portion that will vest over time\n', "     * according to the uniform vesting schedule already established in the grantor's account.\n", '     *\n', '     * @param beneficiary = Address to which tokens will be granted.\n', '     * @param totalAmount = Total number of tokens to deposit into the account.\n', '     * @param vestingAmount = Out of totalAmount, the number of tokens subject to vesting.\n', "     * @param startDay = Start day of the grant's vesting schedule, in days since the UNIX epoch\n", '     *   (start of day). The startDay may be given as a date in the future or in the past, going as far\n', '     *   back as year 2000.\n', '     */\n', '    function grantUniformVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay\n', '    )\n', '    public\n', '    onlyUniformGrantorWithSchedule(msg.sender)\n', '    whenGrantorRestrictionsMet(startDay)\n', '    returns (bool ok)\n', '    {\n', "        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\n", '        // Emits VestingTokensGranted event.\n', '        return _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, msg.sender, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev This variant only grants tokens if the beneficiary account has previously self-registered.\n', '     */\n', '    function safeGrantUniformVestingTokens(\n', '        address beneficiary,\n', '        uint256 totalAmount,\n', '        uint256 vestingAmount,\n', '        uint32 startDay\n', '    )\n', '    public\n', '    onlyUniformGrantorWithSchedule(msg.sender)\n', '    whenGrantorRestrictionsMet(startDay)\n', '    onlyExistingAccount(beneficiary)\n', '    returns (bool ok)\n', '    {\n', "        // Issue grantor tokens to the beneficiary, using beneficiary's own vesting schedule.\n", '        // Emits VestingTokensGranted event.\n', '        return _grantVestingTokens(beneficiary, totalAmount, vestingAmount, startDay, msg.sender, msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '/**\n', ' * @dev An ERC20 implementation of the CXPcoin ecosystem token. All tokens are initially pre-assigned to\n', ' * the creator, and can later be distributed freely using transfer transferFrom and other ERC20\n', ' * functions.\n', ' */\n', 'contract CxpCoin is Identity, ERC20, ERC20Pausable, ERC20Burnable, ERC20Detailed, UniformTokenGrantor {\n', '    uint32 public constant VERSION = 8;\n', '\n', '    uint8 private constant DECIMALS = 18;\n', '    uint256 private constant TOKEN_WEI = 10 ** uint256(DECIMALS);\n', '\n', '    uint256 private constant INITIAL_WHOLE_TOKENS = uint256(10 * (10 ** 9));\n', '    uint256 private constant INITIAL_SUPPLY = uint256(INITIAL_WHOLE_TOKENS) * uint256(TOKEN_WEI);\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     */\n', '    constructor () ERC20Detailed("CXPcoin", "CXP", DECIMALS) public {\n', '        // This is the only place where we ever mint tokens.\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    event DepositReceived(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * fallback function: collect any ether sent to us (whether we asked for it or not).\n', '     */\n', '    function() payable external {\n', '        // Track where unexpected ETH came from so we can follow up later.\n', '        emit DepositReceived(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', "     * @dev Allow only the owner to burn tokens from the owner's wallet, also decreasing the total\n", '     * supply. There is no reason for a token holder to EVER call this method directly. It will be\n', '     * used by the future CXPcoin ecosystem token contract to implement token redemption.\n', '     */\n', '    function burn(uint256 value) onlyIfFundsAvailableNow(msg.sender, value) public {\n', '        // This is the only place where we ever burn tokens.\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow pauser to kill the contract (which must already be paused), with enough restrictions\n', '     * in place to ensure this could not happen by accident very easily. ETH is returned to owner wallet.\n', '     */\n', '    function kill() whenPaused onlyPauser public returns (bool itsDeadJim) {\n', '        require(isPauser(msg.sender), "onlyPauser");\n', '        address payable payableOwner = address(uint160(owner()));\n', '        selfdestruct(payableOwner);\n', '        return true;\n', '    }\n', '}']