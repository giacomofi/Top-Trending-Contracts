['pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '// -------------------------\n', '// BurnableToken\n', '// -------------------------\n', '\n', '// -------------------------\n', '// safemath library\n', '// -------------------------\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ------------------------\n', '// ERC Token interface\n', '// ------------------------\n', '\n', 'contract ERC20Interface\n', '{\n', '    function totalSupply() public view returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    \n', '\tfunction allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    \n', '\tfunction approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom (address from, address to, uint tokens) public returns (bool success);\n', '\n', '    function burn(uint256 _value) public {_burn(msg.sender, _value);}\n', '    \n', '    function _burn(address sender, uint amount) public {\n', '        \n', '    }\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    \n', '}\n', '\n', '\n', '// ------------------------\n', '// token\n', '// ------------------------\n', '\n', 'contract DECOMP is ERC20Interface, SafeMath\n', '{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    bool public firstTransfor;\n', '    address burnaddress = 0x000000000000000000000000000000000000dEaD;\n', '    \n', '    uint256 public _totalSupply;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address =>uint)) allowed;\n', '    \n', '    constructor() public\n', '    {\n', '        name = "DECOMP";\n', '        symbol = "DECOMP";\n', '        decimals = 4;\n', '        _totalSupply = 1000000000000;\n', '        \n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) \n', '    {\n', '    return _totalSupply - balances[address(0)];\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance) \n', '    {\n', '    return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance (address tokenOwner, address spender) public view returns (uint remaining) \n', '    {\n', '    return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success) \n', '    {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '    }\n', '    \n', '    // ------------------------\n', '    // Address 0x000000000000000000000000000000000000dEaD represents Ethereums global token burn address\n', '    // ------------------------\n', '    \n', '    function transfer(address to, uint tokens) public returns (bool success)\n', '    {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '    balances[to] = safeAdd(balances[to], tokens - ((tokens * 2) / 30));\n', '    \n', '    _burn(burnaddress, tokens);\n', '    emit Transfer(msg.sender, to, tokens - ((tokens * 2) / 30));\n', '    emit Transfer(msg.sender, burnaddress, ((tokens * 2) / 30));\n', '    return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) \n', '{\n', '    balances[from] = safeSub(balances[from], tokens);\n', '    allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], (tokens - ((tokens * 2) / 30)));\n', '    balances[to] = safeAdd(balances[to], (tokens - ((tokens * 2) / 30)));    \n', '    _burn(burnaddress, tokens);\n', '        \n', '\temit Transfer(from, to, (tokens - ((tokens * 2) / 30)));\n', '\temit Transfer(from, burnaddress, ((tokens * 2) / 30));\n', '    return true; \n', '}\n', '\n', '    function _burn(address burnAddress, uint amount) public\n', '{\n', '    balances[burnAddress] = \n', '    safeAdd(balances[burnAddress], ((amount * 2) / 30));\n', '}\n', ' \n', '}']