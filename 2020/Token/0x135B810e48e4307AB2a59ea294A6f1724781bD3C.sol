['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '// File: contracts/components/WRC20Protocol.sol\n', '\n', 'pragma solidity 0.4.26;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract WRC20Protocol {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint supply);\n', '    is replaced with:\n', '    uint public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '\n', '    /**************************************\n', '     **\n', '     ** VARIABLES\n', '     **\n', '     **************************************/\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    /// total amount of tokens\n', '    uint public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath mul overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath div 0"); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath sub b > a");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath add overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath mod 0");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/components/StandardToken.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', 'contract StandardToken is WRC20Protocol {\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '    * @dev Fix for the ERC20 short address attack.\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4, "Payload size is incorrect");\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0), "Not permitted");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '// File: contracts/components/Owned.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    function transferOwner(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/tokenManager/MappingToken.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', 'contract MappingToken is StandardToken, Owned {\n', '    using SafeMath for uint;\n', '    /****************************************************************************\n', '     **\n', '     ** MODIFIERS\n', '     **\n', '     ****************************************************************************/\n', '    modifier onlyMeaningfulValue(uint value) {\n', '        require(value > 0, "Value is null");\n', '        _;\n', '    }\n', '\n', '    /****************************************************************************\n', '     **\n', '     ** EVENTS\n', '     **\n', '     ****************************************************************************/\n', '\n', '    ///@notice Initialize the TokenManager address\n', '    ///@dev Initialize the TokenManager address\n', '    ///@param tokenName The token name to be used\n', '    ///@param tokenSymbol The token symbol to be used\n', '    ///@param tokenDecimal The token decimals to be used\n', '    constructor(string tokenName, string tokenSymbol, uint8 tokenDecimal)\n', '        public\n', '    {\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = tokenDecimal;\n', '    }\n', '\n', '    /****************************************************************************\n', '     **\n', '     ** MANIPULATIONS\n', '     **\n', '     ****************************************************************************/\n', '\n', '    /// @notice Create token\n', '    /// @dev Create token\n', '    /// @param account Address will receive token\n', '    /// @param value Amount of token to be minted\n', '    function mint(address account, uint value)\n', '        external\n', '        onlyOwner\n', '        onlyMeaningfulValue(value)\n', '    {\n', '        balances[account] = balances[account].add(value);\n', '        totalSupply = totalSupply.add(value);\n', '\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /// @notice Burn token\n', '    /// @dev Burn token\n', '    /// @param account Address of whose token will be burnt\n', '    /// @param value Amount of token to be burnt\n', '    function burn(address account, uint value)\n', '        external\n', '        onlyOwner\n', '        onlyMeaningfulValue(value)\n', '    {\n', '        balances[account] = balances[account].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /// @notice update token name, symbol\n', '    /// @dev update token name, symbol\n', '    /// @param _name token new name\n', '    /// @param _symbol token new symbol\n', '    function update(string _name, string _symbol)\n', '        external\n', '        onlyOwner\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '}']