['// hevm: flattened sources of src/strategies/strategy-curve-scrv-v2.sol\n', 'pragma solidity >=0.4.23 >=0.6.0 <0.7.0 >=0.6.2 <0.7.0 >=0.6.7 <0.7.0;\n', '\n', '////// src/interfaces/controller.sol\n', '// SPDX-License-Identifier: MIT\n', '\n', '/* pragma solidity ^0.6.0; */\n', '\n', 'interface IController {\n', '    function jars(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function want(address) external view returns (address); // NOTE: Only StrategyControllerV2 implements this\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function withdraw(address, uint256) external;\n', '\n', '    function earn(address, uint256) external;\n', '}\n', '\n', '////// src/interfaces/curve.sol\n', '\n', '/* pragma solidity ^0.6.2; */\n', '\n', 'interface ICurveFi {\n', '    function get_virtual_price() external view returns (uint256);\n', '\n', '    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\n', '        external;\n', '\n', '    function remove_liquidity_imbalance(\n', '        uint256[4] calldata amounts,\n', '        uint256 max_burn_amount\n', '    ) external;\n', '\n', '    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\n', '        external;\n', '\n', '    function exchange(\n', '        int128 from,\n', '        int128 to,\n', '        uint256 _from_amount,\n', '        uint256 _min_to_amount\n', '    ) external;\n', '\n', '    function balances(int128) external view returns (uint256);\n', '}\n', '\n', 'interface ICurveGauge {\n', '    function deposit(uint256 _value) external;\n', '\n', '    function deposit(uint256 _value, address addr) external;\n', '\n', '    function balanceOf(address arg0) external view returns (uint256);\n', '\n', '    function withdraw(uint256 _value) external;\n', '\n', '    function withdraw(uint256 _value, bool claim_rewards) external;\n', '\n', '    function claim_rewards() external;\n', '\n', '    function claim_rewards(address addr) external;\n', '\n', '    function claimable_tokens(address addr) external returns (uint256);\n', '\n', '    function claimable_reward(address addr) external view returns (uint256);\n', '\n', '    function integrate_fraction(address arg0) external view returns (uint256);\n', '}\n', '\n', 'interface ICurveMintr {\n', '    function mint(address) external;\n', '\n', '    function minted(address arg0, address arg1) external view returns (uint256);\n', '}\n', '\n', '////// src/lib/safe-math.sol\n', '\n', '\n', '/* pragma solidity ^0.6.0; */\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '////// src/lib/erc20.sol\n', '\n', '// File: contracts/GSN/Context.sol\n', '\n', '\n', '\n', '/* pragma solidity ^0.6.0; */\n', '\n', '/* import "./safe-math.sol"; */\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '////// src/interfaces/jar.sol\n', '\n', '/* pragma solidity ^0.6.2; */\n', '\n', '/* import "../lib/erc20.sol"; */\n', '\n', 'interface IJar is IERC20 {\n', '    function token() external view returns (address);\n', '\n', '    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\n', '\n', '    function getRatio() external view returns (uint256);\n', '\n', '    function deposit(uint256) external;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function earn() external;\n', '}\n', '\n', '////// src/interfaces/uniswapv2.sol\n', '\n', '\n', '\n', '/* pragma solidity ^0.6.2; */\n', '\n', 'interface UniswapRouterV2 {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface UniswapPair {\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestamp\n', '        );\n', '}\n', '\n', '////// src/strategies/strategy-curve-scrv-v2.sol\n', '// https://github.com/iearn-finance/contracts/blob/master/contracts/strategies/StrategyCurveYCRVVoter.sol\n', '\n', '\n', '/* pragma solidity ^0.6.2; */\n', '\n', '/* import "../lib/erc20.sol"; */\n', '/* import "../lib/safe-math.sol"; */\n', '\n', '/* import "../interfaces/jar.sol"; */\n', '/* import "../interfaces/curve.sol"; */\n', '/* import "../interfaces/uniswapv2.sol"; */\n', '/* import "../interfaces/controller.sol"; */\n', '\n', 'contract StrategyCurveSCRVv2 {\n', '    // v2 Uses uniswap for less gas\n', '    // We can roll back to v1 if the liquidity is there\n', '\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    // sCRV\n', '    address public constant want = 0xC25a3A3b969415c80451098fa907EC722572917F;\n', '\n', '    // susdv2 pool\n', '    address public constant curve = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\n', '\n', "    // tokens we're farming\n", '    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n', '    address public constant snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\n', '\n', '    // curve dao\n', '    address public constant gauge = 0xA90996896660DEcC6E997655E065b23788857849;\n', '    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n', '\n', '    // stablecoins\n', '    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address public constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '    address public constant susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\n', '\n', '    // pickle token\n', '    address public constant pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\n', '\n', '    // weth (for uniswapv2 xfers)\n', '    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // burn address\n', '    address public constant burn = 0x000000000000000000000000000000000000dEaD;\n', '\n', '    // dex\n', '    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    // How much CRV tokens to keep\n', '    uint256 public keepCRV = 1000;\n', '    uint256 public constant keepCRVMax = 10000;\n', '\n', '    // Fees ~4.93% in total\n', '    // - 2.94%  performance fee\n', '    // - 1.5%   used to burn pickles\n', '    // - 0.5%   gas compensation fee (for caller)\n', '\n', '    // 3% of 98% = 2.94% of original 100%\n', '    uint256 public performanceFee = 300;\n', '    uint256 public constant performanceMax = 10000;\n', '\n', '    uint256 public burnFee = 150;\n', '    uint256 public constant burnMax = 10000;\n', '\n', '    uint256 public callerFee = 50;\n', '    uint256 public constant callerMax = 10000;\n', '\n', '    uint256 public withdrawalFee = 50;\n', '    uint256 public constant withdrawalMax = 10000;\n', '\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '\n', '    constructor(\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller\n', '    ) public {\n', '        governance = _governance;\n', '        strategist = _strategist;\n', '        controller = _controller;\n', '    }\n', '\n', '    // **** Views ****\n', '\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfPool() public view returns (uint256) {\n', '        return ICurveGauge(gauge).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return balanceOfWant().add(balanceOfPool());\n', '    }\n', '\n', '    function getName() external pure returns (string memory) {\n', '        return "StrategyCurveSCRVv1";\n', '    }\n', '\n', '    function getMostPremiumStablecoin() public view returns (address, uint256) {\n', '        uint256[] memory balances = new uint256[](4);\n', '        balances[0] = ICurveFi(curve).balances(0); // DAI\n', '        balances[1] = ICurveFi(curve).balances(1).mul(10**12); // USDC\n', '        balances[2] = ICurveFi(curve).balances(2).mul(10**12); // USDT\n', '        balances[3] = ICurveFi(curve).balances(3); // sUSD\n', '\n', '        // DAI\n', '        if (\n', '            balances[0] < balances[1] &&\n', '            balances[0] < balances[2] &&\n', '            balances[0] < balances[3]\n', '        ) {\n', '            return (dai, 0);\n', '        }\n', '\n', '        // USDC\n', '        if (\n', '            balances[1] < balances[0] &&\n', '            balances[1] < balances[2] &&\n', '            balances[1] < balances[3]\n', '        ) {\n', '            return (usdc, 1);\n', '        }\n', '\n', '        // USDT\n', '        if (\n', '            balances[2] < balances[0] &&\n', '            balances[2] < balances[1] &&\n', '            balances[2] < balances[3]\n', '        ) {\n', '            return (usdt, 2);\n', '        }\n', '\n', '        // SUSD\n', '        if (\n', '            balances[3] < balances[0] &&\n', '            balances[3] < balances[1] &&\n', '            balances[3] < balances[2]\n', '        ) {\n', '            return (susd, 3);\n', '        }\n', '\n', "        // If they're somehow equal, we just want DAI\n", '        return (dai, 0);\n', '    }\n', '\n', '    // Manually change this function to view on the abi\n', "    // This is due to 'gauge'.claimable_token function\n", '    // Which fucks everything up\n', '    function getExpectedRewards()\n', '        public\n', '        returns (\n', '            address, // stablecoin address\n', '            uint256, // caller rewards\n', '            uint256 // amount of pickle to burn\n', '        )\n', '    {\n', '        // stablecoin we want to convert to\n', '        (address to, ) = getMostPremiumStablecoin();\n', '\n', '        // Return amounts\n', '        uint256 _to;\n', '        uint256 _pickleBurn;\n', '        uint256 _retAmount;\n', '\n', '        // CRV\n', '        uint256 _crv = ICurveGauge(gauge).claimable_tokens(address(this));\n', '        uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\n', '        if (_crv > 0) {\n', '            _crv = _crv.sub(_keepCRV);\n', '            _retAmount = _getExpectedReturn(crv, to, _crv);\n', '            _to = _to.add(_retAmount);\n', '        }\n', '\n', '        // SNX\n', '        uint256 _snx = ICurveGauge(gauge).claimable_reward(address(this));\n', '        if (_snx > 0) {\n', '            _retAmount = _getExpectedReturn(snx, to, _snx);\n', '        }\n', '\n', '        if (_to > 0) {\n', '            _pickleBurn = _getExpectedReturn(\n', '                to,\n', '                pickle,\n', '                _to.mul(burnFee).div(burnMax)\n', '            );\n', '        }\n', '\n', '        return (\n', '            to,\n', '            _to.mul(callerFee).div(callerMax), // Caller rewards\n', '            _pickleBurn // BURN Pickle amount\n', '        );\n', '    }\n', '\n', '    // **** Setters ****\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setPerformanceFee(uint256 _performanceFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        performanceFee = _performanceFee;\n', '    }\n', '\n', '    function setCallerFee(uint256 _callerFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        callerFee = _callerFee;\n', '    }\n', '\n', '    function setBurnFee(uint256 _burnFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        burnFee = _burnFee;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setKeepCRV(uint256 _keepCRV) external {\n', '        require(msg.sender == governance, "!governance");\n', '        keepCRV = _keepCRV;\n', '    }\n', '\n', '    // **** State Mutations ****\n', '\n', '    function deposit() public {\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            IERC20(want).safeApprove(gauge, 0);\n', '            IERC20(want).approve(gauge, _want);\n', '            ICurveGauge(gauge).deposit(_want);\n', '        }\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        require(crv != address(_asset), "crv");\n', '        require(snx != address(_asset), "snx");\n', '        require(dai != address(_asset), "dai");\n', '        require(usdc != address(_asset), "usdc");\n', '        require(usdt != address(_asset), "usdt");\n', '        require(susd != address(_asset), "susd");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a jar withdrawal\n', '    function withdraw(uint256 _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint256 _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\n', '        uint256 _fee = _amount.mul(withdrawalFee).div(withdrawalMax);\n', '\n', '        IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\n', '        address _jar = IController(controller).jars(address(want));\n', '        require(_jar != address(0), "!jar"); // additional protection so we don\'t burn the funds\n', '\n', '        IERC20(want).safeTransfer(_jar, _amount.sub(_fee));\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        address _jar = IController(controller).jars(address(want));\n', '        require(_jar != address(0), "!jar"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_jar, balance);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        ICurveGauge(gauge).withdraw(\n', '            ICurveGauge(gauge).balanceOf(address(this))\n', '        );\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal returns (uint256) {\n', '        ICurveGauge(gauge).withdraw(_amount);\n', '        return _amount;\n', '    }\n', '\n', '    function brine() public {\n', '        harvest();\n', '    }\n', '\n', '    function harvest() public {\n', '        // Anyone can harvest it at any given time.\n', '        // I understand the possibility of being frontrun\n', '        // But ETH is a dark forest, and I wanna see how this plays out\n', '        // i.e. will be be heavily frontrunned?\n', '        //      if so, a new strategy will be deployed.\n', '\n', '        // stablecoin we want to convert to\n', '        (address to, uint256 toIndex) = getMostPremiumStablecoin();\n', '\n', '        // Collects crv tokens\n', "        // Don't bother voting in v1\n", '        ICurveMintr(mintr).mint(gauge);\n', '        uint256 _crv = IERC20(crv).balanceOf(address(this));\n', '        if (_crv > 0) {\n', '            // x% is sent back to the rewards holder\n', '            // to be used to lock up in as veCRV in a future date\n', '            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\n', '            IERC20(crv).safeTransfer(\n', '                IController(controller).rewards(),\n', '                _keepCRV\n', '            );\n', '            _crv = _crv.sub(_keepCRV);\n', '\n', '            _swap(crv, to, _crv);\n', '        }\n', '\n', '        // Collects SNX tokens\n', '        ICurveGauge(gauge).claim_rewards(address(this));\n', '        uint256 _snx = IERC20(snx).balanceOf(address(this));\n', '        if (_snx > 0) {\n', '            _swap(snx, to, _snx);\n', '        }\n', '\n', "        // Adds liquidity to curve.fi's susd pool\n", '        // to get back want (scrv)\n', '        uint256 _to = IERC20(to).balanceOf(address(this));\n', '        if (_to > 0) {\n', '            // Fees (in stablecoin)\n', '            // 0.5% sent to msg.sender to refund gas\n', '            uint256 _callerFee = _to.mul(callerFee).div(callerMax);\n', '            IERC20(to).safeTransfer(msg.sender, _callerFee);\n', '\n', '            // 1.5% used to buy and BURN pickles\n', '            uint256 _burnFee = _to.mul(burnFee).div(burnMax);\n', '            _swap(to, pickle, _burnFee);\n', '            IERC20(pickle).transfer(\n', '                burn,\n', '                IERC20(pickle).balanceOf(address(this))\n', '            );\n', '\n', '            // Supply to curve to get sCRV\n', '            _to = _to.sub(_callerFee).sub(_burnFee);\n', '            IERC20(to).safeApprove(curve, 0);\n', '            IERC20(to).safeApprove(curve, _to);\n', '            uint256[4] memory liquidity;\n', '            liquidity[toIndex] = _to;\n', '            ICurveFi(curve).add_liquidity(liquidity, 0);\n', '        }\n', '\n', '        // We want to get back sCRV\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            // Fees (in sCRV)\n', '            // 3% performance fee\n', '            // This 3% comes AFTER deducing 2%\n', '            // So in reality its actually around 2.94%\n', '            // 0.98 * 0.03 = 0.0294\n', '            IERC20(want).safeTransfer(\n', '                IController(controller).rewards(),\n', '                _want.mul(performanceFee).div(performanceMax)\n', '            );\n', '\n', '            deposit();\n', '        }\n', '    }\n', '\n', '    function _swap(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        // Swap with uniswap\n', '        IERC20(_from).safeApprove(univ2Router2, 0);\n', '        IERC20(_from).safeApprove(univ2Router2, _amount);\n', '\n', '        address[] memory path = new address[](3);\n', '        path[0] = _from;\n', '        path[1] = weth;\n', '        path[2] = _to;\n', '\n', '        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\n', '            _amount,\n', '            0,\n', '            path,\n', '            address(this),\n', '            now.add(60)\n', '        );\n', '    }\n', '\n', '    function _getExpectedReturn(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal view returns (uint256) {\n', '        address[] memory path = new address[](3);\n', '        path[0] = _from;\n', '        path[1] = weth;\n', '        path[2] = _to;\n', '\n', '        uint256[] memory ins = UniswapRouterV2(univ2Router2).getAmountsOut(\n', '            _amount,\n', '            path\n', '        );\n', '\n', '        return ins[2];\n', '    }\n', '}']