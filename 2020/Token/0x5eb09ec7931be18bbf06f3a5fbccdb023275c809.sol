['pragma solidity ^0.4.19;\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', 'contract TokenERC20 {\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals = 18;\n', '\tuint256 public totalSupply;\n', '\n', '\t// 用mapping保存每个地址对应的余额\n', '\tmapping (address => uint256) public balanceOf;\n', '\t// 存储对账号的控制\n', '\tmapping (address => mapping (address => uint256)) public allowance;\n', '\t// 事件，用来通知客户端交易发生\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\t// 事件，用来通知客户端代币被消费\n', '\tevent Burn(address indexed from, uint256 value);\n', '\t\n', '\t/*\n', '\t*初始化构造\n', '\t*/\n', '\tfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // 供应的份额，份额跟最小的代币单位有关，份额 = 币\n', '\t\tbalanceOf[msg.sender] = totalSupply;                // 创建者拥有所有的代币\n', '\t\tname = tokenName;                                   // 代币名称\n', '\t\tsymbol = tokenSymbol;                               // 代币符号\n', '}\n', '\n', '\t//代币交易转移的内部实现\n', '\tfunction _transfer(address _from, address _to, uint _value) internal {\n', '\t\t// 确保目标地址不为0x0，因为0x0地址代表销毁\n', '\t\trequire(_to != 0x0);\n', '\t\t// 检查发送者余额\n', '\t\trequire(balanceOf[_from] >= _value);\n', '\t\t// 确保转移为正数个\n', '\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n', '\t\t\n', '\t\t// 以下用来检查交易，\n', '\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\t\t// Subtract from the sender\n', '\t\tbalanceOf[_from] -= _value;\n', '\t\t\n', '\t\t// Add the same to the recipient\n', '\t\tbalanceOf[_to] += _value;\n', '\t\tTransfer(_from, _to, _value);\n', '\t\t\n', '\t\t// 用assert来检查代码逻辑。\n', '\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '}\n', '\n', '\t/*****\n', '\t**代币交易转移\n', '\t**从自己（创建交易者）账号发送`_value`个代币到 `_to`账号\n', '\t**@param _to 接收者地址\n', '\t**@param _value 转移数额\n', '\t**/\n', '\tfunction transfer(address _to, uint256 _value) public {\n', '\t\t_transfer(msg.sender, _to, _value);\n', '\t }\n', '\t \n', '\t /*****\n', '\t**账号之间代币交易转移\n', '\t**@param _from 发送者地址\n', '\t**@param _to 接收者地址\n', '\t**@param _value 转移数额\n', '\t**/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\t\tallowance[_from][msg.sender] -= _value;\n', '\t\t_transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\t /*****\n', '\t**设置某个地址（合约）可以创建交易者名义花费的代币数\n', '\t**允许发送者`_spender` 花费不多于 `_value` 个代币\n', '\t**@param _spender The address authorized to spend\n', '\t**@param _value the max amount they can spend\n', '\t**/\n', '\tfunction approve(address _spender, uint256 _value) public\n', '\t\treturns (bool success) {\n', '\t\tallowance[msg.sender][_spender] = _value;\n', '\t\treturn true;\n', '\t}\n', '\t/*****\n', '\t**设置允许一个地址（合约）以我（创建交易者）的名义可最多花费的代币数\n', '\t**@param _spender 被授权的地址（合约）\n', '\t**@param _value 最大可花费代币数\n', '\t**@param _extraData 发送给合约的附加数据\n', '\t**/\n', '\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '\t public\n', '\t returns (bool success) {\n', '\t tokenRecipient spender = tokenRecipient(_spender);\n', '\t if (approve(_spender, _value)) {\n', '\t\t// 通知合约\n', '\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n', '\t\treturn true;\n', '\t\t}\n', '\t }\n', '\t///销毁我（创建交易者）账户中指定个代币\n', '\tfunction burn(uint256 _value) public returns (bool success) {\n', '\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '\t\ttotalSupply -= _value;                      // Updates totalSupply\n', '\t\tBurn(msg.sender, _value);\n', '\t\treturn true;\n', '\t}\n', '\t/*****\n', '\t**销毁用户账户中指定个代币\n', '\t**Remove `_value` tokens from the system irreversibly on behalf of `_from\n', '\t**@param _from the address of the sender\n', '\t**@param _value the amount of money to burn\n', '\t**/\n', '\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '\t\ttotalSupply -= _value;                              // Update totalSupply\n', '\t\tBurn(_from, _value);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.4.19;\n', ' \n', 'contract Token {\n', '    /// token总量，默认会为public变量生成一个getter函数接口，名称为totalSupply().\n', '    uint256 public totalSupply;\n', ' \n', '    /// 获取账户_owner拥有token的数量\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', ' \n', '    //从消息发送者账户中往_to账户转数量为_value的token\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', ' \n', '    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n', '    function transferFrom(address _from, address _to, uint256 _value) returns  (bool success);\n', ' \n', '    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', ' \n', '    //获取账户_spender可以从账户_owner中转出token的数量\n', '    function allowance(address _owner, address _spender) constant returns  (uint256 remaining);\n', ' \n', '    //发生转账时必须要触发的事件 \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', ' \n', '    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']