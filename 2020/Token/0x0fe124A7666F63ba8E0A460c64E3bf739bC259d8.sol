['// SPDX-License-Identifier: MIT\n', '\n', '// File: contracts/true-currencies-new/ProxyStorage.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * Defines the storage layout of the token implementation contract. Any\n', ' * newly declared state variables in future upgrades should be appended\n', ' * to the bottom. Never remove state variables from this list, however variables\n', ' * can be renamed. Please add _Deprecated to deprecated variables.\n', ' */\n', 'contract ProxyStorage {\n', '    address public owner;\n', '    address public pendingOwner;\n', '\n', '    bool initialized;\n', '\n', '    address balances_Deprecated;\n', '    address allowances_Deprecated;\n', '\n', '    uint256 _totalSupply;\n', '\n', '    bool private paused_Deprecated = false;\n', '    address private globalPause_Deprecated;\n', '\n', '    uint256 public burnMin = 0;\n', '    uint256 public burnMax = 0;\n', '\n', '    address registry_Deprecated;\n', '\n', '    string name_Deprecated;\n', '    string symbol_Deprecated;\n', '\n', '    uint256[] gasRefundPool_Deprecated;\n', '    uint256 private redemptionAddressCount_Deprecated;\n', '    uint256 minimumGasPriceForFutureRefunds_Deprecated;\n', '\n', '    mapping(address => uint256) _balances;\n', '    mapping(address => mapping(address => uint256)) _allowances;\n', '    mapping(bytes32 => mapping(address => uint256)) attributes_Deprecated;\n', '\n', '    // reward token storage\n', '    mapping(address => address) finOps_Deprecated;\n', '    mapping(address => mapping(address => uint256)) finOpBalances_Deprecated;\n', '    mapping(address => uint256) finOpSupply_Deprecated;\n', '\n', '    // true reward allocation\n', '    // proportion: 1000 = 100%\n', '    struct RewardAllocation {\n', '        uint256 proportion;\n', '        address finOp;\n', '    }\n', '    mapping(address => RewardAllocation[]) _rewardDistribution_Deprecated;\n', '    uint256 maxRewardProportion_Deprecated = 1000;\n', '\n', '    mapping(address => bool) isBlacklisted;\n', '    mapping(address => bool) public canBurn;\n', '\n', '    /* Additionally, we have several keccak-based storage locations.\n', '     * If you add more keccak-based storage mappings, such as mappings, you must document them here.\n', '     * If the length of the keccak input is the same as an existing mapping, it is possible there could be a preimage collision.\n', '     * A preimage collision can be used to attack the contract by treating one storage location as another,\n', '     * which would always be a critical issue.\n', '     * Carefully examine future keccak-based storage to ensure there can be no preimage collisions.\n', '     *******************************************************************************************************\n', '     ** length     input                                                         usage\n', '     *******************************************************************************************************\n', '     ** 19         "trueXXX.proxy.owner"                                         Proxy Owner\n', '     ** 27         "trueXXX.pending.proxy.owner"                                 Pending Proxy Owner\n', '     ** 28         "trueXXX.proxy.implementation"                                Proxy Implementation\n', '     ** 32         uint256(11)                                                   gasRefundPool_Deprecated\n', '     ** 64         uint256(address),uint256(14)                                  balanceOf\n', '     ** 64         uint256(address),keccak256(uint256(address),uint256(15))      allowance\n', '     ** 64         uint256(address),keccak256(bytes32,uint256(16))               attributes\n', '     **/\n', '}\n', '\n', '// File: contracts/true-currencies-new/ClaimableOwnable.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title ClamableOwnable\n', ' * @dev The ClamableOwnable contract is a copy of Claimable Contract by Zeppelin.\n', ' * and provides basic authorization control functions. Inherits storage layout of\n', ' * ProxyStorage.\n', ' */\n', 'contract ClaimableOwnable is ProxyStorage {\n', '    /**\n', '     * @dev emitted when ownership is transferred\n', '     * @param previousOwner previous owner of this contract\n', '     * @param newOwner new owner of this contract\n', '     */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev sets the original `owner` of the contract to the sender\n', '     * at construction. Must then be reinitialized\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "only Owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner, "only pending owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/true-currencies-new/ERC20.sol\n', '\n', '/**\n', ' * @notice This is a copy of openzeppelin ERC20 contract with removed state variables.\n', ' * Removing state variables has been necessary due to proxy pattern usage.\n', ' * Changes to Openzeppelin ERC20 https://github.com/OpenZeppelin/openzeppelin-contracts/blob/de99bccbfd4ecd19d7369d01b070aa72c64423c9/contracts/token/ERC20/ERC20.sol:\n', ' * - Remove state variables _name, _symbol, _decimals\n', ' * - Use state variables _balances, _allowances, _totalSupply from ProxyStorage\n', ' * - Remove constructor\n', ' * - Solidity version changed from ^0.6.0 to 0.6.10\n', ' * - Contract made abstract\n', ' *\n', ' * See also: ClaimableOwnable.sol and ProxyStorage.sol\n', ' */\n', '\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'abstract contract ERC20 is ClaimableOwnable, Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public virtual pure returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public virtual pure returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public virtual pure returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    // solhint-disable-next-line no-empty-blocks\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/true-currencies-new/ReclaimerToken.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title ReclaimerToken\n', ' * @dev ERC20 token which allows owner to reclaim ERC20 tokens\n', ' * or ether sent to this contract\n', ' */\n', 'abstract contract ReclaimerToken is ERC20 {\n', '    /**\n', '     * @dev send all eth balance in the contract to another address\n', '     * @param _to address to send eth balance to\n', '     */\n', '    function reclaimEther(address payable _to) external onlyOwner {\n', '        _to.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev send all token balance of an arbitrary erc20 token\n', '     * in the contract to another address\n', '     * @param token token to reclaim\n', '     * @param _to address to send eth balance to\n', '     */\n', '    function reclaimToken(IERC20 token, address _to) external onlyOwner {\n', '        uint256 balance = token.balanceOf(address(this));\n', '        token.transfer(_to, balance);\n', '    }\n', '}\n', '\n', '// File: contracts/true-currencies-new/BurnableTokenWithBounds.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title BurnableTokenWithBounds\n', ' * @dev Burning functions as redeeming money from the system.\n', ' * The platform will keep track of who burns coins,\n', ' * and will send them back the equivalent amount of money (rounded down to the nearest cent).\n', ' */\n', 'abstract contract BurnableTokenWithBounds is ReclaimerToken {\n', '    /**\n', '     * @dev Emitted when `value` tokens are burnt from one account (`burner`)\n', '     * @param burner address which burned tokens\n', '     * @param value amount of tokens burned\n', '     */\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when new burn bounds were set\n', '     * @param newMin new minimum burn amount\n', '     * @param newMax new maximum burn amount\n', '     * @notice `newMin` should never be greater than `newMax`\n', '     */\n', '    event SetBurnBounds(uint256 newMin, uint256 newMax);\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `msg.sender`, reducing the\n', '     * total supply.\n', '     * @param amount amount of tokens to burn\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     * Emits a {Burn} event with `burner` set to `msg.sender`\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `msg.sender` must have at least `amount` tokens.\n', '     *\n', '     */\n', '    function burn(uint256 amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Change the minimum and maximum amount that can be burned at once.\n', '     * Burning may be disabled by setting both to 0 (this will not be done\n', "     * under normal operation, but we can't add checks to disallow it without\n", '     * losing a lot of flexibility since burning could also be as good as disabled\n', "     * by setting the minimum extremely high, and we don't want to lock\n", '     * in any particular cap for the minimum)\n', '     * @param _min minimum amount that can be burned at once\n', '     * @param _max maximum amount that can be burned at once\n', '     */\n', '    function setBurnBounds(uint256 _min, uint256 _max) external onlyOwner {\n', '        require(_min <= _max, "BurnableTokenWithBounds: min > max");\n', '        burnMin = _min;\n', '        burnMax = _max;\n', '        emit SetBurnBounds(_min, _max);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if amount is within allowed burn bounds and\n', '     * destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     * @param account account to burn tokens for\n', '     * @param amount amount of tokens to burn\n', '     *\n', '     * Emits a {Burn} event\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual override {\n', '        require(amount >= burnMin, "BurnableTokenWithBounds: below min burn bound");\n', '        require(amount <= burnMax, "BurnableTokenWithBounds: exceeds max burn bound");\n', '\n', '        super._burn(account, amount);\n', '        emit Burn(account, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/true-currencies-new/GasRefund.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Gas Reclaim Legacy\n', ' *\n', ' * Note: this contract does not affect any of the token logic. It merely\n', ' * exists so the TokenController (owner) can reclaim the sponsored gas\n', ' *\n', ' * Previously TrueCurrency has a feature called "gas boost" which allowed\n', ' * us to sponsor gas by setting non-empty storage slots to 1.\n', ' * We are depricating this feature, but there is a bunch of gas saved\n', ' * from years of sponsoring gas. This contract is meant to allow the owner\n', ' * to take advantage of this leftover gas. Once all the slots are used,\n', ' * this contract can be removed from TrueCurrency.\n', ' *\n', ' * Utilitzes the gas refund mechanism in EVM. Each time an non-empty\n', ' * storage slot is set to 0, evm will refund 15,000 to the sender.\n', ' * Also utilized the refund for selfdestruct, see gasRefund39\n', ' *\n', ' */\n', 'abstract contract GasRefund {\n', '    /**\n', '     * @dev Refund 15,000 gas per slot.\n', '     * @param amount number of slots to free\n', '     */\n', '    function gasRefund15(uint256 amount) internal {\n', '        // refund gas\n', '        assembly {\n', '            // get number of free slots\n', '            let offset := sload(0xfffff)\n', '\n', '            // make sure there are enough slots\n', '            if lt(offset, amount) {\n', '                amount := offset\n', '            }\n', '            if eq(amount, 0) {\n', '                stop()\n', '            }\n', '            let location := add(offset, 0xfffff)\n', '            let end := sub(location, amount)\n', '            // loop until amount is reached\n', '            // i = storage location\n', '            for {\n', '\n', '            } gt(location, end) {\n', '                location := sub(location, 1)\n', '            } {\n', '                // set storage location to zero\n', '                // this refunds 15,000 gas\n', '                sstore(location, 0)\n', '            }\n', '            // store new number of free slots\n', '            sstore(0xfffff, sub(offset, amount))\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev use smart contract self-destruct to refund gas\n', '     * will refund 39,000 * amount gas\n', '     */\n', '    function gasRefund39(uint256 amount) internal {\n', '        assembly {\n', '            // get amount of gas slots\n', '            let offset := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n', '            // make sure there are enough slots\n', '            if lt(offset, amount) {\n', '                amount := offset\n', '            }\n', '            if eq(amount, 0) {\n', '                stop()\n', '            }\n', '            // first sheep pointer\n', '            let location := sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, offset)\n', '            // last sheep pointer\n', '            let end := add(location, amount)\n', '\n', '            for {\n', '\n', '            } lt(location, end) {\n', '                location := add(location, 1)\n', '            } {\n', '                // load sheep address\n', '                let sheep := sload(location)\n', '                // call selfdestruct on sheep\n', '                pop(call(gas(), sheep, 0, 0, 0, 0, 0))\n', '                // clear sheep address\n', '                sstore(location, 0)\n', '            }\n', '\n', '            sstore(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, sub(offset, amount))\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return the remaining sponsored gas slots\n', '     */\n', '    function remainingGasRefundPool() public view returns (uint256 length) {\n', '        assembly {\n', '            length := sload(0xfffff)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return the remaining sheep slots\n', '     */\n', '    function remainingSheepRefundPool() public view returns (uint256 length) {\n', '        assembly {\n', '            length := sload(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/true-currencies-new/TrueCurrency.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title TrueCurrency\n', ' * @dev TrueCurrency is an ERC20 with blacklist & redemption addresses\n', ' *\n', ' * TrueCurrency is a compliant stablecoin with blacklist and redemption\n', ' * addresses. Only the owner can blacklist accounts. Redemption addresses\n', ' * are assigned automatically to the first 0x100000 addresses. Sending\n', ' * tokens to the redemption address will trigger a burn operation. Only\n', ' * the owner can mint or blacklist accounts.\n', ' *\n', ' * This contract is owned by the TokenController, which manages token\n', ' * minting & admin functionality. See TokenController.sol\n', ' *\n', ' * See also: BurnableTokenWithBounds.sol\n', ' *\n', ' * ~~~~ Features ~~~~\n', ' *\n', ' * Redemption Addresses\n', ' * - The first 0x100000 addresses are redemption addresses\n', ' * - Tokens sent to redemption addresses are burned\n', ' * - Redemptions are tracked off-chain\n', ' * - Cannot mint tokens to redemption addresses\n', ' *\n', ' * Blacklist\n', ' * - Owner can blacklist accounts in accordance with local regulatory bodies\n', ' * - Only a court order will merit a blacklist; blacklisting is extremely rare\n', ' *\n', ' * Burn Bounds & CanBurn\n', ' * - Owner can set min & max burn amounts\n', ' * - Only accounts flagged in canBurn are allowed to burn tokens\n', ' * - canBurn prevents tokens from being sent to the incorrect address\n', ' *\n', ' * Reclaimer Token\n', ' * - ERC20 Tokens and Ether sent to this contract can be reclaimed by the owner\n', ' */\n', 'abstract contract TrueCurrency is BurnableTokenWithBounds, GasRefund {\n', '    uint256 constant CENT = 10**16;\n', '    uint256 constant REDEMPTION_ADDRESS_COUNT = 0x100000;\n', '\n', '    /**\n', '     * @dev Emitted when account blacklist status changes\n', '     */\n', '    event Blacklisted(address indexed account, bool isBlacklisted);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are minted for `to`\n', '     * @param to address to mint tokens for\n', '     * @param value amount of tokens to be minted\n', '     */\n', '    event Mint(address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     * @param account address to mint tokens for\n', '     * @param amount amount of tokens to be minted\n', '     *\n', '     * Emits a {Mint} event\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` cannot be blacklisted.\n', '     * - `account` cannot be a redemption address.\n', '     */\n', '    function mint(address account, uint256 amount) external onlyOwner {\n', '        require(!isBlacklisted[account], "TrueCurrency: account is blacklisted");\n', '        require(!isRedemptionAddress(account), "TrueCurrency: account is a redemption address");\n', '        _mint(account, amount);\n', '        emit Mint(account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Set blacklisted status for the account.\n', '     * @param account address to set blacklist flag for\n', '     * @param _isBlacklisted blacklist flag value\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `msg.sender` should be owner.\n', '     */\n', '    function setBlacklisted(address account, bool _isBlacklisted) external onlyOwner {\n', '        require(uint256(account) >= REDEMPTION_ADDRESS_COUNT, "TrueCurrency: blacklisting of redemption address is not allowed");\n', '        isBlacklisted[account] = _isBlacklisted;\n', '        emit Blacklisted(account, _isBlacklisted);\n', '    }\n', '\n', '    /**\n', '     * @dev Set canBurn status for the account.\n', '     * @param account address to set canBurn flag for\n', '     * @param _canBurn canBurn flag value\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `msg.sender` should be owner.\n', '     */\n', '    function setCanBurn(address account, bool _canBurn) external onlyOwner {\n', '        canBurn[account] = _canBurn;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if neither account is blacklisted before performing transfer\n', '     * If transfer recipient is a redemption address, burns tokens\n', '     * @notice Transfer to redemption address will burn tokens with a 1 cent precision\n', '     * @param sender address of sender\n', '     * @param recipient address of recipient\n', '     * @param amount amount of tokens to transfer\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual override {\n', '        require(!isBlacklisted[sender], "TrueCurrency: sender is blacklisted");\n', '        require(!isBlacklisted[recipient], "TrueCurrency: recipient is blacklisted");\n', '\n', '        if (isRedemptionAddress(recipient)) {\n', '            super._transfer(sender, recipient, amount.sub(amount.mod(CENT)));\n', '            _burn(recipient, amount.sub(amount.mod(CENT)));\n', '        } else {\n', '            super._transfer(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Requere neither accounts to be blacklisted before approval\n', '     * @param owner address of owner giving approval\n', '     * @param spender address of spender to approve for\n', '     * @param amount amount of tokens to approve\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal override {\n', '        require(!isBlacklisted[owner], "TrueCurrency: tokens owner is blacklisted");\n', '        require(!isBlacklisted[spender] || amount == 0, "TrueCurrency: tokens spender is blacklisted");\n', '\n', '        super._approve(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Check if tokens can be burned at address before burning\n', '     * @param account account to burn tokens from\n', '     * @param amount amount of tokens to burn\n', '     */\n', '    function _burn(address account, uint256 amount) internal override {\n', '        require(canBurn[account], "TrueCurrency: cannot burn from this address");\n', '        super._burn(account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev First 0x100000-1 addresses (0x0000000000000000000000000000000000000001 to 0x00000000000000000000000000000000000fffff)\n', '     * are the redemption addresses.\n', '     * @param account address to check is a redemption address\n', '     *\n', '     * All transfers to redemption address will trigger token burn.\n', '     *\n', '     * @notice For transfer to succeed, canBurn must be true for redemption address\n', '     *\n', '     * @return is `account` a redemption address\n', '     */\n', '    function isRedemptionAddress(address account) internal pure returns (bool) {\n', '        return uint256(account) < REDEMPTION_ADDRESS_COUNT && uint256(account) != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev reclaim gas from legacy gas refund #1\n', '     * will refund 15,000 * amount gas to sender (minus exection cost)\n', '     * If gas pool is empty, refund 39,000 * amount gas by calling selfdestruct\n', '     */\n', '    function refundGas(uint256 amount) external onlyOwner {\n', '        if (remainingGasRefundPool() > 0) {\n', '            gasRefund15(amount);\n', '        } else {\n', '            gasRefund39(amount.div(3));\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/true-currencies-new/TrueCAD.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title TrueCAD\n', ' * @dev This is the top-level ERC20 contract, but most of the interesting functionality is\n', ' * inherited - see the documentation on the corresponding contracts.\n', ' */\n', 'contract TrueCAD is TrueCurrency {\n', '    uint8 constant DECIMALS = 18;\n', '    uint8 constant ROUNDING = 2;\n', '\n', '    function decimals() public override pure returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '\n', '    function rounding() public pure returns (uint8) {\n', '        return ROUNDING;\n', '    }\n', '\n', '    function name() public override pure returns (string memory) {\n', '        return "TrueCAD";\n', '    }\n', '\n', '    function symbol() public override pure returns (string memory) {\n', '        return "TCAD";\n', '    }\n', '}']