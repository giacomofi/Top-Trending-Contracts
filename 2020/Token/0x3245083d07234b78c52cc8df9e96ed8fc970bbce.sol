['// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IVestingContract {\n', '    \n', '    function move(address to, uint256 amount) external;\n', '    function vestedTokens(address recipient) external view returns(uint256);\n', '}\n', '\n', 'contract HervezVestingSafeDistributor {\n', '    \n', '    address public owner;\n', '    address public distributor;\n', '    address public vestingContract;\n', '\n', '    event ExecOk(bytes returnData);\n', '    event ExecFail(bytes returnData);\n', '    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n', '    event DistributorChanged(address indexed oldOwner, address indexed newOwner);\n', '\n', '    constructor (address _owner, address _distributor, address _vestingContract) public {\n', '        owner = _owner;\n', '        distributor = _distributor;\n', '        vestingContract = _vestingContract;\n', '    }\n', '\n', '    modifier onlyDistributor() {\n', '        require(distributor == msg.sender, "HervezVestingSafeDistributor: caller is not the ditributor");\n', '        _;\n', '    }\n', '    \n', '    function move(address to, uint256 amount) onlyDistributor external {\n', '        uint256 maxVestedTokens = IVestingContract(vestingContract).vestedTokens(address(this));\n', '        require(amount < maxVestedTokens);\n', '        IVestingContract(vestingContract).move(to,amount);\n', '    }\n', '\n', '    function changeDistributor(address newDistributor) onlyDistributor external {\n', '        distributor = newDistributor;\n', '        emit DistributorChanged(msg.sender, newDistributor);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender, "HervezVestingSafeDistributor: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    function execute(address destination, uint256 value, bytes memory data) onlyOwner external {\n', '        (bool succcess, bytes memory returnData)  = destination.call{value: value}(data);\n', '        if (succcess) {\n', '            emit ExecOk(returnData);\n', '        } else {\n', '            emit ExecFail(returnData);\n', '        }\n', '    }\n', '    \n', '    function changeOwner(address newOwner) onlyOwner external {\n', '        owner = newOwner;\n', '        emit OwnerChanged(msg.sender, newOwner);\n', '    }\n', '\n', '    \n', '}']