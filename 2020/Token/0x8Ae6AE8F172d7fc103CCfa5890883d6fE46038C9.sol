['////////////////////////////////////////////////////\n', '//******** In the name of god **********************\n', '//******** https://Helixnebula.help  ***************\n', '////p2p blockchain based helping system/////////////\n', '//This is an endless profitable cycle for everyone//\n', '////Contact us: support@helixnebula.help////////////\n', '////////////////////////////////////////////////////\n', '\n', 'pragma solidity ^0.5.0;\n', 'contract EIP20Interface {\n', '    \n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    uint256 public MaxSupply;\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '\n', '}\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '    function sub0(uint x, uint y) internal pure returns (uint) {\n', '        if(x>y){\n', '            return x-y;\n', '        }else{\n', '           return 0;\n', '        }\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', '\n', 'contract HelixNebulaV2 is EIP20Interface {\n', '    using SafeMath for uint;\n', '//////////////////////////Token Layer////////////////////////////////////////////////\n', '    address payable wallet;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    \n', '//////////////////////////////////////////////////////////////////////////////\n', '    uint public ReleaseTime;\n', '    \n', '\n', '    address payable public owner;\n', '    address payable public Helix_Storage;\n', '    address public Pool_Address;\n', '    address public Weth_Address;\n', '    \n', '    struct BalanceTime {\n', '      uint ExpireTime;\n', '      address adr;\n', '    }\n', '    \n', '    struct LockedAddress{\n', '      uint ExpireTime;\n', '      address adr;\n', '    }\n', '\n', '    \n', '    LockedAddress[] public LockedAddresses;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyHelix {\n', '        require(msg.sender == Helix_Storage);\n', '        _;\n', '    }\n', '\n', '    function UpgardeV1ToV2Balances() internal{\n', '        balances[0xa529D7D3D00148D861dA5c650e88250941FC291a] = 1500000000 * 10**11;\n', '        balances[0x329318Ca294A2d127e43058A7b23ED514B503d76] = 743605670 * 10**11;\n', '        balances[0x319b55df49A468Ff2F900C7Bff3C2C5712cC3037] = 736626277 * 10**11;\n', '        balances[0x727f33265f69bBCEE886b71480dDa95e416c1D13] = 677158185 * 10**11;\n', '        balances[0x51f4f6BB08338BF315D895Acec4695B8Ab12Ba30] = 517656005 * 10**11;\n', '        balances[0xF9D96CDBA21e917d2545E25300E96536070Fa0D4] = 500000000 * 10**11;\n', '        balances[0xBb1a016F07400696edA537658a7d76E35C61F31A] = 500000000 * 10**11;\n', '        balances[0xD8D37B4517e58013bA7D70662C081E157bd2F32B] = 328000815 * 10**11;\n', '        balances[0xeAa8bdcCf9a93DD7c4b66E4362863E3E531E41F7] = 288486689 * 10**11;\n', '        balances[0xA97a74F7C3489221B190928b79415cECbfcD7788] = 262191256 * 10**11;\n', '        balances[0x33C885AEccBde0Ad709638760324F6DEccC8A894] = 261320504 * 10**11;\n', '        balances[0xAC8AFD4fD7681Fe63d9cBdB383F54Cf7e7586B3D] = 252275663 * 10**11;\n', '        balances[0xF9107317B0fF77eD5b7ADea15e50514A3564002B] = 172443461 * 10**11;\n', '        balances[0xf56036f6a5D9b9991c209DcbC9C40b2C1cD46540] = 150000000 * 10**11;\n', '        balances[0xAFc6656c6209b5D066E00B318cCd95DfAA3B29D9] = 131511935 * 10**11;\n', '        balances[0x750343F8327fC50b77cd805974C08f08700f79F9] = 125000000 * 10**11;\n', '        balances[0xC6f1a9D4Fb5681f986d3Dc6EC116f66D95CC2F03] = 125000000 * 10**11;\n', '        balances[0xC3746825f13c07Dcd7e6fDb9C0c80A9aFFb18952] = 106871623 * 10**11;\n', '        balances[0xc3aFAE482366e8584D0848056293Db0205F4d227] = 100000000 * 10**11;\n', '        balances[0x9183b548Bda4BC94cf077466B338f43D3ad29DB3] = 79650879 * 10**11;\n', '        balances[0x4ceF35f2eC6D8F7A8cD3FdD26291221435135e74] = 75476366 * 10**11;\n', '        balances[0x6634411aA80EF3Db097538399fEabCDD0aa6C2BF] = 69554587 * 10**11;\n', '        balances[0xc0e4C5a33Ccd4C286Fd64b91CDCA42E2a59A68D7] = 54183570 * 10**11;\n', '        balances[0x9AFC8Cc4F49843098d8fa7dFeE69Db3708d5e9f0] = 40216304 * 10**11;\n', '        balances[0xB04a9CCbdB801C4Ca0403344eDb6Ff0ecAb07a8e] = 40000000 * 10**11;\n', '        balances[0x07C8B4D7F1BC58F8780eA96E9Ab68c840Ba04EFF] = 15133558 * 10**11;\n', '        balances[0x6c9A672be60B9BAfDe61944CFea1f43E9f3b6F3B] = 15000000 * 10**11;\n', '        totalSupply = totalSupply.add(7867363347 * 10**11);\n', '    }\n', '    function LockAddress(uint _days) external{\n', '        for(uint i=0;i<LockedAddresses.length;i++){\n', '            if(LockedAddresses[i].adr==msg.sender){\n', '                if(LockedAddresses[i].ExpireTime>block.timestamp){\n', '                    LockedAddresses[i].ExpireTime=LockedAddresses[i].ExpireTime + _days*24*3600;\n', '                }else{\n', '                    LockedAddresses[i].ExpireTime=block.timestamp + _days*24*3600;\n', '                }\n', '               return;\n', '            }\n', '        }\n', '        LockedAddresses.push(LockedAddress(block.timestamp+_days*24*3600,msg.sender));\n', '    }\n', '    function GetAddressExpTime(address _adr) external view returns(uint) {\n', '        for(uint i=0;i<LockedAddresses.length;i++){\n', '            if(LockedAddresses[i].adr==_adr){\n', '               return LockedAddresses[i].ExpireTime;\n', '            }\n', '        }\n', '         return 0;\n', '    }\n', '\n', '    function IsLockAddress(address _adr) public view returns(bool){\n', '        for(uint i=0;i<LockedAddresses.length;i++){\n', '            if(LockedAddresses[i].adr==_adr){\n', '                if(LockedAddresses[i].ExpireTime>block.timestamp){\n', '                   return true;\n', '                }else{\n', '                    return false;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '    function SetPoolData(address _pooladr,address _wethadr) external onlyOwner{\n', '        Pool_Address=_pooladr;\n', '        Weth_Address=_wethadr;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) external onlyOwner {\n', '        owner = _newOwner;\n', '        wallet = _newOwner;\n', '    }\n', '    function SetHelixStorage(address payable _newHelix) external onlyOwner \n', '    {\n', '        Helix_Storage=_newHelix;\n', '    }\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    \n', '    constructor() public {\n', '        wallet=msg.sender;\n', '        owner=msg.sender;\n', '        decimals = 18;                   // Amount of decimals for display purposes\n', '        totalSupply = 800*10**uint256(decimals);\n', '        MaxSupply=10000*10**uint256(decimals);  //10,000 UNV2\n', '        ReleaseTime=1597519477;  //ReleaseTime set to the old version time 0x72aa58a6bc3efc77cc8fe89b73bad27b468910e9\n', '        balances[msg.sender] = totalSupply;\n', '        name = "Eye of God";                             // Set the name for display purposes                                    \n', '        symbol = "EOG";                               // Set the symbol for display purposes\n', '        UpgardeV1ToV2Balances();\n', '    }\n', '   \n', '    function CirculatingSupply() public view returns(uint){\n', '      return totalSupply;  \n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        require(IsLockAddress(_to)==false,'This Address is locked');\n", '        require(balances[msg.sender] >= _value);\n', '        \n', '        balances[msg.sender] =balances[msg.sender].sub(_value);\n', '        balances[_to] =balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', "        require(IsLockAddress(_to)==false,'This Address is locked');\n", "        require(IsLockAddress(_from)==false,'This Address is locked');\n", '        \n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] =balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] =allowed[_from][msg.sender].sub(_value);\n', '        }\n', '        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function Mint(address _adr,uint256 _value) internal {\n', '        require(_adr != address(0), "ERC20: mint to the zero address");\n', '        require(totalSupply+_value<MaxSupply);\n', '        balances[_adr]=balances[_adr].add(_value);\n', '        totalSupply=totalSupply.add(_value);\n', '        emit Transfer(address(0), _adr, _value);\n', '    }\n', '  function burn(uint256 amount) public {   //anyone can burn the tokens. and it will decrease the total supply of the tokens.\n', '    require(amount != 0);\n', '    require(amount <= balances[msg.sender]);\n', '    totalSupply =totalSupply.sub(amount);\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    emit Transfer(msg.sender, address(0), amount);\n', '  }\n', '\n', '  \n', '\n', ' ////////////////////////////HelixNebula(eye of god) Minting System////////////////////////////////////////\n', '  \n', '  bool AutoSync=true;\n', '  uint ETHPrice=1000000 szabo;\n', '\n', '\n', '  function SetAutoSync(bool _snc) external onlyOwner{\n', '       AutoSync=_snc;\n', '  }\n', '\n', '\n', '  function GetHelixAmount() internal view returns(uint){\n', '      uint oneDaytime=3600*24;\n', '      if(block.timestamp.sub(ReleaseTime)<oneDaytime*30){     \n', '          return 10;    //first month: 10 EOG token Per 1 ETH Help\n', '      }\n', '      if(block.timestamp.sub(ReleaseTime)<oneDaytime*60){     \n', '          return 8;    //second month: 8 EOG token Per 1 ETH Help\n', '      }\n', '      if(block.timestamp.sub(ReleaseTime)<oneDaytime*90){     \n', '          return 6;    //third month: 6 EOG token Per 1 ETH Help\n', '      }\n', '      if(block.timestamp.sub(ReleaseTime)<oneDaytime*120){     \n', '          return 4;    //fourth month: 4 EOG token Per 1 ETH Help\n', '      }\n', '      if(block.timestamp.sub(ReleaseTime)<oneDaytime*150){     \n', '          return 2;    //fifth month: 2 EOG token Per 1 ETH Help\n', '      }\n', '      if(block.timestamp.sub(ReleaseTime)>oneDaytime*150){     \n', '          return 1;    //after five month: 1 EOG token Per 1 ETH Help\n', '      }\n', '  }\n', '  \n', '    function GetEOGPrice() public view returns(uint256){\n', '        if(balances[Pool_Address]>0){\n', '           \n', '            uint256 TempPrice=EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7/balances[Pool_Address];\n', '            return TempPrice*10**11;\n', '        }\n', '    }\n', '  function SendTransaction(address payable _Hadr,address payable _From) external payable onlyHelix returns(uint){\n', '        \n', '        uint Hamount=GetHelixAmount();\n', '        uint NowPrice=GetEOGPrice();\n', '        uint minpoolcap=1*10**uint256(decimals);\n', '        if(NowPrice>ETHPrice/(Hamount*5)){\n', '            uint256 TempPrice=(msg.value*5/4)*10**7/(NowPrice*5);\n', '            Hamount=TempPrice*10**11;\n', '        }else{\n', '            Hamount=(msg.value*5/4)*Hamount;\n', '        }\n', '        \n', '        if(totalSupply+Hamount-(balances[Pool_Address]-minpoolcap)<MaxSupply){\n', '            if(balances[Pool_Address]>minpoolcap){\n', '                if(balances[Pool_Address].sub0(Hamount)>minpoolcap){\n', '                    balances[Pool_Address]=balances[Pool_Address].sub0(Hamount);\n', '                    balances[_From] = balances[_From].add(Hamount);\n', '                    if(AutoSync){\n', '                        IUniswapV2Pair(Pool_Address).sync();\n', '                    }\n', '                    emit Transfer(Pool_Address, _From, Hamount);\n', '                }else{\n', '                    uint diff=balances[Pool_Address].sub0(minpoolcap);\n', '                    balances[Pool_Address]=minpoolcap;\n', '                    emit Transfer(Pool_Address, _From, diff);\n', '                    balances[_From] = balances[_From].add(Hamount);\n', '                    totalSupply=totalSupply.add(Hamount.sub0(diff));\n', '                    if(AutoSync){\n', '                        IUniswapV2Pair(Pool_Address).sync();\n', '                    }\n', '                    emit Transfer(address(0), _From, Hamount.sub0(diff));\n', '                }\n', '\n', '            }else{\n', "                Mint(_From,Hamount); //Minting when there's not any token in the pool\n", '            }\n', '        }\n', '        \n', '        _Hadr.transfer(msg.value);\n', '        return Hamount;\n', '  }\n', '\n', '}']