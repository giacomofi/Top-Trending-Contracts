['pragma solidity ^0.4.25;\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    /**\n', '     * 初始化构造\n', '     */\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 供应的份额，份额跟最小的代币单位有关，份额 = 币数 * 10 ** decimals。\n', '        balanceOf[msg.sender] = totalSupply;                // 创建者拥有所有的代币\n', '        name = tokenName;                                   // 代币名称\n', '        symbol = tokenSymbol;                               // 代币符号\n', '    }\n', '\n', '    /**\n', '     * 代币交易转移的内部实现\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 确保目标地址不为0x0，因为0x0地址代表销毁\n', '        require(_to != 0x0);\n', '        // 检查发送者余额\n', '        require(balanceOf[_from] >= _value);\n', '        // 确保转移为正数个\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        // 以下用来检查交易，\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        // 用assert来检查代码逻辑。\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     *  代币交易转移\n', '     *  从自己（创建交易者）账号发送`_value`个代币到 `_to`账号\n', '     * ERC20标准\n', '     * @param _to 接收者地址\n', '     * @param _value 转移数额\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * 账号之间代币交易转移\n', '     * ERC20标准\n', '     * @param _from 发送者地址\n', '     * @param _to 接收者地址\n', '     * @param _value 转移数额\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 设置某个地址（合约）可以创建交易者名义花费的代币数。\n', '     *\n', '     * 允许发送者`_spender` 花费不多于 `_value` 个代币\n', '     * ERC20标准\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']