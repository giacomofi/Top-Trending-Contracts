['/**\n', ' *Submitted for verification at Etherscan.io on 2020-07-17\n', ' */\n', '\n', 'pragma solidity ^ 0.5 .16;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns(uint);\n', '\n', '    function balanceOf(address account) external view returns(uint);\n', '\n', '    function transfer(address recipient, uint amount) external returns(bool);\n', '\n', '    function allowance(address owner, address spender) external view returns(uint);\n', '\n', '    function approve(address spender, uint amount) external returns(bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) external returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'library VectorSum {\n', '    // We know that we only access the array in bounds, so we can avoid the check.\n', '    // 0x20 needs to be added to an array because the first slot contains the\n', '    // array length.\n', '    function sumAsm(uint[] memory _data) pure public returns (uint o_sum) {\n', '        for (uint i = 0; i < _data.length; ++i) {\n', '            assembly {\n', '                o_sum := mload(add(add(_data, 0x20), mul(i, 0x20)))\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Context {\n', '    constructor() internal {}\n', '        // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns(address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint;\n', '    mapping(address => uint) private _balances;\n', '\n', '    mapping(address => mapping(address => uint)) private _allowances;\n', '\n', '    uint private _totalSupply;\n', '    uint public maxAmount = 21 * 10 ** 24;\n', '    modifier canMint(uint amount) {\n', '        require(amount + _totalSupply <= maxAmount);\n', '        _;\n', '    }\n', '\n', '    function totalSupply() public view returns(uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns(uint) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint amount) public returns(bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns(uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint amount) public returns(bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) public returns(bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public returns(bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint amount) canMint(amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns(string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns(string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns(uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns(uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns(uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns(uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns(bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract RaisableErc20 is ERC20, ERC20Detailed {\n', '    uint public raisedethAmount;\n', '    uint8 public maxStage = 129;\n', '    uint8 public firstStageETHAmount = 80;\n', '    uint8 public firstRoundMaxStage = 28;\n', '    bool public raisePaused=false;\n', '    uint public nowStage=1;\n', '    function updateStage(uint raisedThisTime) internal returns(bool) {\n', '        uint newRaisedethAmount=raisedethAmount+raisedThisTime;\n', '        if (newRaisedethAmount >= getSumEthAmount(nowStage)) {\n', '            nowStage+=1;\n', '            raisedethAmount=newRaisedethAmount;\n', '            updateStage(0);\n', '        }\n', '        else{\n', '            raisedethAmount=newRaisedethAmount;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function getSumEthAmount(uint stage) internal view returns(uint){\n', '        uint tempDecimal=uint(decimals());\n', '        uint firstRoundTotalRaised=10360*10**tempDecimal;\n', '        if (stage<=firstRoundMaxStage){\n', '            return (10*stage**2+90*stage)*10**tempDecimal;\n', '        }\n', '        else if(stage>firstRoundMaxStage && stage<maxStage){\n', '            uint secondRoundStage=stage-firstRoundMaxStage;\n', '            return firstRoundTotalRaised+((259*secondRoundStage - secondRoundStage**2)*10**tempDecimal).div(2);\n', '        }\n', '        else{\n', '            return firstRoundTotalRaised+7979*10**uint(decimals());\n', '        }\n', '    }\n', '    function getCanBuyAmount(uint ethAmount) public view returns(uint) {\n', "        require(ethAmount >= 100, 'division overflow');\n", '        if (nowStage <= firstRoundMaxStage)\n', '             return ethAmount*(42 * nowStage ** 2 + 43128 - 2352 * nowStage)/100;\n', '        else if (nowStage > firstRoundMaxStage && nowStage < maxStage)\n', '             return ethAmount*(maxStage + 1 - nowStage);\n', '        else\n', '            revert();\n', '    }\n', '\n', '    function addLiquidity() public payable {\n', "        require(msg.value >= 100, 'division overflow');\n", "        require(!raisePaused,'raise paused');\n", '        if (nowStage < maxStage) {\n', '            _mint(msg.sender, getCanBuyAmount(msg.value));\n', '            updateStage(msg.value);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}\n', 'contract EMTC is RaisableErc20 {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint;\n', '    using VectorSum for uint[];\n', '    bool public canMintAirDrop = true;\n', '    mapping(address => bool) public minters;\n', '    address public governance;\n', '    constructor() public ERC20Detailed("EMTC", "EMTC", 18) {\n', '        governance = msg.sender;\n', '    }\n', '    modifier isGovernance(address _minter) {\n', '        require(_minter==governance, "!governance");\n', '        _;\n', '    }\n', '    function mint(address account, uint amount) public {\n', '        require(minters[msg.sender], "!minter");\n', '        _mint(account, amount);\n', '    }\n', '\n', '    function mintAirdrop(uint amount) public isGovernance(msg.sender) {\n', '        require(canMintAirDrop, "can mint only once time for airdrop");\n', '        _mint(address(this), amount);\n', '        canMintAirDrop = false;\n', '    }\n', '\n', '    function addMinter(address _minter) public isGovernance(msg.sender) {\n', '        minters[_minter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) public isGovernance(msg.sender) {\n', '        minters[_minter] = false;\n', '    }\n', '\n', '    function multipleAirdrop(address[] memory _receivers, uint256[] memory _values) public isGovernance(msg.sender) returns(bool res){\n', '        uint cnt = _receivers.length;\n', '        uint256 totalAmount = _values.sumAsm();\n', '        require(cnt > 0 && cnt <= 50);\n', '        require(balanceOf(address(this)) >= totalAmount);\n', '        for (uint i = 0; i < cnt; i++) {\n', '            _transfer(address(this),_receivers[i],_values[i]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function setGovernance(address _governance) public isGovernance(msg.sender) {\n', '        governance = _governance;\n', '    }\n', '    \n', '    function getRaised(uint amount) public isGovernance(msg.sender) {\n', '        if (!msg.sender.send(amount)) {\n', '            revert();\n', '        }\n', '    }\n', '    function stopRaise() public isGovernance(msg.sender) {\n', '        raisePaused=true;\n', '    }\n', '}']