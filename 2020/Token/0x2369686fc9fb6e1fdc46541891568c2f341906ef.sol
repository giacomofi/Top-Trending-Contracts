['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev ERC20 token with pausable token transfers, minting and burning.\n', ' *\n', ' * Useful for scenarios such as preventing trades until the end of an evaluation\n', ' * period, or having an emergency switch for freezing all token transfers in the\n', ' * event of a large bug.\n', ' */\n', 'abstract contract ERC20Pausable is ERC20, Pausable {\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the contract must not be paused.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(!paused(), "ERC20Pausable: token transfer while paused");\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/// @title Drakoin\n', '/// @author Drakons Team\n', '/// @dev The main token contract for Drakons Utility token\n', '\n', 'contract Drakoin is ERC20Burnable, ERC20Pausable {\n', '\n', '    uint256 private _fractionMultiplier;\n', '    uint256 private _valuePerStakedToken;\n', '    uint256 private _maximumSupply;\n', '\n', '    uint256 public burnRate;\n', '    uint256 public minimumSupply;\n', '    uint256 public minStakeAmount;\n', '    uint256 public minStakeDays;\n', '    uint256 public bonusBalance;\n', '    uint256 public maxHolderBonusCount;\n', '    uint256 public bonusDuedays;\n', '\n', '    address public CEOAddress;\n', '    address public CIOAddress;\n', '    address public COOAddress;\n', '\n', '    address[] internal stakeholders;\n', '    mapping(address => uint256) internal bonus;\n', '    mapping(address => uint256) internal duedate;\n', '    mapping(address => uint256) internal holderBonusCount;\n', '    mapping(address => uint256) internal holderBonusDue;\n', '    mapping(address => uint256) internal rewards;\n', '    mapping(address => uint256) internal rewardsForClaiming;\n', '    mapping(address => uint256) internal rewardsWithdrawn;\n', '    mapping(address => uint256) internal stakes;\n', '    mapping(address => uint256) internal stakedDays;\n', '    mapping(address => bool) internal stakeholder;\n', '    mapping(address => uint256) internal stakerValuePerStakedToken;\n', '    mapping(uint256 => uint256) internal tierDayRate;\n', '    mapping(address => bool) internal whitelisted;\n', '\n', '    event BurnTokens(address _address, uint256 _amount);\n', '    event CEOAddressUpdated(address newAddress);\n', '    event CIOAddressUpdated(address newAddress);\n', '    event COOAddressUpdated(address newAddress);\n', '    event CreateStake(address _address, uint256 _amount, uint256 _numberOfDays);\n', '    event RemoveStake(address _address, uint256 _amount);\n', '    event ClaimRewards(address _address, uint256 _amount);\n', '    event UpdateBurnRate(uint256 _newRate);\n', '    event UpdateMinStakeAmount(uint256 _amount);\n', '    event UpdateMinStakeDays(uint256 _amount);\n', '    event UpdateTierDayRate(uint256 _newNumberOfDays, uint256 _newRate);\n', '    event UpdateBonusBalance(uint256 bonusBalance, uint256 _addValue);\n', '    event UpdateBonusDuedays(uint256 _newValue);\n', '    event UpdateMaxHolderBonusCount(uint256 _newValue);\n', '\n', '    modifier onlyCEO() {\n', '        require(msg.sender == CEOAddress, "Only the CEO is allowed to call this function.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCLevel() {\n', '        require(\n', '            msg.sender == CEOAddress ||\n', '            msg.sender == CIOAddress ||\n', '            msg.sender == COOAddress\n', '        , "Only accounts with C-Level admin rights are allowed to call this function.");\n', '        _;\n', '    }\n', '\n', '    constructor (address _cooAddress, address _cioAddress) public ERC20("Drakoin", "DRK") {\n', '        _fractionMultiplier = 1e18;\n', '\n', '        burnRate = 500; // 5.0% per tx of non-whitelisted address\n', '\n', '        _maximumSupply = 500000000;\n', '        minimumSupply = 250000000 * (10 ** 18);\n', '        minStakeAmount = 1e21;\n', '        minStakeDays = 5;\n', '        maxHolderBonusCount = 5;\n', '        bonusDuedays = 5;\n', '\n', '        tierDayRate[5] = 10;     //5 days - 0.1%\n', '        tierDayRate[10] = 30;    //10 days - 0.3%\n', '        tierDayRate[30] = 100;   //30 days - 1.0%\n', '        tierDayRate[90] = 350;   //90 days - 3.5%\n', '        tierDayRate[180] = 750;  //180 days - 7.5%\n', '\n', '        COOAddress = _cooAddress;\n', '        CIOAddress = _cioAddress;\n', '        CEOAddress = msg.sender;\n', '\n', '        whitelisted[_cooAddress] = true;\n', '        whitelisted[_cioAddress] = true;\n', '        whitelisted[msg.sender] = true;\n', '\n', '        _mint(msg.sender, _maximumSupply * (10 ** uint256(decimals())));\n', '    }\n', '\n', '    function transfer(address to, uint256 _amount) public virtual override returns (bool) {\n', '        return super.transfer(to, _partialBurn(msg.sender, _amount));\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) public virtual override returns (bool) {\n', '        return super.transferFrom(_from, _to, _partialBurn(_from, _amount));\n', '    }\n', '\n', '    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual override (ERC20, ERC20Pausable) {\n', '        return super._beforeTokenTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    function _partialBurn(address _from, uint256 _amount) internal returns (uint256) {\n', '        uint256 _burnAmount = _calculateBurnAmount(_amount);\n', '\n', '        if (_burnAmount > 0) {\n', '            // Calculate rewarwds\n', '            uint256 _currentTotalStakes = _totalStakes();\n', '            if (_currentTotalStakes > 0) {\n', '                uint256 _stakeAmount = (_burnAmount.mul(2)).div(5);\n', '                _valuePerStakedToken = _valuePerStakedToken.add((_stakeAmount.mul(_fractionMultiplier)).div(_currentTotalStakes));\n', '            }\n', '\n', '            _transfer(_from, address(this), _burnAmount);\n', '            _burn(address(this), ((_burnAmount.mul(3)).div(5)));\n', '            //_burn(_from, ((_burnAmount.mul(3)).div(5)));\n', '            //_transfer(_from, address(this), ((_burnAmount.mul(2)).div(5)));\n', '\n', '        }\n', '\n', '        return _amount.sub(_burnAmount);\n', '    }\n', '\n', '    function _calculateBurnAmount(uint256 _amount) internal view returns (uint256) {\n', '        if (whitelisted[msg.sender]) return 0;\n', '        uint256 _burnAmount = 0;\n', '\n', '        //Calculate tokens to be burned\n', '        if (totalSupply() > minimumSupply) {\n', '            _burnAmount = _amount.mul(burnRate).div(10000);\n', '            uint256 _tryToBurn = totalSupply().sub(minimumSupply);\n', '            if (_burnAmount > _tryToBurn) {\n', '                _burnAmount = _tryToBurn;\n', '            }\n', '        }\n', '\n', '        return _burnAmount;\n', '    }\n', '\n', '    function setCEOAddress(address _address) external onlyCEO() {\n', '        whitelisted[CEOAddress] = false;\n', '        CEOAddress = _address;\n', '        whitelisted[_address] = true;\n', '        emit CEOAddressUpdated(_address);\n', '    }\n', '\n', '    function setCIOAddress(address _address) external onlyCEO() {\n', '        if (CEOAddress != CIOAddress)\n', '        {\n', '            whitelisted[CIOAddress] = false;\n', '        }\n', '        CIOAddress = _address;\n', '        whitelisted[_address] = true;\n', '        emit CIOAddressUpdated(_address);\n', '    }\n', '\n', '    function setCOOAddress(address _address) external onlyCEO() {\n', '        if (CEOAddress != COOAddress)\n', '        {\n', '            whitelisted[COOAddress] = false;\n', '        }\n', '        COOAddress = _address;\n', '        whitelisted[_address] = true;\n', '        emit COOAddressUpdated(_address);\n', '    }\n', '\n', '    function pause() external onlyCEO() {\n', '        super._pause();\n', '    }\n', '\n', '    function unpause() external onlyCEO() {\n', '        super._unpause();\n', '    }\n', '\n', '    function burnTokens(uint256 _amount) external {\n', '        require(balanceOf(msg.sender) >= _amount, "Drakoin: Amount must be equal or greater than the account balance.");\n', '\n', '        if (totalSupply() > minimumSupply) {\n', '            uint256 _burnAmount = _amount;\n', '            uint256 _tryToBurn = totalSupply().sub(minimumSupply);\n', '            if (_burnAmount > _tryToBurn) {\n', '                _burnAmount = _tryToBurn;\n', '            }\n', '\n', '            uint256 _currentTotalStakes = _totalStakes();\n', '            if (_currentTotalStakes > 0) {\n', '                uint256 _stakeAmount = (_burnAmount.mul(3)).div(5);\n', '                _valuePerStakedToken = _valuePerStakedToken.add((_stakeAmount.mul(_fractionMultiplier)).div(_currentTotalStakes));\n', '            }\n', '\n', '            _burn(msg.sender, ((_burnAmount.mul(2)).div(5)));\n', '            _transfer(msg.sender, address(this), ((_burnAmount.mul(3)).div(5)));\n', '\n', '        }\n', '        emit BurnTokens(msg.sender, _amount);\n', '    }\n', '\n', '    function updateBurnRate(uint256 _newRate) external onlyCEO() {\n', '        require(_newRate >= 500, "Drakoin: Burn rate must be equal or greater than 500.");\n', '        require(_newRate <= 800, "Drakoin: Burn rate must be equal or less than 800.");\n', '        burnRate = _newRate;\n', '\n', '        emit UpdateBurnRate(burnRate);\n', '    }\n', '\n', '    function isStakeholder(address _address) public view returns(bool) {\n', '        return stakeholder[_address];\n', '    }\n', '\n', '    function _isStakeholder(address _address) internal view returns(bool, uint256) {\n', '        for (uint256 s = 0; s < stakeholders.length; s += 1){\n', '            if (_address == stakeholders[s]) return (true, s);\n', '        }\n', '        return (false, 0);\n', '    }\n', '\n', '    function _addStakeholder(address _address) internal {\n', '        (bool _isAddressStakeholder, ) = _isStakeholder(_address);\n', '        if(!_isAddressStakeholder) stakeholders.push(_address);\n', '\n', '        stakeholder[_address] = true;\n', '    }\n', '\n', '    function _removeStakeholder(address _address) internal {\n', '        (bool _isAddressStakeholder, uint256 s) = _isStakeholder(_address);\n', '        if(_isAddressStakeholder){\n', '            stakeholders[s] = stakeholders[stakeholders.length - 1];\n', '            stakeholders.pop();\n', '        }\n', '\n', '        stakeholder[_address] = false;\n', '    }\n', '\n', '    function stakeOf(address _stakeholder) public view returns(uint256) {\n', '        return stakes[_stakeholder];\n', '    }\n', '\n', '    function _totalStakes() internal view returns(uint256) {\n', '        uint256 _stakes = 0;\n', '        for (uint256 s = 0; s < stakeholders.length; s += 1) {\n', '            _stakes = _stakes.add(stakes[stakeholders[s]]);\n', '        }\n', '        return _stakes;\n', '    }\n', '\n', '    function totalStakes() public view returns(uint256) {\n', '        return _totalStakes();\n', '    }\n', '\n', '    function _calculateBonus(uint256 _amount, uint256 _numberOfDays) internal returns (uint256) {\n', '        if (bonusBalance == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 _bonus = _amount.mul(tierDayRate[_numberOfDays]).div(10000);\n', '\n', '        if (_bonus > bonusBalance) {\n', '            _bonus = bonusBalance;\n', '            bonusBalance = 0;\n', '            return _bonus;\n', '        }\n', '\n', '        bonusBalance = bonusBalance.sub(_bonus);\n', '        return _bonus;\n', '    }\n', '\n', '    function createStake(uint256 _amount, uint256 _numberOfDays) public {\n', '        require(_numberOfDays >= minStakeDays, "Drakoin: Number of days must be >= than 5.");\n', '        require(balanceOf(msg.sender) >= _amount, "Drakoin: Amount must be <= account balance.");\n', '        require(stakes[msg.sender] + _amount >= minStakeAmount, "Drakoin: Total stake >= minimum allowed value.");\n', '        require(tierDayRate[_numberOfDays] > 0, "Drakoin: Invalid number of days.");\n', '\n', '        if (stakeholder[msg.sender]) {\n', '            require(_numberOfDays >= stakedDays[msg.sender], "Drakoin: Stake days cannot be lowered.");\n', '        }\n', '        stakedDays[msg.sender] = _numberOfDays;\n', '\n', '        rewardsForClaiming[msg.sender] = rewardOf(msg.sender);\n', '        stakerValuePerStakedToken[msg.sender] = _valuePerStakedToken;\n', '\n', '        _transfer(msg.sender, address(this), _amount);\n', '        if(!stakeholder[msg.sender]) {\n', '            _addStakeholder(msg.sender);\n', '        }\n', '        stakes[msg.sender] = stakes[msg.sender].add(_amount);\n', '\n', '        if (holderBonusCount[msg.sender] < maxHolderBonusCount) {\n', '            holderBonusCount[msg.sender]++;\n', '\n', '            if (now >= holderBonusDue[msg.sender]) {\n', '                bonus[msg.sender] = 0;\n', '            }\n', '            bonus[msg.sender] = bonus[msg.sender].add(_calculateBonus(_amount, _numberOfDays));\n', '\n', '            holderBonusDue[msg.sender] = now.add((bonusDuedays.mul(1 days)));\n', '        }\n', '\n', '        duedate[msg.sender] = now.add((_numberOfDays.mul(1 days)));\n', '        emit CreateStake(msg.sender, _amount, _numberOfDays);\n', '    }\n', '\n', '    function removeStake(uint256 _amount) public {\n', '        require(now >= duedate[msg.sender], "Drakoin: Current time is before due date.");\n', '        require(stakes[msg.sender] >= _amount, "Drakoin: No current stake for this account.");\n', '\n', '        rewardsForClaiming[msg.sender] = rewardOf(msg.sender);\n', '        stakerValuePerStakedToken[msg.sender] = _valuePerStakedToken;\n', '\n', '        stakes[msg.sender] = stakes[msg.sender].sub(_amount);\n', '        if(stakes[msg.sender] == 0) _removeStakeholder(msg.sender);\n', '        stakedDays[msg.sender] = 5;\n', '\n', '        uint256 _burnAmount = _calculateBurnAmount(_amount);\n', '        if (_burnAmount > 0) {\n', '            uint256 _currentTotalStakes = _totalStakes();\n', '            _burn(address(this), ((_burnAmount.mul(3)).div(5)));\n', '\n', '            if (_currentTotalStakes > 0) {\n', '                uint256 _stakeAmount = (_burnAmount.mul(2)).div(5);\n', '                _valuePerStakedToken = _valuePerStakedToken.add((_stakeAmount.mul(_fractionMultiplier)).div(_currentTotalStakes));\n', '            }\n', '        }\n', '\n', '        if (now >= holderBonusDue[msg.sender]) {\n', '            bonus[msg.sender] = 0;\n', '        }\n', '\n', '        _transfer(address(this), msg.sender, _amount.sub(_burnAmount));\n', '        emit RemoveStake(msg.sender, _amount);\n', '    }\n', '\n', '    function updateMinStakeAmount(uint256 _newAmount) external onlyCEO() {\n', '        require(_newAmount >= 1e20, "Drakoin: Value must be more than 1000.");\n', '        minStakeAmount = _newAmount;\n', '\n', '        emit UpdateMinStakeAmount(minStakeAmount);\n', '    }\n', '\n', '    function updateMinStakeDays(uint256 _newStakeDays) external onlyCEO() {\n', '        require(_newStakeDays > 0, "Drakoin: Value must be more than 0.");\n', '        minStakeDays = _newStakeDays;\n', '\n', '        emit UpdateMinStakeDays(minStakeDays);\n', '    }\n', '\n', '    function isWhitelisted(address _address) public view returns(bool) {\n', '        return whitelisted[_address];\n', '    }\n', '\n', '    function addWhitelisted(address _whitelisted) external onlyCEO() {\n', '        whitelisted[_whitelisted] = true;\n', '    }\n', '\n', '    function removeWhitelisted(address _whitelisted) external onlyCEO() {\n', '        whitelisted[_whitelisted] = false;\n', '    }\n', '\n', '    function updateTierDayRate(uint256 _newNumberOfDays, uint256 _newRate) external onlyCEO() {\n', '        require(_newNumberOfDays > 0, "Drakoin: Number of days must be more than 0.");\n', '        require(_newRate >= 0, "Drakoin: Rate must be more than 0.");\n', '        tierDayRate[_newNumberOfDays] = _newRate;\n', '\n', '        emit UpdateTierDayRate(_newNumberOfDays, _newRate);\n', '    }\n', '\n', '    function totalRewards() public view returns(uint256)\n', '    {\n', '        uint256 _totalRewards = 0;\n', '        for (uint256 s = 0; s < stakeholders.length; s += 1){\n', '            _totalRewards = _totalRewards.add(rewardsForClaiming[stakeholders[s]]);\n', '        }\n', '\n', '        return _totalRewards;\n', '    }\n', '\n', '    function rewardOf(address _address) public view returns(uint256) {\n', '        uint256 _bonus = 0;\n', '        uint256 _additionalRewards = ((_valuePerStakedToken.sub(stakerValuePerStakedToken[_address])).mul(stakes[_address])).div(_fractionMultiplier);\n', '\n', '        if (now >= holderBonusDue[_address]) {\n', '            _bonus = bonus[_address];\n', '        }\n', '\n', '        return rewardsForClaiming[_address].add(_bonus.add(_additionalRewards));\n', '    }\n', '\n', '    function claimRewards() external returns (uint256) {\n', '        uint256 _rewards = rewardOf(msg.sender);\n', '        require(_rewards > 0);\n', '\n', '        if (now >= holderBonusDue[msg.sender]) {\n', '            bonus[msg.sender] = 0;\n', '        }\n', '\n', '        rewardsForClaiming[msg.sender] = 0;\n', '        stakerValuePerStakedToken[msg.sender] = _valuePerStakedToken;\n', '\n', '        _transfer(address(this), msg.sender, _rewards);\n', '        emit ClaimRewards(msg.sender, _rewards);\n', '        return _rewards;\n', '    }\n', '\n', '    function bonusOf(address _address) public view returns(uint256) {\n', '        return bonus[_address];\n', '    }\n', '\n', '    function updateBonusBalance(uint256 _addValue) external onlyCEO() {\n', '        require(_addValue > 0, "Drakoin: Value must be more than 0.");\n', '        bonusBalance = bonusBalance.add(_addValue);\n', '\n', '        _transfer(msg.sender, address(this), _addValue);\n', '\n', '        emit UpdateBonusBalance(bonusBalance, _addValue);\n', '    }\n', '\n', '\n', '    function updateMaxHolderBonusCount(uint256 _newValue) external onlyCEO() {\n', '        require(_newValue > 5, "Drakoin: Value must be more than 5.");\n', '        maxHolderBonusCount = _newValue;\n', '\n', '        emit UpdateMaxHolderBonusCount(_newValue);\n', '    }\n', '\n', '    function updateBonusDuedays(uint256 _newValue) external onlyCEO() {\n', '        require(_newValue > 5, "Drakoin: Value must be more than 5.");\n', '        bonusDuedays = _newValue;\n', '\n', '        emit UpdateBonusDuedays(_newValue);\n', '    }\n', '\n', '    function get_valuePerStakedToken() external view onlyCLevel returns(uint256) {\n', '        return _valuePerStakedToken;\n', '    }\n', '\n', '    function getReleaseDateOf(address _addresss) public view returns(uint256) {\n', '        return duedate[_addresss];\n', '    }\n', '\n', '    function get_stakedDays(address _addresss) public view returns(uint256) {\n', '        return stakedDays[_addresss];\n', '    }\n', '\n', '    function get_holderBonusCount(address _addresss) public view returns(uint256) {\n', '        return holderBonusCount[_addresss];\n', '    }\n', '\n', '    function get_holderBonusDue(address _addresss) public view returns(uint256) {\n', '        return holderBonusDue[_addresss];\n', '    }\n', '\n', '}']