['// --------------------------------\n', '//░█████╗░███╗░░██╗████████╗██╗██████╗░██╗░░░██╗██████╗░███╗░░██╗\n', '//██╔══██╗████╗░██║╚══██╔══╝██║██╔══██╗██║░░░██║██╔══██╗████╗░██║\n', '//███████║██╔██╗██║░░░██║░░░██║██████╦╝██║░░░██║██████╔╝██╔██╗██║\n', '//██╔══██║██║╚████║░░░██║░░░██║██╔══██╗██║░░░██║██╔══██╗██║╚████║\n', '//██║░░██║██║░╚███║░░░██║░░░██║██████╦╝╚██████╔╝██║░░██║██║░╚███║\n', '//╚═╝░░╚═╝╚═╝░░╚══╝░░░╚═╝░░░╚═╝╚═════╝░░╚═════╝░╚═╝░░╚═╝╚═╝░░╚══╝\n', '//\n', '// HBURN but no presale\n', '// ALL tokens listed straight up on Uniswap\n', '// * Liquidity provided for by team\n', '// \n', '// Burn starts at 6.5%\n', '// Everyday burn rate increases up to max of 25.0%\n', '// \n', '// Telegram: https://t.me/antiburnfinance\n', '// --------------------------------\n', 'pragma solidity ^0.5.17;\n', '\n', 'contract Context\n', '{\n', '    constructor() internal {}\n', '\n', '    function _msgSender() internal view returns (address payable) \n', '\t{\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) \n', '\t{\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context \n', '{\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal \n', '\t{\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) \n', '\t{\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() \n', '\t{\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) \n', '\t{\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner \n', '\t{\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner \n', '\t{\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal \n', '\t{\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// --------------------------------\n', '// Safe Math Library\n', '// Added ceiling function\n', '// --------------------------------\n', 'library SafeMath \n', '{\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\t\t\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n', '\t{\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\t\t\n', '        return c;\n', '    }\n', '\n', '\t// Gas Optimization\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        if (a == 0) \n', '\t\t{\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n', '\t{\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) \n', '\t{\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \n', '\t{\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256) \n', '\t{\n', '\t\tuint256 c = add(a,m);\n', '\t\tuint256 d = sub(c,1);\n', '\t\treturn mul(div(d,m),m);\n', '\t}\n', '}\n', '\n', 'interface IERC20 \n', '{\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\t\t\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 \n', '{\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor(string memory name, string memory symbol, uint8 decimals) public \n', '\t{\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns (string memory) \n', '\t{\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) \n', '\t{\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) \n', '\t{\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// --------------------------------\n', '// Ensure enough gas\n', '// --------------------------------\n', 'contract GasPump \n', '{\n', '    bytes32 private stub;\n', '    uint256 private constant target = 10000;\n', '\n', '    modifier requestGas() \n', '\t{\n', '        if (tx.gasprice == 0 || gasleft() > block.gaslimit) \n', '\t\t{\n', '            _;\n', '            uint256 startgas = gasleft();\n', '            while (startgas - gasleft() < target) \n', '\t\t\t{\n', '                // Burn gas\n', '                stub = keccak256(abi.encodePacked(stub));\n', '            }\n', '        } \n', '\t\t\n', '\t\telse \n', '\t\t{\n', '            _;\n', '        }\n', '    }\n', '}\n', '\n', '// --------------------------------\n', '// AntiBurnFinance\n', '// --------------------------------\n', 'contract AntiBurnFinance is Context, Ownable, ERC20Detailed, GasPump \n', '{\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => bool) public whitelistFrom;\n', '    mapping(address => bool) public whitelistTo;\n', '\t\n', '\taddress deployerWallet = 0x55e1314C14f1bb31Bd53C86a7787C559d0FebcAe;\n', '\taddress uniswapWallet = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\t\n', '\t// Token Details\n', '\tstring constant tokenName = "AntiBurnFinance";\n', '\tstring constant tokenSymbol = "ABURN";\n', '\tuint8  constant tokenDecimals = 18;\n', '    uint256 private _totalSupply = 10000 * (10 ** 18);\n', '\tuint256 public basePercent = 100;\n', '\t\n', '    bytes32 private lastHash;\n', '\tevent TransferFeeChanged(uint256 newFee);\n', '\tbool private activeFee;\n', '\tuint256 public transferFee; // Fee as percentage, where 123 = 1.23%\n', '\t\n', '\tconstructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) \n', '\t{\n', '\t\t_mint(msg.sender, _totalSupply);\n', '\t}\n', '\n', '    function totalSupply() public view returns (uint256) \n', '\t{\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) \n', '\t{\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) \n', '\t{\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) \n', '\t{\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient,uint256 amount) public returns (bool) \n', '    {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender,\n', '\t\t_allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount) public \n', '\t{\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public \n', '\t{\n', '        _burnFrom(account, amount);\n', '    }\n', '\t\n', '\tfunction setTransferFee(uint256 fee) public onlyOwner \n', '\t{\n', '\t\t// Maximum Possible Fee is 35%\n', '\t\trequire(fee <= 3500, "Fee cannot be greater than 35%");\n', '\t\tif (fee == 0) \n', '\t\t{\n', '\t\t\tactiveFee = false;\n', '\t\t} \n', '\t\t\n', '\t\telse \n', '\t\t{\n', '\t\t\tactiveFee = true;\n', '\t\t}\n', '\t\t\n', '\t\ttransferFee = fee;\n', '\t\temit TransferFeeChanged(fee);\n', '\t}\n', '\t\n', '    function _transfer(address sender, address recipient, uint256 amount) internal requestGas \n', '\t{\n', "\t\t// Checks that it's not the burn address\n", '        \n', '        require(amount <= _balances[sender]);\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '\t\t// Allow deployer to not get affected by fees, etc\n', '\t\tif (msg.sender == deployerWallet)\n', '        {\n', '            // Subtract from sender balance\n', '            _balances[sender] = _balances[sender].sub(amount);\n', '            \n', '            // Add to recipient balance\n', '\t\t\t_balances[recipient] = _balances[recipient].add(amount);\n', '\t\t\t\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '\t\t\n', '\t\t// Not UniSwap Wallet Transaction + Fees are set\n', '\t\telse if (sender != uniswapWallet && activeFee == true)\n', '\t\t{\t\n', '\t\t    // Subtract from sender balance\n', '\t\t\t_balances[sender] = _balances[sender].sub(amount);\n', '\t\t\t\n', '\t\t\tuint256 tokensToBurn = transferFee.mul(amount).div(10000);\n', '\t\t\t\n', '\t\t\t// Transfer amount - set burn fee\n', '\t\t\tuint256 tokensToTransfer = amount.sub(tokensToBurn);\n', '\t\t\t\n', '\t\t\t// Add to recipient balance\n', '\t\t\t_balances[recipient] = _balances[recipient].add(tokensToTransfer);\n', '\n', '            // Subtract burned amount from supply\n', '\t\t\t_totalSupply = _totalSupply.sub(tokensToBurn);\n', '\t\t\t\n', '\t\t\t// Transaction Documentation Log\n', '            emit Transfer(sender, recipient, tokensToTransfer);\n', '\t\t\temit Transfer(sender, address(0), tokensToBurn);\n', '        }\n', '\n', '        // UniSwap Wallet or No fees set\n', '\t\telse\n', '\t\t{\n', '\t\t   \t// Subtract from sender balance\n', '\t\t\t_balances[sender] = _balances[sender].sub(amount);\n', '\t\t\t\t\t\n', '\t\t\t// Transfer amount\n', '\t\t\tuint256 tokensToTransfer = amount;\n', '\t\t\t\n', '\t\t\t// Add to recipient balance\n', '\t\t\t_balances[recipient] = _balances[recipient].add(tokensToTransfer);\n', '\t\t\n', '\t\t\t// Transaction Documentation Log\n', '\t\t\temit Transfer(sender, recipient, tokensToTransfer);\n', '\t\t}\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal \n', '\t{\t\n', '\t\trequire(amount != 0);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal \n', '\t{\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal \n', '    {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 amount) internal \n', '\t{\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}']