['// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function safeMod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * Crypto Accept Contract\n', ' */\n', 'contract CryptoAccept {\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string memory tokenName,\n', '        uint8 decimalUnits,\n', '        string memory tokenSymbol\n', '        ) {\n', '            balanceOf[msg.sender] = initialSupply;\n', '            totalSupply = initialSupply;\n', '            name = tokenName;\n', '            symbol = tokenSymbol;\n', '            decimals = decimalUnits;\n', '            owner = msg.sender;\n', '        }\n', '\n', '    /**\n', '     * Transfer functions\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(_to != address(this));\n', '        require(_to != address(0), "Cannot use zero address");\n', '        require(_value > 0, "Cannot use zero value");\n', '\n', '        require (balanceOf[msg.sender] >= _value, "Balance not enough");         // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to], "Overflow" );        // Check for overflows\n', '        \n', '        uint previousBalances = balanceOf[msg.sender] + balanceOf[_to];          \n', '        \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);               // Add the same to the recipient\n', '        \n', '        emit Transfer(msg.sender, _to, _value);                                  // Notify anyone listening that this transfer took place\n', '        \n', '        assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (_value > 0, "Cannot use zero");\n', '        \n', '        allowance[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function multiTransfer(address[] memory _receivers, uint256[] memory _values) public returns (bool success) {\n', '        require(_receivers.length <= 200, "Too many recipients");\n', '\n', '        for(uint256 i = 0; i < _receivers.length; i++) {\n', '            transfer(_receivers[i], _values[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function multiTransferSingleValue(address[] memory _receivers, uint256 _value) public returns (bool success) {\n', '        uint256 toSend = _value * 10**18;\n', '\n', '        require(_receivers.length <= 200, "Too many recipients");\n', '\n', '        for(uint256 i = 0; i < _receivers.length; i++) {\n', '            transfer(_receivers[i], toSend);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0), "Cannot use zero address");\n', '        require(_value > 0, "Cannot use zero value");\n', '        \n', '        require( balanceOf[_from] >= _value, "Balance not enough" );\n', '        require( balanceOf[_to] + _value > balanceOf[_to], "Cannot overflow" );\n', '        \n', '        require( _value <= allowance[_from][msg.sender], "Cannot over allowance" );\n', '        \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Ownership functions\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * Burn functions\n', '     */\n', '    function burn(uint256 _value) external {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _from, uint256 _value) internal {\n', '        require(_from != address(0), "ERC20: burn from the zero address");\n', '\n', '        require(_value != 0);\n', '        require(_value <= balanceOf[_from]);\n', '\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);\n', '\n', '        emit Transfer(_from, address(0), _value);\n', '    }\n', '}']