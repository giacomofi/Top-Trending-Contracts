['pragma solidity ^0.7.0;\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract DotsCoinCore is ERC20("DotSwaps", "DOTS"), Ownable {\n', '    using SafeMath for uint256;\n', '    address internal _taxer;\n', '    address internal _taxDestination;\n', '    uint internal _taxRate = 0;\n', '    bool internal _lock = true;\n', '    mapping (address => bool) internal _taxWhitelist;\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        require(msg.sender == owner() || !_lock, "Transfer is locking");\n', '        uint256 taxAmount = amount.mul(_taxRate).div(100);\n', '        if (_taxWhitelist[msg.sender] == true) {\n', '            taxAmount = 0;\n', '        }\n', '        uint256 transferAmount = amount.sub(taxAmount);\n', '        require(balanceOf(msg.sender) >= amount, "insufficient balance.");\n', '        super.transfer(recipient, transferAmount);\n', '        if (taxAmount != 0) {\n', '            super.transfer(_taxDestination, taxAmount);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        require(sender == owner() || !_lock, "TransferFrom is locking");\n', '\n', '        uint256 taxAmount = amount.mul(_taxRate).div(100);\n', '        if (_taxWhitelist[sender] == true) {\n', '            taxAmount = 0;\n', '        }\n', '        uint256 transferAmount = amount.sub(taxAmount);\n', '        require(balanceOf(sender) >= amount, "insufficient balance.");\n', '        super.transferFrom(sender, recipient, transferAmount);\n', '        if (taxAmount != 0) {\n', '            super.transferFrom(sender, _taxDestination, taxAmount);\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract DotsCoin is DotsCoinCore {\n', '    mapping (address => bool) public minters;\n', '    constructor() {\n', '        _taxer = owner();\n', '        _taxDestination = owner();\n', '    }\n', '    function mint(address to, uint amount) public onlyMinter {\n', '        _mint(to, amount);\n', '    }\n', '    function burn(uint amount) public {\n', '        require(amount > 0);\n', '        require(balanceOf(msg.sender) >= amount);\n', '        _burn(msg.sender, amount);\n', '    }\n', '    function addMinter(address account) public onlyOwner {\n', '        minters[account] = true;\n', '    }\n', '    function removeMinter(address account) public onlyOwner {\n', '        minters[account] = false;\n', '    }\n', '    modifier onlyMinter() {\n', '        require(minters[msg.sender], "Restricted to minters.");\n', '        _;\n', '    }\n', '    modifier onlyTaxer() {\n', '        require(msg.sender == _taxer, "Only for taxer.");\n', '        _;\n', '    }\n', '    function setTaxer(address account) public onlyTaxer {\n', '        _taxer = account;\n', '    }\n', '    function setTaxRate(uint256 rate) public onlyTaxer {\n', '        _taxRate = rate;\n', '    }\n', '    function setTaxDestination(address account) public onlyTaxer {\n', '        _taxDestination = account;\n', '    }\n', '    function addToWhitelist(address account) public onlyTaxer {\n', '        _taxWhitelist[account] = true;\n', '    }\n', '    function removeFromWhitelist(address account) public onlyTaxer {\n', '        _taxWhitelist[account] = false;\n', '    }\n', '    function taxer() public view returns(address) {\n', '        return _taxer;\n', '    }\n', '    function taxDestination() public view returns(address) {\n', '        return _taxDestination;\n', '    }\n', '    function taxRate() public view returns(uint256) {\n', '        return _taxRate;\n', '    }\n', '    function isInWhitelist(address account) public view returns(bool) {\n', '        return _taxWhitelist[account];\n', '    }\n', '    function unlock() public onlyOwner {\n', '        _lock = false;\n', '    }\n', '    function getLockStatus() view public returns(bool) {\n', '        return _lock;\n', '    }\n', '}\n', '/**\n', ' *DOTSWAPS . COM - WEBSITE\n', ' *DOTSWAPS IS A DUAL TOKEN MODEL SWAPS CONTRACT FOLLOW UP\n', '*/']