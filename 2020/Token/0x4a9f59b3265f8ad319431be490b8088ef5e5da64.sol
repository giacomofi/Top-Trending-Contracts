['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IStakedAaveImplWithInitialize {\n', '  function initialize(\n', '    address aaveGovernance,\n', '    string calldata name,\n', '    string calldata symbol,\n', '    uint8 decimals\n', '  ) external;\n', '\n', '  function stake(address onBehalfOf, uint256 amount) external;\n', '\n', '  function redeem(address to, uint256 amount) external;\n', '\n', '  function cooldown() external;\n', '\n', '  function claimRewards(address to, uint256 amount) external;\n', '\n', '  function balanceOf(address user) external view returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' * From https://github.com/OpenZeppelin/openzeppelin-contracts\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title interface EIP2612\n', ' * @author Aave\n', ' * @dev Generic interface for the EIP2612 permit function\n', ' */\n', 'interface IEIP2612Token is IERC20 {\n', '  /**\n', '   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\n', '   * @param owner the owner of the funds\n', '   * @param spender the spender\n', '   * @param value the amount\n', '   * @param deadline the deadline timestamp, type(uint256).max for max deadline\n', '   * @param v signature param\n', '   * @param s signature param\n', '   * @param r signature param\n', '   */\n', '  function permit(\n', '    address owner,\n', '    address spender,\n', '    uint256 value,\n', '    uint256 deadline,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external virtual;\n', '}\n', '\n', '\n', '/**\n', ' * @title StakingHelper contract\n', ' * @author Aave\n', ' * @dev implements a staking function that allows staking through the EIP2612 capabilities of the AAVE token\n', ' **/\n', '\n', 'contract AaveStakingHelper {\n', '  IStakedAaveImplWithInitialize public immutable STAKE;\n', '  IEIP2612Token public immutable AAVE;\n', '\n', '  constructor(address stake, address aave) public {\n', '    STAKE = IStakedAaveImplWithInitialize(stake);\n', '    AAVE = IEIP2612Token(aave);\n', '    //approves the stake to transfer uint256.max tokens from this contract\n', '    //avoids approvals on every stake action\n', '    IEIP2612Token(aave).approve(address(stake), type(uint256).max);\n', '  }\n', '\n', '  /**\n', '   * @dev stakes on behalf of msg.sender using signed approval.\n', '   * The function expects a valid signed message from the user, and executes a permit()\n', '   * to approve the transfer. The helper then stakes on behalf of the user\n', '   * @param amount the amount to stake\n', '   * @param v signature param\n', '   * @param r signature param\n', '   * @param s signature param\n', '   **/\n', '  function stake(\n', '    uint256 amount,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external {\n', '    AAVE.permit(msg.sender, address(this), amount, type(uint256).max, v, r, s);\n', '    AAVE.transferFrom(msg.sender, address(this), amount);\n', '    STAKE.stake(msg.sender, amount);\n', '  }\n', '}']