['pragma solidity 0.7.1;\n', '\n', 'contract SimpleERC20Token {\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    string public name = "wrapped MALW";\n', '    string public symbol = "wMALW";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    address private _admin = address(0);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event TransferToMALW(address indexed from, uint256 value, string toMalwAddress);\n', '\n', '    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\n', '        _admin = msg.sender;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '\n', '        mint(msg.sender, 100000 * 10**_decimals);\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(_admin == msg.sender);\n', '            _;\n', '    }\n', '\n', '    function setAdmin(address to) onlyAdmin public returns (bool success) {\n', '        _admin = to;\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= value);\n', '\n', "        balanceOf[msg.sender] -= value;  // deduct from sender's balance\n", "        balanceOf[to] += value;          // add to recipient's balance\n", '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferMultiple(address[] memory to, uint256 value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= value);\n', '\n', '        balanceOf[msg.sender] -= value;\n', '        value /= to.length;\n', '        for (uint256 i = 0; i < to.length; i++) {\n', '            balanceOf[to[i]] += value;\n', '            emit Transfer(msg.sender, to[i], value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool success) {\n', '        _allowances[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require(value <= balanceOf[from]);\n', '        require(value <= _allowances[from][msg.sender]);\n', '\n', '        balanceOf[from] -= value;\n', '        balanceOf[to] += value;\n', '        _allowances[from][msg.sender] -= value;\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint256 value) onlyAdmin public returns (bool success) {\n', '        totalSupply += value;\n', '        balanceOf[to] += value;\n', '        emit Transfer(address(0), to, value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 value) public returns (bool success) {\n', '        require(value <= balanceOf[msg.sender]);\n', '        totalSupply -= value;\n', '        balanceOf[msg.sender] -= value;\n', '        return true;\n', '    }\n', '\n', '    function transferToMALW(uint256 value, string memory malwAddress) public returns (bool) {\n', '        require(value <= balanceOf[msg.sender]);\n', '        burn(value);\n', '        emit TransferToMALW(msg.sender, value, malwAddress);\n', '        return true;\n', '    }\n', '}']