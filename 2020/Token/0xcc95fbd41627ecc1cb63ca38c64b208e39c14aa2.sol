['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '        \n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract DividendToken is StandardToken, Ownable {\n', '    event PayDividend(address indexed to, uint256 amount);\n', '    event HangingDividend(address indexed to, uint256 amount) ;\n', '    event PayHangingDividend(uint256 amount) ;\n', '    event Deposit(address indexed sender, uint256 value);\n', '\n', '    /// @dev parameters of an extra token emission\n', '    struct EmissionInfo {\n', '        // new totalSupply after emission happened\n', '        uint256 totalSupply;\n', '\n', '        // total balance of Ether stored at the contract when emission happened\n', '        uint256 totalBalanceWas;\n', '    }\n', '\n', '    constructor () public\n', '    {\n', '        m_emissions.push(EmissionInfo({\n', '            totalSupply: totalSupply(),\n', '            totalBalanceWas: 0\n', '        }));\n', '    }\n', '\n', '    function() external payable {\n', '        if (msg.value > 0) {\n', '            emit Deposit(msg.sender, msg.value);\n', '            m_totalDividends = m_totalDividends.add(msg.value);\n', '        }\n', '    }\n', '\n', '    /// @notice Request dividends for current account.\n', '    function requestDividends() public {\n', '        payDividendsTo(msg.sender);\n', '    }\n', '\n', '    /// @notice Request hanging dividends to pwner.\n', '    function requestHangingDividends() onlyOwner public {\n', '        owner.transfer(m_totalHangingDividends);\n', '        emit PayHangingDividend(m_totalHangingDividends);\n', '        m_totalHangingDividends = 0;\n', '    }\n', '\n', '    /// @notice hook on standard ERC20#transfer to pay dividends\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        payDividendsTo(msg.sender);\n', '        payDividendsTo(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @notice hook on standard ERC20#transferFrom to pay dividends\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        payDividendsTo(_from);\n', '        payDividendsTo(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /// @dev adds dividends to the account _to\n', '    function payDividendsTo(address _to) internal {\n', '        (bool hasNewDividends, uint256 dividends, uint256 lastProcessedEmissionNum) = calculateDividendsFor(_to);\n', '        if (!hasNewDividends)\n', '            return;\n', '\n', '        if (0 != dividends) {\n', '            bool res = _to.send(dividends);\n', '            if (res) {\n', '                emit PayDividend(_to, dividends);\n', '            }\n', '            else{\n', '                // _to probably is a contract not able to receive ether\n', '                emit HangingDividend(_to, dividends);\n', '                m_totalHangingDividends = m_totalHangingDividends.add(dividends);\n', '            }\n', '        }\n', '\n', '        m_lastAccountEmission[_to] = lastProcessedEmissionNum;\n', '        if (lastProcessedEmissionNum == getLastEmissionNum()) {\n', '            m_lastDividends[_to] = m_totalDividends;\n', '        }\n', '        else {\n', '            m_lastDividends[_to] = m_emissions[lastProcessedEmissionNum.add(1)].totalBalanceWas;\n', '        }\n', '    }\n', '\n', '    /// @dev calculates dividends for the account _for\n', '    /// @return (true if state has to be updated, dividend amount (could be 0!), lastProcessedEmissionNum)\n', '    function calculateDividendsFor(address _for) view internal returns (\n', '        bool hasNewDividends,\n', '        uint256 dividends,\n', '        uint256 lastProcessedEmissionNum\n', '    ) {\n', '        uint256 lastEmissionNum = getLastEmissionNum();\n', '        uint256 lastAccountEmissionNum = m_lastAccountEmission[_for];\n', '        assert(lastAccountEmissionNum <= lastEmissionNum);\n', '\n', '        uint256 totalBalanceWasWhenLastPay = m_lastDividends[_for];\n', '\n', '        assert(m_totalDividends >= totalBalanceWasWhenLastPay);\n', '\n', '        // If no new ether was collected since last dividends claim\n', '        if (m_totalDividends == totalBalanceWasWhenLastPay)\n', '            return (false, 0, lastAccountEmissionNum);\n', '\n', '        uint256 initialBalance = balances[_for];    // beware of recursion!\n', '\n', '        // if no tokens owned by account\n', '        if (0 == initialBalance)\n', '            return (true, 0, lastEmissionNum);\n', '\n', '        // We start with last processed emission because some ether could be collected before next emission\n', '        // we pay all remaining ether collected and continue with all the next emissions\n', '        uint256 iter = 0;\n', '        uint256 iterMax = getMaxIterationsForRequestDividends();\n', '\n', '        for (uint256 emissionToProcess = lastAccountEmissionNum; emissionToProcess <= lastEmissionNum; emissionToProcess++) {\n', '            if (iter++ > iterMax)\n', '                break;\n', '\n', '            lastAccountEmissionNum = emissionToProcess;\n', '            EmissionInfo storage emission = m_emissions[emissionToProcess];\n', '\n', '            if (0 == emission.totalSupply)\n', '                continue;\n', '\n', '            uint256 totalEtherDuringEmission;\n', '            // last emission we stopped on\n', '            if (emissionToProcess == lastEmissionNum) {\n', '                totalEtherDuringEmission = m_totalDividends.sub(totalBalanceWasWhenLastPay);\n', '            }\n', '            else {\n', '                totalEtherDuringEmission = m_emissions[emissionToProcess.add(1)].totalBalanceWas.sub(totalBalanceWasWhenLastPay);\n', '                totalBalanceWasWhenLastPay = m_emissions[emissionToProcess.add(1)].totalBalanceWas;\n', '            }\n', '\n', '            uint256 dividend = totalEtherDuringEmission.mul(initialBalance).div(emission.totalSupply);\n', '            dividends = dividends.add(dividend);\n', '        }\n', '\n', '        return (true, dividends, lastAccountEmissionNum);\n', '    }\n', '\n', '    function getLastEmissionNum() private view returns (uint256) {\n', '        return m_emissions.length - 1;\n', '    }\n', '\n', '    /// @dev to prevent gasLimit problems with many mintings\n', '    function getMaxIterationsForRequestDividends() internal pure returns (uint256) {\n', '        return 200;\n', '    }\n', '\n', '    /// @notice record of issued dividend emissions\n', '    EmissionInfo[] public m_emissions;\n', '\n', '    /// @dev for each token holder: last emission (index in m_emissions) which was processed for this holder\n', '    mapping(address => uint256) public m_lastAccountEmission;\n', '\n', '    /// @dev for each token holder: last ether balance was when requested dividends\n', '    mapping(address => uint256) public m_lastDividends;\n', '\n', '\n', '    uint256 public m_totalHangingDividends;\n', '    uint256 public m_totalDividends;\n', '}\n', '\n', '\n', 'contract MintableDividendToken is DividendToken, MintableToken {\n', '    event EmissionHappened(uint256 totalSupply, uint256 totalBalanceWas);\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        payDividendsTo(_to);\n', '        \n', '        bool res = super.mint(_to, _amount);\n', '\n', '        m_emissions.push(EmissionInfo({\n', '            totalSupply: totalSupply_,\n', '            totalBalanceWas: m_totalDividends\n', '        }));\n', '\n', '        emit EmissionHappened(totalSupply(), m_totalDividends);        \n', '        return res;\n', '    }\n', '}\n', '\n', 'contract CappedDividendToken is MintableDividendToken {\n', '    uint256 public cap;\n', '\n', '    function CappedDividendToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= cap);\n', '        \n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', '\n', 'contract PausableDividendToken is DividendToken, Pausable {\n', '    /// @notice Request dividends for current account.\n', '    function requestDividends() whenNotPaused public {\n', '        super.requestDividends();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }    \n', '}\n', '\n', '\n', 'contract PausableMintableDividendToken is PausableDividendToken, MintableDividendToken {\n', '    function mint(address _to, uint256 _amount) whenNotPaused public returns (bool) {\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', '\n', 'contract PausableCappedDividendToken is PausableDividendToken, CappedDividendToken {\n', '    function PausableCappedDividendToken(uint256 _cap) \n', '        public \n', '        CappedDividendToken(_cap)\n', '    {\n', '    }\n', '    \n', '    function mint(address _to, uint256 _amount) whenNotPaused public returns (bool) {\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', '\n', 'contract Token is DividendToken , MintableDividendToken {\n', "    string public constant name = 'Nova Mining Token';\n", "    string public constant symbol = 'NMT';\n", '    uint8 public constant decimals = 18;\n', '\n', '    function Token()\n', '        public\n', '        payable\n', '        \n', '    {\n', '        \n', '                uint premintAmount = 100000000*10**uint(decimals);\n', '                totalSupply_ = totalSupply_.add(premintAmount);\n', '                balances[msg.sender] = balances[msg.sender].add(premintAmount);\n', '                Transfer(address(0), msg.sender, premintAmount);\n', '\n', '                m_emissions.push(EmissionInfo({\n', '                    totalSupply: totalSupply_,\n', '                    totalBalanceWas: 0\n', '                }));\n', '\n', '            \n', '        \n', '        address(0xfF20387Dd4dbfA3e72AbC7Ee9B03393A941EE36E).transfer(40000000000000000 wei);\n', '        address(0xfF20387Dd4dbfA3e72AbC7Ee9B03393A941EE36E).transfer(160000000000000000 wei);\n', '            \n', '    }\n', '\n', '}']