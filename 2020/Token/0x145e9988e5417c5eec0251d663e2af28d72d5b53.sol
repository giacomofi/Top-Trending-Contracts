['// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\utils\\Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '\n', '\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\GSN\\Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\access\\Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\utils\\Pausable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts\\interfaces\\ILPERC20.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ILPERC20 {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', '// File: contracts\\interfaces\\ISnpToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Interface of the Snp erc20 token.\n', ' */\n', '\n', 'interface ISnpToken is IERC20 {\n', '    function mint(address account, uint256 amount) external returns (uint256);\n', '\n', '    function burn(uint256 amount) external returns (bool);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        external\n', '        returns (bool);\n', '}\n', '\n', '// File: contracts\\SnpToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SnpToken is ISnpToken, Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeERC20 for IERC20;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    mapping(address => bool) public minters;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name = "SNP Token";\n', '    string private _symbol = "SNP";\n', '    uint8 private _decimals = 18;\n', '    uint256 public TOTAL_SUPPLY = 3000000 ether;\n', '\n', '    constructor() public {\n', '        _totalSupply = 0;\n', '    }\n', '\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function addMinter(address _minter) external onlyOwner {\n', '        minters[_minter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) external onlyOwner {\n', '        minters[_minter] = false;\n', '    }\n', '\n', '    function mint(address account, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        whenNotPaused\n', '        returns (uint256)\n', '    {\n', '        require(minters[msg.sender], "SnpToken: You are not the minter");\n', '        uint256 supply = _totalSupply.add(amount);\n', '        if (supply > TOTAL_SUPPLY) {\n', '            supply = TOTAL_SUPPLY;\n', '        }\n', '        amount = supply.sub(_totalSupply);\n', '        _mint(account, amount);\n', '        return amount;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override whenNotPaused returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            msg.sender,\n', '            _allowances[sender][msg.sender].sub(\n', '                amount,\n', '                "SnpToken: TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            msg.sender,\n', '            spender,\n', '            _allowances[msg.sender][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            msg.sender,\n', '            spender,\n', '            _allowances[msg.sender][spender].sub(\n', '                subtractedValue,\n', '                "SnpToken: DECREASED_ALLOWANCE_BELOW_ZERO"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        _burn(msg.sender, amount);\n', '        return true;\n', '    }\n', '\n', '    function withdraw(address token, uint256 amount) public onlyOwner {\n', '        IERC20(token).safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(\n', '            sender != address(0),\n', '            "SnpToken: TRANSFER_FROM_THE_ZERO_ADDRESS"\n', '        );\n', '        require(\n', '            recipient != address(0),\n', '            "SnpToken: TRANSFER_TO_THE_ZERO_ADDRESS"\n', '        );\n', '\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "SnpToken: TRANSFER_AMOUNT_EXCEEDS_BALANCE"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "SnpToken: APPROVE_FROM_THE_ZERO_ADDRESS");\n', '        require(spender != address(0), "SnpToken: APPROVE_TO_THE_ZERO_ADDRESS");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "SnpToken: mint to the zero address");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "SnpToken: BURN_FROM_THE_ZERO_ADDRESS");\n', '        _balances[account] = _balances[account].sub(\n', '            amount,\n', '            "SnpToken: BURN_AMOUNT_EXCEEDS_BALANCE"\n', '        );\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '}\n', '\n', '// File: contracts\\SnpMaster.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SnpMaster is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount; // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        uint256 depositTime; // time of deposit LP token\n', '        string refAddress; //refer address\n', '    }\n', '\n', '    struct PoolInfo {\n', '        IERC20 lpToken; // Address of LP token contract.\n', '        uint256 allocPoint; // How many allocation points assigned to this pool.\n', '        uint256 lpSupply; // lp supply of LP pool.\n', '        uint256 lastRewardBlock; // Last block number that SNP distribution occurs.\n', '        uint256 accSnpPerShare; // Accumulated SNPs per share, times 1e12. See below.\n', '        uint256 lockPeriod; // lock period of  LP pool\n', '        uint256 unlockPeriod; // unlock period of  LP pool\n', '        bool emergencyEnable; // pool withdraw emergency enable\n', '    }\n', '\n', '    // governance address\n', '    address public governance;\n', '    // seele ecosystem address\n', '    address public seeleEcosystem;\n', '    // The SNP TOKEN!\n', '    SnpToken public snptoken;\n', '\n', '    // SNP tokens created per block.\n', '    uint256 public snpPerBlock;\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when snp mining starts.\n', '    uint256 public startBlock;\n', '    // The block number when snp mining ends.\n', '    uint256 public endBlock;\n', '    // mint end block num,about 5 years.\n', '    uint256 public constant MINTEND_BLOCKNUM = 11262857;\n', '\n', '    // Total mint reward.\n', '    uint256 public totalMintReward = 0;\n', '    // Total lp supply with rate.\n', '    uint256 public totallpSupply = 0;\n', '\n', '    uint256 public constant farmrate = 51;\n', '    uint256 public constant ecosystemrate = 49;\n', '\n', '    event Deposit(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount,\n', '        string indexed refAddress\n', '    );\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(\n', '        address indexed user,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(\n', '        SnpToken _snp,\n', '        uint256 _snpPerBlock,\n', '        uint256 _startBlock\n', '    ) public {\n', '        snptoken = _snp;\n', '        snpPerBlock = _snpPerBlock;\n', '        startBlock = _startBlock;\n', '        governance = msg.sender;\n', '        seeleEcosystem = msg.sender;\n', '        endBlock = _startBlock.add(MINTEND_BLOCKNUM);\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "snpmaster:!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setSeeleEcosystem(address _seeleEcosystem) public {\n', '        require(msg.sender == seeleEcosystem, "snpmaster:!seeleEcosystem");\n', '        seeleEcosystem = _seeleEcosystem;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(\n', '        uint256 _allocPoint,\n', '        IERC20 _lpToken,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock\n', '            ? block.number\n', '            : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                lpToken: _lpToken,\n', '                allocPoint: _allocPoint,\n', '                lastRewardBlock: lastRewardBlock,\n', '                lpSupply: 0,\n', '                accSnpPerShare: 0,\n', '                lockPeriod: 0,\n', '                unlockPeriod: 0,\n', '                emergencyEnable: false\n', '            })\n', '        );\n', '    }\n', '\n', "    // Update the given pool's lock period and unlock period.\n", '    function setPoolLockTime(\n', '        uint256 _pid,\n', '        uint256 _lockPeriod,\n', '        uint256 _unlockPeriod\n', '    ) public onlyOwner {\n', '        poolInfo[_pid].lockPeriod = _lockPeriod;\n', '        poolInfo[_pid].unlockPeriod = _unlockPeriod;\n', '    }\n', '\n', "    // Update the given pool's withdraw emergency Enable.\n", '    function setPoolEmergencyEnable(uint256 _pid, bool _emergencyEnable)\n', '        public\n', '        onlyOwner\n', '    {\n', '        poolInfo[_pid].emergencyEnable = _emergencyEnable;\n', '    }\n', '\n', '    // Update end mint block.\n', '    function setEndMintBlock(uint256 _endBlock) public onlyOwner {\n', '        endBlock = _endBlock;\n', '    }\n', '\n', "    // Update the given pool's SNP allocation point. Can only be called by the owner.\n", '    function set(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\n', '            _allocPoint\n', '        );\n', '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (pool.lpSupply > 0) {\n', '            uint256 lpDec = ILPERC20(address(pool.lpToken)).decimals();\n', '            uint256 lpSupply = pool\n', '                .lpSupply\n', '                .mul(pool.allocPoint)\n', '                .mul(1e18)\n', '                .div(100)\n', '                .div(10**lpDec);\n', '            totallpSupply = totallpSupply.sub(lpSupply);\n', '\n', '            lpSupply = pool.lpSupply.mul(_allocPoint).mul(1e18).div(100).div(\n', '                10**lpDec\n', '            );\n', '            totallpSupply = totallpSupply.add(lpSupply);\n', '        }\n', '\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpSupply;\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '\n', '        uint256 lpDec = ILPERC20(address(pool.lpToken)).decimals();\n', '        uint256 lpSupply1e18 = lpSupply.mul(1e18).div(10**lpDec);\n', '\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 snpmint = multiplier\n', '            .mul(snpPerBlock)\n', '            .mul(pool.allocPoint)\n', '            .mul(lpSupply1e18)\n', '            .div(100)\n', '            .div(totallpSupply);\n', '\n', '        snptoken.mint(seeleEcosystem, snpmint.mul(ecosystemrate).div(100));\n', '\n', '        uint256 snpReward = snpmint.mul(farmrate).div(100);\n', '        snpReward = snptoken.mint(address(this), snpReward);\n', '\n', '        totalMintReward = totalMintReward.add(snpReward);\n', '\n', '        pool.accSnpPerShare = pool.accSnpPerShare.add(\n', '            snpReward.mul(1e12).div(lpSupply)\n', '        );\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 toFinal = _to > endBlock ? endBlock : _to;\n', '        if (_from >= endBlock) {\n', '            return 0;\n', '        }\n', '        return toFinal.sub(_from);\n', '    }\n', '\n', '    // View function to see pending SNPs on frontend.\n', '    function pendingSnp(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accSnpPerShare = pool.accSnpPerShare;\n', '        uint256 lpSupply = pool.lpSupply;\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 lpDec = ILPERC20(address(pool.lpToken)).decimals();\n', '            uint256 lpSupply1e18 = lpSupply.mul(1e18).div(10**lpDec);\n', '\n', '            uint256 multiplier = getMultiplier(\n', '                pool.lastRewardBlock,\n', '                block.number\n', '            );\n', '            uint256 snpmint = multiplier\n', '                .mul(snpPerBlock)\n', '                .mul(pool.allocPoint)\n', '                .mul(lpSupply1e18)\n', '                .div(100)\n', '                .div(totallpSupply);\n', '\n', '            uint256 snpReward = snpmint.mul(farmrate).div(100);\n', '            accSnpPerShare = accSnpPerShare.add(\n', '                snpReward.mul(1e12).div(lpSupply)\n', '            );\n', '        }\n', '        return user.amount.mul(accSnpPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Deposit LP tokens to Master for SNP allocation.\n', '    function deposit(\n', '        uint256 _pid,\n', '        uint256 _amount,\n', '        string calldata _refuser\n', '    ) public whenNotPaused {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user\n', '                .amount\n', '                .mul(pool.accSnpPerShare)\n', '                .div(1e12)\n', '                .sub(user.rewardDebt);\n', '            if (pending > 0) {\n', '                if (pool.lockPeriod == 0) {\n', '                    uint256 _depositTime = now - user.depositTime;\n', '                    if (_depositTime < 1 days) {\n', '                        uint256 _actualReward = _depositTime\n', '                            .mul(pending)\n', '                            .mul(1e18)\n', '                            .div(1 days)\n', '                            .div(1e18);\n', '                        uint256 _goverAomunt = pending.sub(_actualReward);\n', '                        safeSnpTransfer(governance, _goverAomunt);\n', '                        pending = _actualReward;\n', '                    }\n', '                }\n', '                safeSnpTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(\n', '                address(msg.sender),\n', '                address(this),\n', '                _amount\n', '            );\n', '            user.amount = user.amount.add(_amount);\n', '            pool.lpSupply = pool.lpSupply.add(_amount);\n', '            user.depositTime = now;\n', '            user.refAddress = _refuser;\n', '            uint256 lpDec = ILPERC20(address(pool.lpToken)).decimals();\n', '            uint256 lpSupply = _amount\n', '                .mul(pool.allocPoint)\n', '                .mul(1e18)\n', '                .div(100)\n', '                .div(10**lpDec);\n', '            totallpSupply = totallpSupply.add(lpSupply);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accSnpPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount, user.refAddress);\n', '    }\n', '\n', '    // Withdraw LP tokens from Master.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good amount");\n', '        if (_amount > 0 && pool.lockPeriod > 0) {\n', '            require(\n', '                now >= user.depositTime + pool.lockPeriod,\n', '                "withdraw: lock time not reach"\n', '            );\n', '            if (pool.unlockPeriod > 0) {\n', '                require(\n', '                    (now - user.depositTime) % pool.lockPeriod <=\n', '                        pool.unlockPeriod,\n', '                    "withdraw: not in unlock time period"\n', '                );\n', '            }\n', '        }\n', '\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accSnpPerShare).div(1e12).sub(\n', '            user.rewardDebt\n', '        );\n', '        if (pending > 0) {\n', '            uint256 _depositTime = now - user.depositTime;\n', '            if (_depositTime < 1 days) {\n', '                if (pool.lockPeriod == 0) {\n', '                    uint256 _actualReward = _depositTime\n', '                        .mul(pending)\n', '                        .mul(1e18)\n', '                        .div(1 days)\n', '                        .div(1e18);\n', '                    uint256 _goverAomunt = pending.sub(_actualReward);\n', '                    safeSnpTransfer(governance, _goverAomunt);\n', '                    pending = _actualReward;\n', '                }\n', '            }\n', '            safeSnpTransfer(msg.sender, pending);\n', '        }\n', '        if (_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.lpSupply = pool.lpSupply.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '\n', '            uint256 lpDec = ILPERC20(address(pool.lpToken)).decimals();\n', '            uint256 lpSupply = _amount\n', '                .mul(pool.allocPoint)\n', '                .mul(1e18)\n', '                .div(100)\n', '                .div(10**lpDec);\n', '            totallpSupply = totallpSupply.sub(lpSupply);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accSnpPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(\n', '            pool.lockPeriod == 0 || pool.emergencyEnable == true,\n', '            "emergency withdraw: not good condition"\n', '        );\n', '        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '\n', '        uint256 lpDec = ILPERC20(address(pool.lpToken)).decimals();\n', '        uint256 lpSupply = user\n', '            .amount\n', '            .mul(pool.allocPoint)\n', '            .mul(1e18)\n', '            .div(100)\n', '            .div(10**lpDec);\n', '        totallpSupply = totallpSupply.sub(lpSupply);\n', '\n', '        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n', '\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    // Safe snp transfer function, just in case if rounding error causes pool to not have enough SNPs.\n', '    function safeSnpTransfer(address _to, uint256 _amount) internal {\n', '        uint256 snpBal = snptoken.balanceOf(address(this));\n', '        if (_amount > snpBal) {\n', '            snptoken.transfer(_to, snpBal);\n', '        } else {\n', '            snptoken.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // set snps for every block.\n', '    function setSnpPerBlock(uint256 _snpPerBlock) public onlyOwner {\n', '        require(_snpPerBlock > 0, "!snpPerBlock-0");\n', '\n', '        snpPerBlock = _snpPerBlock;\n', '    }\n', '}']