['pragma solidity ^0.5.13;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.13;\n', '\n', 'interface Callable {\n', '\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\n', '}\n', '\n', 'contract BerserkToken {\n', '\n', '\tuint256 constant private FLOAT_SCALAR = 2**64;\n', '\tuint256 constant private INITIAL_SUPPLY = 10000 ether; \n', '\tuint256 public BURN_RATE = 5;\n', '\t\n', '\taddress public burnPoolAddress= address(0x0);\n', '\tuint256 public burnPoolAmount=0;\n', '\tuint256 public burnPoolAmountPrevious=0;\n', '\tbool public berserkSwapBool= false;\n', '\n', '\tstring constant public name = "Berserk";\n', '\tstring constant public symbol = "BER";\n', '\tuint8 constant public decimals = 18;\n', '\t\n', '\tmapping (address => bool) public minters;\n', '\taddress public governance;\n', '\taddress public burnOwner;\n', '\taddress public berserkSwapOwner;\n', '\taddress public berserkSwapAddress = address(0x0);\n', '\t\n', '    mapping(address => bool) public isAdmin;\n', '\n', '\tstruct User {\n', '\t\tbool whitelisted;\n', '\t\tuint256 balance;\n', '\t\tmapping(address => uint256) allowance;\n', '\t}\n', '\n', '\tstruct Info {\n', '\t\tuint256 totalSupply;\n', '\t\tuint256 burnedSupply;\n', '\t\tmapping(address => User) users;\n', '\t}\n', '\tInfo private info;\n', '\n', '\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\n', '\tevent Burn(uint256 tokens);\n', '\tevent Mint(uint256 amount);\n', '\n', '\tconstructor() public {\n', '\t\tinfo.totalSupply = INITIAL_SUPPLY;\n', '\t\tinfo.users[msg.sender].balance = INITIAL_SUPPLY;\n', '\t\temit Transfer(address(0x0), msg.sender, INITIAL_SUPPLY);\n', '\t\tinfo.burnedSupply = 0;\n', '        governance = msg.sender;\n', '        burnOwner= msg.sender;\n', '        isAdmin[msg.sender]=true;\n', '        berserkSwapOwner = msg.sender;\n', '\t}\n', '\n', '\tfunction burn(uint256 _tokens) external {\n', '\t\trequire(balanceOf(msg.sender) >= _tokens);\n', '\t\tinfo.users[msg.sender].balance -= _tokens;\n', '\t\tuint256 _burnedAmount = _tokens;\n', '\t\tinfo.totalSupply -= _burnedAmount;\n', '\t\temit Transfer(msg.sender, address(0x0), _burnedAmount);\n', '\t\tinfo.burnedSupply= info.burnedSupply + _tokens;\n', '\t\temit Burn(_burnedAmount);\n', '\t}\n', '    \n', '\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\n', '\t\t_transfer(msg.sender, _to, _tokens);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\n', '\t\tinfo.users[msg.sender].allowance[_spender] = _tokens;\n', '\t\temit Approval(msg.sender, _spender, _tokens);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\n', '\t\trequire(info.users[_from].allowance[msg.sender] >= _tokens);\n', '\t\tinfo.users[_from].allowance[msg.sender] -= _tokens;\n', '\t\t_transfer(_from, _to, _tokens);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\t function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\t\n', '\t function addMinter(address _minter) public {\n', '        require(msg.sender == governance, "!governance");\n', '        minters[_minter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) public {\n', '        require(msg.sender == governance, "!governance");\n', '        minters[_minter] = false;\n', '    }\n', '    \n', '    function bulkTransfer(address[] calldata _receivers, uint256[] calldata _amounts) external {\n', '\t\trequire(_receivers.length == _amounts.length);\n', '\t\tfor (uint256 i = 0; i < _receivers.length; i++) {\n', '\t\t\t_transfer(msg.sender, _receivers[i], _amounts[i]);\n', '\t\t}\n', '\t}\n', '    \n', '    function mint(address account, uint256 amount) public {\n', '        require(minters[msg.sender], "!minter");\n', '        _mint(account, amount);\n', '    }\n', '    \n', '    function _mint(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        info.totalSupply = info.totalSupply+amount;\n', '        info.users[msg.sender].balance = info.users[msg.sender].balance+amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    \n', '    function renounceBurnOwnership () external {\n', '        require (msg.sender == burnOwner);\n', '        burnOwner= address(0x0);\n', '    }\n', '    \n', '    function setBurnAmount(uint256 _burnAmount) public{\n', '        require(msg.sender == burnOwner, "Not authorized!");\n', '        BURN_RATE= _burnAmount;\n', '    }\n', '    \n', '    function setBurnPoolAddress(address _burnPoolAddress) public{\n', '        require(msg.sender == burnOwner, "Not authorized!");\n', '        burnPoolAddress= _burnPoolAddress;\n', '    }\n', '\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn info.totalSupply;\n', '\t}\n', '\t\n', '\tfunction burnedSupply() public view returns (uint256){\n', '\t    return info.burnedSupply;\n', '\t}\n', '\t\n', '\tfunction resetBurnAmount() public {\n', '\t    require(isAdmin[msg.sender]==true);\n', '\t    burnPoolAmountPrevious= burnPoolAmount;\n', '\t    burnPoolAmount= 0;\n', '\t}\n', '\t\n', '\tfunction getBurnAmount() public view returns (uint256){\n', '\t    return burnPoolAmount;\n', '\t}\n', '\t\n', '\tfunction getBurnAmountPrevious() public view returns (uint256){\n', '\t    return burnPoolAmountPrevious;\n', '\t}\n', '    \n', '    function getBurnPoolAddress() public view returns (address){\n', '        return burnPoolAddress;\n', '    }\n', '\t\n', '\tfunction setAdminStatus(address _admin) external {\n', '\t    require (msg.sender == governance);\n', '        isAdmin[_admin] = true;\n', '    }\n', '    \n', '    function setBerserkSwapAddress (address _berserkSwapAddress) external {\n', '        require (msg.sender == berserkSwapOwner);\n', '        berserkSwapAddress = _berserkSwapAddress;\n', '    }\n', '    \n', '    function setBerserkSwapBool () external {\n', '        require (msg.sender == berserkSwapOwner);\n', '        berserkSwapBool = true;\n', '    }\n', '\n', '\tfunction balanceOf(address _user) public view returns (uint256) {\n', '\t\treturn info.users[_user].balance ;\n', '\t}\n', '\n', '\tfunction allowance(address _user, address _spender) public view returns (uint256) {\n', '\t\treturn info.users[_user].allowance[_spender];\n', '\t}\n', '\n', '\tfunction allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 userBalance, uint256 totalBurnedSupply) {\n', '\t\treturn (totalSupply(), balanceOf(_user), burnedSupply());\n', '\t}\n', '\t\n', '\tfunction allInfoBurned() public view returns (uint256, uint256){\n', '\t    return (burnPoolAmount, burnPoolAmountPrevious);\n', '\t}\n', '\n', '\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (uint256) {\n', '\t\trequire(balanceOf(_from) >= _tokens);\n', '\t\tinfo.users[_from].balance -= _tokens;\n', '\t\tuint256 _burnedAmount = _tokens * BURN_RATE;\n', '\t\t_burnedAmount= _burnedAmount / 100;\n', '\t\tuint256 _transferred = _tokens - _burnedAmount;\n', '\n', '        if (berserkSwapBool == true) {\n', '            if (_from == berserkSwapAddress || _to == berserkSwapAddress)\n', '                {\n', '                _burnedAmount = _tokens * BURN_RATE ;\n', '                _burnedAmount= _burnedAmount / 200;\n', '                _transferred = _tokens - _burnedAmount;\n', '                \n', '                info.users[_to].balance += _transferred;\n', '    \t    \temit Transfer(_from, _to, _transferred);\n', '    \t\t\t_burnedAmount /= 2;\n', '    \t\t\t\n', '    \t\t\temit Transfer(_from, burnPoolAddress, _burnedAmount);\n', '    \t\t\tburnPoolAmount= burnPoolAmount+ _burnedAmount;\n', '    \t\t\t\n', '    \t\t\tinfo.users[burnPoolAddress].balance =  info.users[burnPoolAddress].balance+ _burnedAmount;\n', '    \t\t\tinfo.totalSupply= info.totalSupply - _burnedAmount;\n', '    \t\t\t\n', '    \t\t\temit Transfer(_from, address(0x0), _burnedAmount);\n', '    \t\t\tinfo.burnedSupply= info.burnedSupply + _burnedAmount;\n', '    \t\t\temit Burn(_burnedAmount);\n', '                }\n', '                \n', '            else {\n', '                info.users[_to].balance += _transferred;\n', '    \t    \temit Transfer(_from, _to, _transferred);\n', '    \t\t\t_burnedAmount /= 2;\n', '    \t\t\temit Transfer(_from, burnPoolAddress, _burnedAmount);\n', '    \t\t\tburnPoolAmount= burnPoolAmount+ _burnedAmount;\n', '    \t\t\t\n', '    \t\t\tinfo.users[burnPoolAddress].balance =  info.users[burnPoolAddress].balance+ _burnedAmount;\n', '    \t\t\tinfo.totalSupply= info.totalSupply - _burnedAmount;\n', '    \t\t\t\n', '    \t\t\temit Transfer(_from, address(0x0), _burnedAmount);\n', '    \t\t\tinfo.burnedSupply= info.burnedSupply + _burnedAmount;\n', '    \t\t\temit Burn(_burnedAmount);\n', '            }\n', '        }\n', '\n', '        else {\n', '    \t\tif (burnPoolAddress != address(0x0)) {\n', '    \t    \tinfo.users[_to].balance = info.users[_to].balance + _transferred;\n', '    \t    \temit Transfer(_from, _to, _transferred);\n', '    \t\t\t_burnedAmount /= 2;\n', '    \t\t\temit Transfer(_from, burnPoolAddress, _burnedAmount);\n', '    \t\t\tburnPoolAmount= burnPoolAmount+ _burnedAmount;\n', '    \t\t\t\n', '    \t\t\tinfo.users[burnPoolAddress].balance =  info.users[burnPoolAddress].balance+ _burnedAmount;\n', '    \t\t\tinfo.totalSupply= info.totalSupply - _burnedAmount;\n', '    \t\t\t\n', '    \t\t\temit Transfer(_from, address(0x0), _burnedAmount);\n', '    \t\t\tinfo.burnedSupply= info.burnedSupply + _burnedAmount;\n', '    \t\t\temit Burn(_burnedAmount);\n', '    \t\t}\n', '    \t\t\n', '    \t\telse {\n', '    \t\t    _transferred= _tokens;\n', '    \t\t    info.users[_to].balance = info.users[_to].balance + _tokens;\n', '    \t\t    emit Transfer(_from, _to, _tokens);\n', '    \t\t}\n', '        }\n', '\t\t\n', '\t\treturn _transferred;\n', '\t}\n', '\n', '\t modifier onlyAdmin {\n', '        require(isAdmin[msg.sender], "OnlyAdmin methods called by non-admin.");\n', '        _;\n', '    }\n', '}']