['// File: contracts/interfaces/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IOneSwapToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface IOneSwapBlackList {\n', '    event OwnerChanged(address);\n', '    event AddedBlackLists(address[]);\n', '    event RemovedBlackLists(address[]);\n', '\n', '    function owner()external view returns (address);\n', '    function newOwner()external view returns (address);\n', '    function isBlackListed(address)external view returns (bool);\n', '\n', '    function changeOwner(address ownerToSet) external;\n', '    function updateOwner() external;\n', '    function addBlackLists(address[] calldata  accounts)external;\n', '    function removeBlackLists(address[] calldata  accounts)external;\n', '}\n', '\n', 'interface IOneSwapToken is IERC20, IOneSwapBlackList{\n', '    function burn(uint256 amount) external;\n', '    function burnFrom(address account, uint256 amount) external;\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '    function multiTransfer(uint256[] calldata mixedAddrVal) external returns (bool);\n', '}\n', '\n', '// File: contracts/libraries/SafeMath256.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library SafeMath256 {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/OneSwapBlackList.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'abstract contract OneSwapBlackList is IOneSwapBlackList {\n', '    address private _owner;\n', '    address private _newOwner;\n', '    mapping(address => bool) private _isBlackListed;\n', '\n', '    constructor() public {\n', '        _owner = msg.sender;\n', '    }\n', '\n', '    function owner() public view override returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function newOwner() public view override returns (address) {\n', '        return _newOwner;\n', '    }\n', '\n', '    function isBlackListed(address user) public view override returns (bool) {\n', '        return _isBlackListed[user];\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "OneSwapToken: MSG_SENDER_IS_NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    modifier onlyNewOwner() {\n', '        require(msg.sender == _newOwner, "OneSwapToken: MSG_SENDER_IS_NOT_NEW_OWNER");\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address ownerToSet) public override onlyOwner {\n', '        require(ownerToSet != address(0), "OneSwapToken: INVALID_OWNER_ADDRESS");\n', '        require(ownerToSet != _owner, "OneSwapToken: NEW_OWNER_IS_THE_SAME_AS_CURRENT_OWNER");\n', '        require(ownerToSet != _newOwner, "OneSwapToken: NEW_OWNER_IS_THE_SAME_AS_CURRENT_NEW_OWNER");\n', '\n', '        _newOwner = ownerToSet;\n', '    }\n', '\n', '    function updateOwner() public override onlyNewOwner {\n', '        _owner = _newOwner;\n', '        emit OwnerChanged(_newOwner);\n', '    }\n', '\n', '    function addBlackLists(address[] calldata _evilUser) public override onlyOwner {\n', '        for (uint i = 0; i < _evilUser.length; i++) {\n', '            _isBlackListed[_evilUser[i]] = true;\n', '        }\n', '        emit AddedBlackLists(_evilUser);\n', '    }\n', '\n', '    function removeBlackLists(address[] calldata _clearedUser) public override onlyOwner {\n', '        for (uint i = 0; i < _clearedUser.length; i++) {\n', '            delete _isBlackListed[_clearedUser[i]];\n', '        }\n', '        emit RemovedBlackLists(_clearedUser);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/OneSwapToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', 'contract OneSwapToken is IOneSwapToken, OneSwapBlackList {\n', '\n', '    using SafeMath256 for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private immutable _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint256 supply, uint8 decimals) public OneSwapBlackList() {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _totalSupply = supply;\n', '        _balances[msg.sender] = supply;\n', '    }\n', '\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view override returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender,\n', '                _allowances[sender][msg.sender].sub(amount, "OneSwapToken: TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "OneSwapToken: DECREASED_ALLOWANCE_BELOW_ZERO"));\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount) public virtual override {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public virtual override {\n', '        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, "OneSwapToken: BURN_AMOUNT_EXCEEDS_ALLOWANCE");\n', '\n', '        _approve(account, msg.sender, decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '\n', '    function multiTransfer(uint256[] calldata mixedAddrVal) public override returns (bool) {\n', '        for (uint i = 0; i < mixedAddrVal.length; i++) {\n', '            address to = address(mixedAddrVal[i]>>96);\n', '            uint256 value = mixedAddrVal[i]&(2**96-1);\n', '            _transfer(msg.sender, to, value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "OneSwapToken: TRANSFER_FROM_THE_ZERO_ADDRESS");\n', '        require(recipient != address(0), "OneSwapToken: TRANSFER_TO_THE_ZERO_ADDRESS");\n', '        _beforeTokenTransfer(sender, recipient);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "OneSwapToken: TRANSFER_AMOUNT_EXCEEDS_BALANCE");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "OneSwapToken: BURN_FROM_THE_ZERO_ADDRESS");\n', '        //if called from burnFrom, either blackListed msg.sender or blackListed account causes failure\n', '        _beforeTokenTransfer(account, address(0));\n', '        _balances[account] = _balances[account].sub(amount, "OneSwapToken: BURN_AMOUNT_EXCEEDS_BALANCE");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "OneSwapToken: APPROVE_FROM_THE_ZERO_ADDRESS");\n', '        require(spender != address(0), "OneSwapToken: APPROVE_TO_THE_ZERO_ADDRESS");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to) internal virtual view {\n', '        require(!isBlackListed(msg.sender), "OneSwapToken: MSG_SENDER_IS_BLACKLISTED_BY_TOKEN_OWNER");\n', '        require(!isBlackListed(from), "OneSwapToken: FROM_IS_BLACKLISTED_BY_TOKEN_OWNER");\n', '        require(!isBlackListed(to), "OneSwapToken: TO_IS_BLACKLISTED_BY_TOKEN_OWNER");\n', '    }\n', '\n', '}']