['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', ' \n', 'interface OLDIERC20 {\n', '    function transfer(address recipient, uint amount) external;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'abstract contract Owned is Context{\n', '    address payable public owner;\n', '    constructor() public {\n', '        owner = _msgSender();\n', '    }\n', '    modifier onlyOwner {\n', '        require(_msgSender() == owner, "!owner");\n', '        _;\n', '    }\n', '\t\n', '}\n', '\n', 'contract MFI is Owned, IERC20 {\n', '    using SafeMath for uint;\n', '    mapping (address => uint) private _balances;\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '    uint private _totalSupply;\n', '    uint private _cap;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint private _decimals;\n', '\n', '\tmapping (address => uint) private _minter;\n', '\tmodifier onlyMinter {\n', '        require(_minter[_msgSender()] == 1, "!minter");\n', '        _;\n', '    }\n', '\t\n', '    constructor () public {\n', "        _name = 'Multy.Finance';\n", "        _symbol = 'MFI';\n", '        _decimals = 18;\n', '        _cap = 30000*1e18;\n', '\t\t_minter[owner] = 1;\n', '    }\n', '\n', '\tfunction setMinter(address _addr) external onlyOwner{\n', '\t\t require(_addr != address(0), "MFI: zero address minter");\n', '\t\t_minter[_addr] = 1;\n', '\t}\n', '\t\n', '\tfunction unsetMinter(address _addr) external onlyOwner{\n', '\t\t require(_addr != address(0), "MFI: zero address minter");\n', '\t\t_minter[_addr] = 0;\n', '\t}\n', '\t\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() external view returns (uint) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() external view override returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\tfunction cap() external view returns (uint) {\n', '        return _cap;\n', '    }\n', '\t\n', '    function balanceOf(address account) external view override returns (uint) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint amount) external override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) external view override returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint amount) external override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\t\n', '    function mint(address account, uint amount) external onlyMinter{\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        require(_totalSupply.add(amount) <= _cap, "MFI: out of stock");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\t\n', '\tfunction inCaseWrongTokenTransfer(address _tokenAddr,uint _type) onlyOwner external {\n', '\t\trequire(_tokenAddr != address(this), "MFI: invalid address");\n', '        uint qty = IERC20(_tokenAddr).balanceOf(address(this));\n', '\t\tif(_type == 1)\n', '\t\t\tIERC20(_tokenAddr).transfer(_msgSender(), qty);\n', '\t\telse\n', '\t\t\tOLDIERC20(_tokenAddr).transfer(_msgSender(), qty);\n', '    }\n', '\n', '    function inCaseWrongEthTransfer() onlyOwner external{\n', '        (bool result, ) = _msgSender().call{value:address(this).balance}("");\n', '        require(result, "MFI: ETH Transfer Failed");\n', '    }\n', '\t\n', '\treceive() external payable {\n', '\n', '    }\n', '}']