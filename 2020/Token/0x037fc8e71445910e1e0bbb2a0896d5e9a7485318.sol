['/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-30\n', '*/\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', '//\n', '// Original work by Pine.Finance\n', '//  - https://github.com/pine-finance\n', '//\n', '// Authors:\n', '//  - Ignacio Mazzara <@nachomazzara>\n', '//  - Agustin Aguilar <@agusx1211>\n', '\n', '//\n', '//                                                                                                    \n', '//                                                /                                                   \n', '//                                                @,                                                  \n', '//                                               /&&                                                  \n', '//                                              &&%%&/                                                \n', '//                                            &%%%%&%%,..                                             \n', '//                                         */%&,*&&&&&&%%&*                                           \n', '//                                           /&%%%%%%%#.                                              \n', '//                                    ./%&%%%&#/%%%%&#&%%%&#(*.                                       \n', '//                                         .%%%%%%%&&%&/ ..,...                                       \n', '//                                       .*,%%%%%%%%%&&%%%%(                                          \n', '//                                     ,&&%%%&&*%%%%%%%%.*(#%&/                                       \n', '//                                  ./,(*,*,#%%%%%%%%%%%%%%%(,                                        \n', '//                                 ,(%%%%%%%%%%%%&%%%%%%%%%#&&%%%#/(*                                 \n', '//                                     *#%%%%%%%&%%%&%%#%%%%%%(                                       \n', '//                              .(####%%&%&#*&%%##%%%%%%%%%%%#.,,                                     \n', '//                                      ,&%%%%%###%%%%%%%%%%%%#&&.                                    \n', '//                             ..,(&%%%%%%%%%%%%%%%%%%&&%%%%#%&&%&%%%%&&#,                            \n', '//                           ,##//%((#*/#%%%%%%%%%%%%%%%%%%%%%&(.                                     \n', '//                                  (%%%%%%%%%%%%%%%%%%%#%%%%%%%%%&&&&#(*,                            \n', '//                                   ./%%%%&%%%%#%&%%%%%%##%%&&&&%%(*,                                \n', '//                                #%%%%%%&&%%%#%%%%%%%%%%%%%%%&#,*&&#.                                \n', '//                            /%##%(%&/ #%%%%%%%%%%%%%%%%%%%%%%%%%&%%%.                               \n', '//                                 *&%%%%&%%%%%%%%#%%%%%%%%%%%%%%%%%&%%%#%#%%,                        \n', '//                        .*(#&%%%%%%%%&&%%%%%%%%%%#%%%%%%%%%%%%%%%(,                                 \n', '//                    ./#%%%%%%%%%%%%%%%%%%%%%%%#%&%#%%%%%%%%%%%%%%%%%%%%&%%%#####(.                  \n', '//                          .,,*#%%%%%%%%%%%%%##%%&&%#%%%%%%%%&&%%%%%%(&*#&**/(*                      \n', '//                        .,(&%%%%%#((%%%%%%#%%%%%%%%%#%%%%%%%&&&&&%%%%&%*                            \n', '//                         ,,,,,..*&%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%#/*.                             \n', '//                           ,#&%%%%%%%%%%%%%%%%%%%%%%%%&%%%%%%%%%%%%%%%%%%/,                         \n', '//           .     .,*(#%%%%%%%%%&&&&%%%%%%&&&%%%%%%%%%&&%##%%%%%#,(%%%%%%%%%%%(((*                   \n', '//             ,/((%%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%%%&#  . . ...                       \n', '//                      .,.,,**(%%%%%%%%&%##%%%%%%%%%%%%%%%%%%###%%%%%%%%%&*                          \n', '//                       ,%&%%%%%&&%%%%%%%#%%%%%%%%%%%%%%%%%%&%%%%##%%%%%%%%%%%%%%%%&&#.              \n', '//              .(&&&%%%%%%&#&&%&%%%%%%%##%%%%&&%%%#%%%%%%&%%%%%%&&%%%%&&&/*(,(#(,,.                  \n', '//                         ..&%%%%%%#%#%%%%%%%%%%%##%%%%%%%&%%%%%%%%%%%%%%%%&&(.                      \n', '//                      ,%%%%%%%%%##%%%&%%%%%%%%&%%#%%&&%%%%&%%%%%%&%%%%%&(#%%%#,                     \n', '//              ./%&%%%%%%%%%%%%%%%%%%%%%%%%%&&&%%%##%%%%%%%%%%%%%&&&%%%%%%%%&#.//*/,..               \n', '//      ,#%%%%%%%%%%%%%%%%%%&&%%%%%&&&&%%%%%&&&%%%%%#%%%%#%%%%%%%%%%%%%%%%%%%%%%%%%%&&(,..            \n', '//            ,#* ,&&&%,.,*(%%%%%%%%%&%%%%&&&%%%%%&%%%%#%%%%##%%%%%%%&&%%%%%%%%%%%#%%%%%%%%&%(*.      \n', '//          .,,/((#%&%#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&&&&&%#%%%%%%%%%%%%%%%%%#%%%%%%%((*           \n', '// *,//**,...,/#%%%%%%%%%%%&&&&%%%%%%%%%%%%%#%%%%%%&&&%%%%&&&&%%%#%%#%%%%%%%%%%%%%%%#*.       .,(#%&@*\n', '//  .*%%(*(%%%%%%%%%%&&&&&&&&%%%%%%%&&%%%%%%%%%%%%%&&&%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%&%%%/..   \n', '//      .,/%&%%%%%%@#(&%&%%%%%%%%%#&&%%##%#%%%#%%%%&&&%%%%%%%%###%%%%%&&&%%%%%%%%%%%%%%%%&(//%%/      \n', '//          ,..     .(%%%%##%%%#%%%%%%#%%%%%##%%%%%&&&&%%%%%%%#&%#%%%%%%&&&%%%%%##//  ,,.             \n', '//            .,(%#%%##%%%#%%%#%%%#%%*,.*%%%%%%%%%&.,/&%%%%%%% #&%%#%%%%%&%(&%((%&&&(*                \n', '//                        ,/#/(%%,    ,&%%#%/.//         %*&(%#    .(,(%%%.          \n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interfaces/IModule.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', 'interface IModule {\n', '    /// @notice receive ETH\n', '    receive() external payable;\n', '\n', '    /**\n', '     * @notice Executes an order\n', '     * @param _inputToken - Address of the input token\n', '     * @param _inputAmount - uint256 of the input token amount (order amount)\n', "     * @param _owner - Address of the order's owner\n", "     * @param _data - Bytes of the order's data\n", '     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\n', '     * @return bought - amount of output token bought\n', '     */\n', '    function execute(\n', '        IERC20 _inputToken,\n', '        uint256 _inputAmount,\n', '        address payable _owner,\n', '        bytes calldata _data,\n', '        bytes calldata _auxData\n', '    ) external returns (uint256 bought);\n', '\n', '    /**\n', '     * @notice Check whether an order can be executed or not\n', '     * @param _inputToken - Address of the input token\n', '     * @param _inputAmount - uint256 of the input token amount (order amount)\n', "     * @param _data - Bytes of the order's data\n", '     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\n', '     * @return bool - whether the order can be executed or not\n', '     */\n', '    function canExecute(\n', '        IERC20 _inputToken,\n', '        uint256 _inputAmount,\n', '        bytes calldata _data,\n', '        bytes calldata _auxData\n', '    ) external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IHandler.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', 'interface IHandler {\n', '    /// @notice receive ETH\n', '    receive() external payable;\n', '\n', '    /**\n', '     * @notice Handle an order execution\n', '     * @param _inputToken - Address of the input token\n', '     * @param _outputToken - Address of the output token\n', '     * @param _inputAmount - uint256 of the input token amount\n', '     * @param _minReturn - uint256 of the min return amount of output token\n', '     * @param _data - Bytes of arbitrary data\n', '     * @return bought - Amount of output token bought\n', '     */\n', '    function handle(\n', '        IERC20 _inputToken,\n', '        IERC20 _outputToken,\n', '        uint256 _inputAmount,\n', '        uint256 _minReturn,\n', '        bytes calldata _data\n', '    ) external payable returns (uint256 bought);\n', '\n', '    /**\n', '     * @notice Check whether can handle an order execution\n', '     * @param _inputToken - Address of the input token\n', '     * @param _outputToken - Address of the output token\n', '     * @param _inputAmount - uint256 of the input token amount\n', '     * @param _minReturn - uint256 of the min return amount of output token\n', '     * @param _data - Bytes of arbitrary data\n', '     * @return bool - Whether the execution can be handled or not\n', '     */\n', '    function canHandle(\n', '        IERC20 _inputToken,\n', '        IERC20 _outputToken,\n', '        uint256 _inputAmount,\n', '        uint256 _minReturn,\n', '        bytes calldata _data\n', '    ) external view returns (bool);\n', '}\n', '\n', '// File: contracts/commons/Order.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', 'contract Order {\n', '    address public constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '}\n', '\n', '// File: contracts/libs/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/libs/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\n', '        (bool success, bytes memory data) = address(_token).call(abi.encodeWithSelector(_token.transfer.selector, _to, _val));\n', '        return success && (data.length == 0 || abi.decode(data, (bool)));\n', '    }\n', '}\n', '\n', '// File: contracts/libs/PineUtils.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', 'library PineUtils {\n', '    address internal constant ETH_ADDRESS = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '\n', '    /**\n', "     * @notice Get the account's balance of token or ETH\n", '     * @param _token - Address of the token\n', '     * @param _addr - Address of the account\n', "     * @return uint256 - Account's balance of token or ETH\n", '     */\n', '    function balanceOf(IERC20 _token, address _addr) internal view returns (uint256) {\n', '        if (ETH_ADDRESS == address(_token)) {\n', '            return _addr.balance;\n', '        }\n', '\n', '        return _token.balanceOf(_addr);\n', '    }\n', '\n', '     /**\n', '     * @notice Transfer token or ETH to a destinatary\n', '     * @param _token - Address of the token\n', '     * @param _to - Address of the recipient\n', '     * @param _val - Uint256 of the amount to transfer\n', '     * @return bool - Whether the transfer was success or not\n', '     */\n', '    function transfer(IERC20 _token, address _to, uint256 _val) internal returns (bool) {\n', '        if (ETH_ADDRESS == address(_token)) {\n', '            (bool success, ) = _to.call{value:_val}("");\n', '            return success;\n', '        }\n', '\n', '        return SafeERC20.transfer(_token, _to, _val);\n', '    }\n', '}\n', '\n', '// File: contracts/modules/LimitOrders.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*\n', ' * Original work by Pine.Finance\n', ' * - https://github.com/pine-finance\n', ' *\n', ' * Authors:\n', ' * - Agustin Aguilar <agusx1211>\n', ' * - Ignacio Mazzara <nachomazzara>\n', ' */\n', 'contract LimitOrders is IModule, Order {\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice receive ETH\n', '    receive() external override payable { }\n', '\n', '    /**\n', '     * @notice Executes an order\n', '     * @param _inputToken - Address of the input token\n', "     * @param _owner - Address of the order's owner\n", "     * @param _data - Bytes of the order's data\n", '     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\n', '     * @return bought - amount of output token bought\n', '     */\n', '    function execute(\n', '        IERC20 _inputToken,\n', '        uint256,\n', '        address payable _owner,\n', '        bytes calldata _data,\n', '        bytes calldata _auxData\n', '    ) external override returns (uint256 bought) {\n', '        (\n', '            IERC20 outputToken,\n', '            uint256 minReturn\n', '        ) = abi.decode(\n', '            _data,\n', '            (\n', '                IERC20,\n', '                uint256\n', '            )\n', '        );\n', '\n', '        (IHandler handler) = abi.decode(_auxData, (IHandler));\n', '\n', '        // Do not trust on _inputToken, it can mismatch the real balance\n', '        uint256 inputAmount = PineUtils.balanceOf(_inputToken, address(this));\n', '        _transferAmount(_inputToken, address(handler), inputAmount);\n', '\n', '        handler.handle(\n', '            _inputToken,\n', '            outputToken,\n', '            inputAmount,\n', '            minReturn,\n', '            _auxData\n', '        );\n', '\n', '        bought = PineUtils.balanceOf(outputToken, address(this));\n', '        require(bought >= minReturn, "LimitOrders#execute: ISSUFICIENT_BOUGHT_TOKENS");\n', '\n', '        _transferAmount(outputToken, _owner, bought);\n', '\n', '        return bought;\n', '    }\n', '\n', '    /**\n', '     * @notice Check whether an order can be executed or not\n', '     * @param _inputToken - Address of the input token\n', '     * @param _inputAmount - uint256 of the input token amount (order amount)\n', "     * @param _data - Bytes of the order's data\n", '     * @param _auxData - Bytes of the auxiliar data used for the handlers to execute the order\n', '     * @return bool - whether the order can be executed or not\n', '     */\n', '    function canExecute(\n', '        IERC20 _inputToken,\n', '        uint256 _inputAmount,\n', '        bytes calldata _data,\n', '        bytes calldata _auxData\n', '    ) external override view returns (bool) {\n', '         (\n', '            IERC20 outputToken,\n', '            uint256 minReturn\n', '        ) = abi.decode(\n', '            _data,\n', '            (\n', '                IERC20,\n', '                uint256\n', '            )\n', '        );\n', '        (IHandler handler) = abi.decode(_auxData, (IHandler));\n', '\n', '        return handler.canHandle(\n', '            _inputToken,\n', '            outputToken,\n', '            _inputAmount,\n', '            minReturn,\n', '            _auxData\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer token or Ether amount to a recipient\n', '     * @param _token - Address of the token\n', '     * @param _to - Address of the recipient\n', '     * @param _amount - uint256 of the amount to be transferred\n', '     */\n', '    function _transferAmount(\n', '        IERC20 _token,\n', '        address payable _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (address(_token) == ETH_ADDRESS) {\n', '            (bool success,) = _to.call{value: _amount}("");\n', '            require(success, "LimitOrders#_transferAmount: ETH_TRANSFER_FAILED");\n', '        } else {\n', '            require(SafeERC20.transfer(_token, _to, _amount), "LimitOrders#_transferAmount: TOKEN_TRANSFER_FAILED");\n', '        }\n', '    }\n', '}']