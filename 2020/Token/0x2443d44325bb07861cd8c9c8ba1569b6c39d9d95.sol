['// Sources flattened with buidler v1.4.3 https://buidler.dev\n', '\n', '// File contracts/interfaces/IMiniMeLike.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev A sparse MiniMe-like interface containing just `generateTokens()`.\n', ' */\n', 'interface IMiniMeLike {\n', '    /**\n', '     * @notice Generates `_amount` tokens that are assigned to `_owner`\n', '     * @param _owner The address that will be assigned the new tokens\n', '     * @param _amount The quantity of tokens generated\n', '     * @return True if the tokens are generated correctly\n', '    */\n', '    function generateTokens(address _owner, uint _amount) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ITokenController.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev The MiniMe token controller contract must implement these functions\n', ' *      ANT was compiled with solc 0.4.8, so there is no point in marking any of the functions as `view`.\n', ' */\n', 'interface ITokenController {\n', '    /**\n', '    * @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    * @param _owner The address that sent the ether to create tokens\n', '    * @return True if the ether is accepted, false if it throws\n', '    */\n', '    function proxyPayment(address _owner) external payable returns (bool);\n', '\n', '    /**\n', '    * @notice Notifies the controller about a token transfer allowing the controller to react if desired\n', '    * @param _from The origin of the transfer\n', '    * @param _to The destination of the transfer\n', '    * @param _amount The amount of the transfer\n', '    * @return False if the controller does not authorize the transfer\n', '    */\n', '    function onTransfer(address _from, address _to, uint _amount) external returns (bool);\n', '\n', '    /**\n', '    * @notice Notifies the controller about an approval allowing the controller to react if desired\n', '    * @param _owner The address that calls `approve()`\n', '    * @param _spender The spender in the `approve()` call\n', '    * @param _amount The amount in the `approve()` call\n', '    * @return False if the controller does not authorize the approval\n', '    */\n', '    function onApprove(address _owner, address _spender, uint _amount) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/ANTController.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', 'contract ANTController is ITokenController {\n', '    string private constant ERROR_NOT_MINTER = "ANTC_SENDER_NOT_MINTER";\n', '    string private constant ERROR_NOT_ANT = "ANTC_SENDER_NOT_ANT";\n', '\n', '    IMiniMeLike public ant;\n', '    address public minter;\n', '\n', '    event ChangedMinter(address indexed minter);\n', '\n', '    /**\n', '    * @dev Ensure the msg.sender is the minter\n', '    */\n', '    modifier onlyMinter {\n', '        require(msg.sender == minter, ERROR_NOT_MINTER);\n', '        _;\n', '    }\n', '\n', '    constructor(IMiniMeLike _ant, address _minter) public {\n', '        ant = _ant;\n', '        _changeMinter(_minter);\n', '    }\n', '\n', '    /**\n', '    * @notice Generate ANT for a specified address\n', '    * @dev Note that failure to generate the requested tokens will result in a revert\n', '    * @param _owner Address to receive ANT\n', '    * @param _amount Amount to generate\n', '    * @return True if the tokens are generated correctly\n', '    */\n', '    function generateTokens(address _owner, uint256 _amount) external onlyMinter returns (bool) {\n', '        return ant.generateTokens(_owner, _amount);\n', '    }\n', '\n', '    /**\n', '    * @notice Change the permitted minter to another address\n', '    * @param _newMinter Address that will be permitted to mint ANT\n', '    */\n', '    function changeMinter(address _newMinter) external onlyMinter {\n', '        _changeMinter(_newMinter);\n', '    }\n', '\n', '    // Default ITokenController settings for allowing token transfers.\n', '    // ANT was compiled with solc 0.4.8, so there is no point in marking any of these functions as `view`:\n', '    //   - The original interface does not specify these as `constant`\n', '    //   - ANT does not use a `staticcall` when calling into these functions\n', '\n', '    /**\n', '    * @dev Callback function called from MiniMe-like instances when ETH is sent into the token contract\n', '    *      It allows specifying a custom logic to control if the ETH should be accepted or not\n', '    * @return Always false, this controller does not permit the ANT contract to receive ETH transfers\n', '    */\n', '    function proxyPayment(address /* _owner */) external payable returns (bool) {\n', '        // We only apply this extra check here to ensure `proxyPayment()` cannot be sent ETH from arbitrary addresses\n', '        require(msg.sender == address(ant), ERROR_NOT_ANT);\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev Callback function called from MiniMe-like instances when an ERC20 transfer is requested\n', '    *      It allows specifying a custom logic to control if a transfer should be allowed or not\n', '    * @return Always true, this controller allows all transfers\n', '    */\n', '    function onTransfer(address /* _from */, address /* _to */, uint /* _amount */) external returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Callback function called from MiniMe-like instances when an ERC20 approval is requested\n', '    *      It allows specifying a custom logic to control if an approval should be allowed or not\n', '    * @return Always true, this controller allows all approvals\n', '    */\n', '    function onApprove(address /* _owner */, address /* _spender */, uint /* _amount */) external returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // Internal fns\n', '\n', '    function _changeMinter(address _newMinter) internal {\n', '        minter = _newMinter;\n', '        emit ChangedMinter(_newMinter);\n', '    }\n', '}']