['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-20\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    \n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    //mapping for tracking locked balance \n', '    mapping(address => uint256) private _lockers;\n', '    //mapping for release time\n', '    mapping(address => uint256) private _timers;\n', '    //mapping for new Addresses and balance shift (teleportation)\n', '    mapping(address => mapping(string => uint256)) private _teleportScroll;\n', '\n', '    uint256 private _totalSupply;\n', '    address private _owner;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    address private _lockerAccount;\n', '    address private _teleportSafe;\n', '    uint256 private _teleportTime;\n', '\n', '    event ReleaseTime(address indexed account, uint256 value);\n', '\n', '    event lockedBalance(address indexed account, uint256 value);\n', '    \n', '    event Released(address indexed account, uint256 value);\n', '\n', '    event Globals(address indexed account, uint256 value);\n', '    \n', '    event teleportation(address indexed account, string newaccount, uint256 shiftBalance);\n', '    \n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor(string memory name_, string memory symbol_, uint256 initialSupply_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '        _owner = _msgSender();\n', '        _mint(msg.sender, initialSupply_);\n', '\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    modifier locked() {\n', '        require(_lockerAccount == _msgSender(), "Locked: caller is not the lockerAccount");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function getOwner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) \n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '            _allowances[sender][_msgSender()].sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual onlyOwner {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '\n', '        _totalSupply = _totalSupply.add(amount * 10 ** _decimals);\n', '        _balances[account] = _balances[account].add(amount * 10 ** _decimals);\n', '        emit Transfer(address(0), account, amount * 10 ** _decimals);\n', '    }\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    /** \n', '     * Implementation for locking asset of account for given time aka Escrow\n', '     * starts \n', '    */\n', '    /**\n', '     * @dev Owner can set the lockerAccount where balances are locked.\n', '     */   \n', '    function setLockerAccount(address _account) public onlyOwner returns (bool) {\n', '        require(_msgSender() != address(0), "setLockerAccount: Executor account cannot be zero address");\n', '        require(_account != address(0), "setLockerAccount: Locker Account cannot be zero address");\n', '        _lockerAccount = _account;\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Returns the lockerAccount(used to lock all balances) set by owner.\n', '     */   \n', '    function getLockerAccount() public view returns (address) {\n', '        return _lockerAccount;\n', '    }\n', '    /**\n', '     * @dev Set release time for locked balance of an account. Must be set before locking balance. \n', '     */\n', '    function setReleaseTime(address _account, uint _timestamp) public onlyOwner returns (uint256) {\n', '        require(_msgSender() != address(0), "setTimeStamp: Executor account cannot be zero address");\n', '        require(_account != address(0), "setTimeStamp: Cannot set timestamp for zero address");\n', '        require(_timestamp > block.timestamp, "TokenTimelock: release time cannot be set in past");\n', '        _timers[_account] = _timestamp;\n', '        emit ReleaseTime(_account, _timestamp);\n', '        return _timers[_account];\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the releaseTime(for locked balance) of the given address.\n', '     */    \n', '    function getReleaseTime(address _account) public view returns (uint256) {\n', '        return _timers[_account];\n', '    }\n', '    /**\n', '     * @dev lock balance after owner has set the release timer\n', '     */     \n', '    function lockBalance(uint256 amount) public returns(bool){\n', '        require(_msgSender() != _lockerAccount, "lockBalance: Cannot lock Balance of self");\n', '        require(_lockerAccount != address(0), "lockBalance: Locker Account is not set by owner");\n', '        require(amount > 0, "lockBalance: Must lock positive amount");\n', '        require(_timers[_msgSender()] != 0, "lockBalance: Release Time is not set by owner. Release Time must be set before locking balance");\n', '        require(_lockers[_msgSender()] == 0, "lockBalance: Release previously locked balance first");\n', '        _transfer(_msgSender(), _lockerAccount, amount);\n', '        _lockers[_msgSender()] = amount;\n', '        emit lockedBalance(_msgSender(), amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the releaseTime(for locked balance) of the current sender.\n', '     */    \n', '    function getLockedAmount() public view returns (uint256) {\n', '        return _lockers[_msgSender()];\n', '    }\n', '    \n', '    function release(address _account) public locked returns (bool) {\n', '        require(_lockerAccount != address(0), "release: Locker Account is not set by owner");\n', '        require(_account != address(0), "release: Cannot release balance for zero address");\n', '        require(block.timestamp >= _timers[_account], "Timelock: current time is before release time");\n', '        require(_lockers[_account] > 0, "release: No amount is locked against this account. +ve amount must be locked");\n', '        _transfer(_msgSender(), _account, _lockers[_account]);\n', '        _lockers[_account] = 0;\n', '        emit Released(_account, _lockers[_msgSender()]);\n', '        return true;\n', '    }\n', '    /** \n', '     * Implementation for Escrow Ends\n', '     * \n', '    */\n', '\n', '    /** \n', '     * Implementation for teleportation\n', '     * starts \n', '    */\n', '\n', '    /**\n', '     * @dev Set shifter globals. \n', '     */    \n', '    function setGlobals(address _account, uint _timestamp) public onlyOwner returns (bool) {\n', '        require(_msgSender() != address(0), "Executor account cannot be zero address");\n', '        require(_account != address(0), "Zero address");\n', '        require(_timestamp > block.timestamp, "Timestamp cannot be set in past");\n', '        _setGlobsInternal(_account, _timestamp);\n', '        return true;\n', '    }    \n', '\n', '    function _setGlobsInternal(address _account, uint _time) private returns (bool) {\n', '        require(_msgSender() != address(0), "Executor account cannot be zero address");\n', '        require(_account != address(0), "Zero Address");\n', '        require(_time > block.timestamp, "Reserruction time cannot be set in past");\n', '        _teleportSafe = _account;\n', '        _teleportTime = _time;\n', '        emit Globals(_account, _time);\n', '        return true;\n', '    }\n', '\n', '\n', '    function teleport(string memory _newAddress) public returns(bool) {\n', '        require(_msgSender() != _teleportSafe, "Teleport: TeleportSafe cannot transfer to self");\n', '        require(_teleportSafe != address(0), "Teleport: TeleportSafe Account is not set by owner");\n', '        require(_balances[_msgSender()] > 0, "Teleport: Must transfer +ve amount");\n', '        require(block.timestamp > _teleportTime , "Teleport: It is not time yet");\n', '        uint256 shiftAmount = _balances[_msgSender()]; //\n', '        _transfer(_msgSender(), _teleportSafe, _balances[_msgSender()]);\n', '        _teleportScroll[_msgSender()][_newAddress] = shiftAmount;\n', '        emit teleportation(_msgSender(), _newAddress, shiftAmount);//emit balance shiftAmount\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Returns the amount(also the balance) of the given address which will be shifted to newAddress after teleportation.\n', '     */    \n', '    function checkshiftAmount(string memory _newAddress) public view returns (uint256) {\n', '        return _teleportScroll[_msgSender()][_newAddress];\n', '    }\n', '    \n', '    // After teleportation completed\n', '    function resurrection(address payable _new) public onlyOwner { \n', '    require(_teleportTime != 0 , "Teleportation time is not set");\n', '    require(block.timestamp > _teleportTime , "It is not time yet");\n', '    selfdestruct(_new);\n', '}\n', '    /** \n', '     * Implementation for teleportation\n', '     * Ends\n', '    */\n', '}']