['// File: contracts/token/libs/Ownable.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlySafe() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlySafe {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/libs/Pausable.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlySafe whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlySafe whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// File: contracts/token/libs/ERC20Basic.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public _totalSupply;\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/libs/SafeMath.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/token/libs/BasicToken.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is Ownable, Pausable, ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    // additional variables for use if transaction fees ever became necessary\n', '    uint256 public basisPointsRate = 0;\n', '    uint256 public maximumFee = 0;\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        onlyPayloadSize(2 * 32)\n', '        returns (bool success)\n', '    {\n', '        uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '        uint256 sendAmount = _value.sub(fee);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        emit Transfer(msg.sender, _to, sendAmount);\n', '        if (fee > 0) {\n', '            balances[owner] = balances[owner].add(fee);\n', '            emit Transfer(msg.sender, owner, fee);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '// File: contracts/token/libs/BlackList.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '\n', 'contract BlackList is Ownable, BasicToken {\n', '    mapping(address => bool) public isBlackListed;\n', '\n', '    /////// Getters to allow the same blacklist to be used also by other contracts (including upgraded Tether) ///////\n', '    function getBlackListStatus(address _maker) external view returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function addBlackList(address _evilUser) public onlySafe {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList(address _clearedUser) public onlySafe {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\n', '    function destroyBlackFunds(address _blackListedUser) public onlySafe {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint256 dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        _totalSupply -= dirtyFunds;\n', '        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '\n', '    event DestroyedBlackFunds(address _blackListedUser, uint256 _balance);\n', '\n', '    event AddedBlackList(address _user);\n', '\n', '    event RemovedBlackList(address _user);\n', '}\n', '\n', '// File: contracts/token/libs/ERC20.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/token/libs/StandardToken.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based oncode by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    uint256 public MAX_UINT = 2**256 - 1;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        uint256 fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '        if (_allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        }\n', '        uint256 sendAmount = _value.sub(fee);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        emit Transfer(_from, _to, sendAmount);\n', '        if (fee > 0) {\n', '            balances[owner] = balances[owner].add(fee);\n', '            emit Transfer(_from, owner, fee);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        onlyPayloadSize(2 * 32)\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '// File: contracts/token/libs/UpgradedStandardToken.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', 'contract UpgradedStandardToken is StandardToken {\n', '    // those methods are called by the legacy contract\n', '    // and they must ensure msg.sender to be the contract address\n', '    function transferByLegacy(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public returns (bool);\n', '\n', '    function transferFromByLegacy(\n', '        address sender,\n', '        address from,\n', '        address spender,\n', '        uint256 value\n', '    ) public returns (bool);\n', '\n', '    function approveByLegacy(\n', '        address from,\n', '        address spender,\n', '        uint256 value\n', '    ) public returns (bool);\n', '}\n', '\n', '// File: contracts/library/ERC20Yes.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', 'interface ERC20Yes {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address tokenOwner)\n', '        external\n', '        view\n', '        returns (uint256 balance);\n', '\n', '    function allowance(address tokenOwner, address spender)\n', '        external\n', '        view\n', '        returns (uint256 remaining);\n', '\n', '    function transfer(address to, uint256 tokens)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address spender, uint256 tokens)\n', '        external\n', '        returns (bool success);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokens\n', '    ) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(\n', '        address indexed tokenOwner,\n', '        address indexed spender,\n', '        uint256 tokens\n', '    );\n', '}\n', '\n', '// File: contracts/library/ERC20Not.sol\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', 'interface ERC20Not {\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external ;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external;\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue)\n', '        external\n', '        returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/token/PIKE.sol\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2017-11-28\n', ' */\n', '\n', 'pragma solidity >=0.5.0 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PIKE is StandardToken, BlackList {\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '    address public safeSender;\n', '    address public upgradedAddress;\n', '    bool public deprecated;\n', '\n', '    //  The contract can be initialized with a number of tokens\n', '    //  All the tokens are deposited to the owner address\n', '    //\n', '    // @param _balance Initial supply of the contract\n', '    // @param _name Token Name\n', '    // @param _symbol Token symbol\n', '    // @param _decimals Token decimals\n', '    constructor() public {\n', '        deprecated = false;\n', '        decimals = 18;\n', '        name = "Pike Protocol";\n', '        symbol = "PIKE";\n', '        _totalSupply = 30000000 * 10**decimals; //发行3000万\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        require(!isBlackListed[msg.sender]);\n', '        if (deprecated) {\n', '            return\n', '                UpgradedStandardToken(upgradedAddress).transferByLegacy(\n', '                    msg.sender,\n', '                    _to,\n', '                    _value\n', '                );\n', '        } else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public whenNotPaused returns (bool success) {\n', '        require(!isBlackListed[_from]);\n', '        if (deprecated) {\n', '            return\n', '                UpgradedStandardToken(upgradedAddress).transferFromByLegacy(\n', '                    msg.sender,\n', '                    _from,\n', '                    _to,\n', '                    _value\n', '                );\n', '        } else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    function transferTokens(\n', '        address _tokenAddress,\n', '        address _to,\n', '        uint256 _tokens,\n', '        bool _isErc20\n', '    ) public onlySafe returns (bool success) {\n', '        require(_tokens > 0);\n', '        if (_isErc20 == true) {\n', '            ERC20Yes(_tokenAddress).transfer(_to, _tokens);\n', '        } else {\n', '            ERC20Not(_tokenAddress).transfer(_to, _tokens);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n', '        } else {\n', '            return super.balanceOf(who);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        onlyPayloadSize(2 * 32)\n', '        returns (bool success)\n', '    {\n', '        if (deprecated) {\n', '            return\n', '                UpgradedStandardToken(upgradedAddress).approveByLegacy(\n', '                    msg.sender,\n', '                    _spender,\n', '                    _value\n', '                );\n', '        } else {\n', '            return super.approve(_spender, _value);\n', '        }\n', '    }\n', '\n', '    // Forward ERC20 methods to upgraded contract if this one is deprecated\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256 remaining)\n', '    {\n', '        if (deprecated) {\n', '            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n', '        } else {\n', '            return super.allowance(_owner, _spender);\n', '        }\n', '    }\n', '\n', '    // deprecate current contract in favour of a new one\n', '    function deprecate(address _upgradedAddress) public onlySafe {\n', '        deprecated = true;\n', '        upgradedAddress = _upgradedAddress;\n', '        emit Deprecate(_upgradedAddress);\n', '    }\n', '\n', '    // deprecate current contract if favour of a new one\n', '    function totalSupply() public view returns (uint256) {\n', '        if (deprecated) {\n', '            return StandardToken(upgradedAddress).totalSupply();\n', '        } else {\n', '            return _totalSupply.sub(balances[address(0)]);\n', '        }\n', '    }\n', '\n', '    // Issue a new amount of tokens\n', '    // these tokens are deposited into the owner address\n', '    //\n', '    // @param _amount Number of tokens to be issued\n', '    function issue(uint256 amount) public onlySafe {\n', '        require(_totalSupply + amount > _totalSupply);\n', '        require(balances[owner] + amount > balances[owner]);\n', '        balances[owner] += amount;\n', '        _totalSupply += amount;\n', '        emit Issue(amount);\n', '    }\n', '\n', '    function mine(address _to, uint256 _tokens) public onlySafe returns (bool success) {\n', '        require(_totalSupply + _tokens > _totalSupply);\n', '        balances[owner] = balances[owner].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        emit Mine(_to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    //设置手续费率\n', '    function setFeeRate(uint256 newBasisPoints, uint256 newMaxFee)\n', '        public\n', '        onlySafe\n', '    {\n', '        // Ensure transparency by hardcoding limit beyond which fees can never be added\n', '        require(newBasisPoints < 20);\n', '        require(newMaxFee < 50);\n', '\n', '        basisPointsRate = newBasisPoints;\n', '        maximumFee = newMaxFee.mul(10**decimals);\n', '\n', '        emit Params(basisPointsRate, maximumFee);\n', '    }\n', '\n', '    function setSafeSender(address _sender) public onlySafe {\n', '        safeSender = _sender;\n', '    }\n', '\n', '    // Called when new token are issued\n', '    event Issue(uint256 amount);\n', '\n', '    event Airdrop(address who, uint256 tokens);\n', '\n', '    event Mine(address who, uint256 tokens);\n', '\n', '    // Called when contract is deprecated\n', '    event Deprecate(address newAddress);\n', '\n', '    // Called if contract ever adds fees\n', '    event Params(uint256 feeBasisPoints, uint256 maxFee);\n', '}']