['// File: contracts/lib/SafeMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/lib/DecimalMath.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '/**\n', ' * @title DecimalMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Functions for fixed point number with 18 decimals\n', ' */\n', 'library DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant ONE = 10**18;\n', '\n', '    function mul(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d) / ONE;\n', '    }\n', '\n', '    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(ONE).div(d);\n', '    }\n', '\n', '    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(ONE).divCeil(d);\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/lib/Ownable.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract Ownable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    constructor() internal {\n', '        _OWNER_ = msg.sender;\n', '        emit OwnershipTransferred(address(0), _OWNER_);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0), "INVALID_OWNER");\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() external {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', "    This is a simplified version of OpenZepplin's SafeERC20 library\n", '\n', '*/\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/token/LockedTokenVault.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '\n', '*/\n', '\n', '/**\n', ' * @title LockedTokenVault\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Lock Token and release it linearly\n', ' */\n', '\n', 'contract LockedTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address _TOKEN_;\n', '\n', '    mapping(address => uint256) internal originBalances;\n', '    mapping(address => uint256) internal claimedBalances;\n', '\n', '    mapping(address => address) internal holderTransferRequest;\n', '\n', '    uint256 public _UNDISTRIBUTED_AMOUNT_;\n', '    uint256 public _START_RELEASE_TIME_;\n', '    uint256 public _RELEASE_DURATION_;\n', '    uint256 public _CLIFF_RATE_;\n', '\n', '    bool public _DISTRIBUTE_FINISHED_;\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier beforeStartRelease() {\n', '        require(block.timestamp < _START_RELEASE_TIME_, "RELEASE START");\n', '        _;\n', '    }\n', '\n', '    modifier afterStartRelease() {\n', '        require(block.timestamp > _START_RELEASE_TIME_, "RELEASE NOT START");\n', '        _;\n', '    }\n', '\n', '    modifier distributeNotFinished() {\n', '        require(!_DISTRIBUTE_FINISHED_, "DISTRIBUTE FINISHED");\n', '        _;\n', '    }\n', '\n', '    // ============ Init Functions ============\n', '\n', '    constructor(\n', '        address _token,\n', '        uint256 _startReleaseTime,\n', '        uint256 _releaseDuration,\n', '        uint256 _cliffRate\n', '    ) public {\n', '        _TOKEN_ = _token;\n', '        _START_RELEASE_TIME_ = _startReleaseTime;\n', '        _RELEASE_DURATION_ = _releaseDuration;\n', '        _CLIFF_RATE_ = _cliffRate;\n', '    }\n', '\n', '    function deposit(uint256 amount) external onlyOwner {\n', '        _tokenTransferIn(_OWNER_, amount);\n', '        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.add(amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) external onlyOwner {\n', '        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.sub(amount);\n', '        _tokenTransferOut(_OWNER_, amount);\n', '    }\n', '\n', '    function finishDistribute() external onlyOwner {\n', '        _DISTRIBUTE_FINISHED_ = true;\n', '    }\n', '\n', '    // ============ For Owner ============\n', '\n', '    function grant(address[] calldata holderList, uint256[] calldata amountList)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(holderList.length == amountList.length, "batch grant length not match");\n', '        uint256 amount = 0;\n', '        for (uint256 i = 0; i < holderList.length; ++i) {\n', '            originBalances[holderList[i]] = originBalances[holderList[i]].add(amountList[i]);\n', '            amount = amount.add(amountList[i]);\n', '        }\n', '        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.sub(amount);\n', '    }\n', '\n', '    function recall(address holder) external onlyOwner distributeNotFinished {\n', '        uint256 amount = originBalances[holder];\n', '        originBalances[holder] = 0;\n', '        _UNDISTRIBUTED_AMOUNT_ = _UNDISTRIBUTED_AMOUNT_.add(amount);\n', '    }\n', '\n', '    // ============ For Holder ============\n', '\n', '    function transferLockedToken(address to) external {\n', '        originBalances[to] = originBalances[to].add(originBalances[msg.sender]);\n', '        claimedBalances[to] = claimedBalances[to].add(claimedBalances[msg.sender]);\n', '\n', '        originBalances[msg.sender] = 0;\n', '        claimedBalances[msg.sender] = 0;\n', '    }\n', '\n', '    function claim() external {\n', '        uint256 claimableToken = getClaimableBalance(msg.sender);\n', '        _tokenTransferOut(msg.sender, claimableToken);\n', '        claimedBalances[msg.sender] = claimedBalances[msg.sender].add(claimableToken);\n', '    }\n', '\n', '    // ============ View ============\n', '\n', '    function getOriginBalance(address holder) external view returns (uint256) {\n', '        return originBalances[holder];\n', '    }\n', '\n', '    function getClaimedBalance(address holder) external view returns (uint256) {\n', '        return claimedBalances[holder];\n', '    }\n', '\n', '    function getHolderTransferRequest(address holder) external view returns (address) {\n', '        return holderTransferRequest[holder];\n', '    }\n', '\n', '    function getClaimableBalance(address holder) public view returns (uint256) {\n', '        if (block.timestamp < _START_RELEASE_TIME_) {\n', '            return 0;\n', '        }\n', '        uint256 remainingToken = getRemainingBalance(holder);\n', '        return originBalances[holder].sub(remainingToken).sub(claimedBalances[holder]);\n', '    }\n', '\n', '    function getRemainingBalance(address holder) public view returns (uint256) {\n', '        uint256 remainingToken = 0;\n', '        uint256 timePast = block.timestamp.sub(_START_RELEASE_TIME_);\n', '        if (timePast < _RELEASE_DURATION_) {\n', '            uint256 remainingTime = _RELEASE_DURATION_.sub(timePast);\n', '            remainingToken = originBalances[holder]\n', '                .sub(DecimalMath.mul(originBalances[holder], _CLIFF_RATE_))\n', '                .mul(remainingTime)\n', '                .div(_RELEASE_DURATION_);\n', '        }\n', '        return remainingToken;\n', '    }\n', '\n', '    // ============ Internal Helper ============\n', '\n', '    function _tokenTransferIn(address from, uint256 amount) internal {\n', '        IERC20(_TOKEN_).safeTransferFrom(from, address(this), amount);\n', '    }\n', '\n', '    function _tokenTransferOut(address to, uint256 amount) internal {\n', '        IERC20(_TOKEN_).safeTransfer(to, amount);\n', '    }\n', '}']