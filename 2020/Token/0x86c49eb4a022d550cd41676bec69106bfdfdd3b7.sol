['/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-30\n', '*/\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', '\n', 'contract Owned {\n', '    address payable _owner;\n', '    address payable _newOwner;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender==_owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address payable newOwner) public onlyOwner {\n', '        require(newOwner!=address(0));\n', '        _newOwner = newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender==_newOwner);\n', '\n', '        if (msg.sender==_newOwner) {\n', '            _owner = _newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract ERC20 {\n', '    function totalSupply() view public virtual returns (uint);\n', '    function balanceOf(address owner) view public virtual returns (uint256 balance);\n', '    function transfer(address to, uint256 value) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public virtual returns (bool success);\n', '    function approve(address spender, uint256 value) public virtual returns (bool success);\n', '    function allowance(address owner, address spender) view public virtual returns (uint256 remaining);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Token is Owned, ERC20 {\n', '    string public _symbol;\n', '    string public _name;\n', '    uint8 public _decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping (address=>uint256) _balances;\n', '    mapping (address=>mapping (address=>uint256)) _allowed;\n', '    mapping (address=>bool) _minters;\n', '\n', '    function balanceOf(address owner) view public virtual override returns (uint256 balance) {return _balances[owner];}\n', '\n', '    function transfer(address to, uint256 amount) public virtual override returns (bool success) {\n', '        require (_balances[msg.sender]>=amount && amount>0);\n', '        _balances[msg.sender]-=amount;\n', '        _balances[to]+=amount;\n', '        emit Transfer(msg.sender,to,amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from,address to,uint256 amount) public virtual override returns (bool success) {\n', '        require (_balances[from]>=amount && _allowed[from][msg.sender]>=amount && amount>0);\n', '        _balances[from]-=amount;\n', '        _allowed[from][msg.sender]-=amount;\n', '        _balances[to]+=amount;\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool success) {\n', '        _allowed[msg.sender][spender]=amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) view public virtual override returns (uint256 remaining) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function totalSupply() view public virtual override returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    modifier onlyMinter() {\n', '        require(_minters[msg.sender]==true);\n', '        _;\n', '    } \n', '    \n', '    function addMinter(address minter) public onlyOwner {\n', '        require(minter != address(0), "ERC20: zero address");\n', '        \n', '        _minters[minter] = true;\n', '    }\n', '    \n', '    function removeMinter(address minter) public onlyOwner {\n', '        require(minter != address(0), "ERC20: zero address");\n', '        \n', '        _minters[minter] = false;\n', '    }\n', '\n', '    function mint(address account, uint amount) public onlyMinter {\n', '        require(account != address(0), "ERC20: mint from the zero address");\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function burn(address account, uint amount) public onlyMinter {\n', '        require(account != address(0), "ERC20: burn to the zero address");\n', '        require(_balances[account] >= amount, "ERC20: burn amount exceeds balance");\n', '\n', '        _balances[account] -= amount;\n', '        _totalSupply -= amount;\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '}\n', '\n', 'contract YFFAToken is Token{\n', '    constructor() public{\n', '        _symbol = "YFFA";\n', '        _name = "Yearn Alpha Finance";\n', '        _decimals = 18;\n', '        _owner = msg.sender;\n', '        _balances[_owner] = _totalSupply;\n', '        addMinter(_owner);\n', '    }\n', '\n', '    receive () payable external {\n', '        require(msg.value>0);\n', '        _owner.transfer(msg.value);\n', '    }\n', '}']