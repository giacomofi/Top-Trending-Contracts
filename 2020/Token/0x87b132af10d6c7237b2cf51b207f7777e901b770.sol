['# @version 0.2.4\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', 'interface Minter:\n', '    def mint_for(gauge_addr: address, _for: address): nonpayable\n', '    def minted(addr: address, gauge: address) -> uint256: view\n', '\n', 'interface Gauge:\n', '    def claimable_tokens(addr: address) -> uint256: nonpayable\n', '    def integrate_fraction(addr: address) -> uint256: view\n', '\n', 'interface VestingEscrow:\n', '    def balanceOf(addr: address) -> uint256: view\n', '    def claim(addr: address): nonpayable\n', '\n', '\n', 'crv: constant(address) = 0xD533a949740bb3306d119CC777fa900bA034cd52\n', 'minter: constant(address) = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0\n', 'vesting: constant(address) = 0x575CCD8e2D300e2377B43478339E364000318E2c\n', '\n', '\n', '@external\n', 'def claimable(addr: address, gauges: address[8]) -> uint256:\n', '    total: uint256 = 0\n', '    total += VestingEscrow(vesting).balanceOf(addr)\n', '    for i in range(8):\n', '        if gauges[i] == ZERO_ADDRESS:\n', '            break\n', '        total += Gauge(gauges[i]).claimable_tokens(addr)\n', '    return total\n', '\n', '\n', '@external\n', 'def claim(gauges: address[8]):\n', '    if VestingEscrow(vesting).balanceOf(msg.sender) > 0:\n', '        VestingEscrow(vesting).claim(msg.sender)\n', '\n', '    # Enable with minter.toggle_approve_mint(self)\n', '    for i in range(8):\n', '        if gauges[i] == ZERO_ADDRESS:\n', '            break\n', '        Minter(minter).mint_for(gauges[i], msg.sender)']