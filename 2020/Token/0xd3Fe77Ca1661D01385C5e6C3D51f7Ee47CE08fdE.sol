['pragma solidity >=0.4.16 <0.7.0;\n', '\n', 'import "./ERC20Interface.sol";\n', '\n', 'contract MyToken is ERC20Interface {\n', '\n', '    uint256 constant private MAX_UINT256 = 2 ** 256 - 1;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    /// Nazwa naszego tokenu, zostanie zdefiniowana przy pomocy konstruktora\n', '    string public name;\n', '\n', '    /// Punkty dziesiętne naszego tokenu. Jeżeli ustalimy totalSupply na 1 oraz decimals na 18, to reprezentacyjna\n', '    /// wartość tokenu przyjmie formę 1000000000000000000 (1 * 10^18)\n', '    uint8 public decimals;\n', '\n', '    /// Trzy lub czterocyfrowy symbol określający naszą token\n', '    string public symbol;\n', '\n', '    /// Konstruktor wykonany przy wgraniu kontraktu do sieci. Wszystkie tokeny zostaną przypisane do konta,\n', '    /// które będzie odpowiadać za deployment (właściciel kontraktu).\n', '    function MyToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        symbol = _tokenSymbol;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        totalSupply = _initialAmount * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /// Sprawdzenie balansu danego użytkownika\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// Przetransferowanie środków na inne portfel\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// Umożliwienie przelania środków z jednego portfela na drugi przez osobę trzecią\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// Zgoda na to, by wskazana osoba mogła przelać nasze środki z limitem maksymalnej wartości\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Funkcja która powoduje, że kontrakt nie przyjmie środków w postaci czystego przelewu ETH.\n', '    function() public payable {\n', '        revert();\n', '    }\n', '}\n']
['pragma solidity >=0.4.16 <0.7.0;\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n']
