['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor(address initialOwner) internal {\n', '        require(initialOwner != address(0), "Ownable: initial owner is the zero address");\n', '        _owner = initialOwner;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_isOwner(msg.sender), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function _isOwner(address account) internal view returns (bool) {\n', '        return account == _owner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0));\n', '\n', '        _balances[account] = _balances[account].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for.\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '    function burn(uint256 amount) public {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Custom extension of {ERC20} that adds a set of Minter accounts,\n', ' * which have permission to mint (create) new tokens as they see fit.\n', ' */\n', 'abstract contract ERC20Mintable is ERC20Burnable, Ownable {\n', '\n', '    address[] internal _minters;\n', '\n', '    mapping (address => Minter) public minterInfo;\n', '    struct Minter {\n', '        bool active;\n', '        uint256 limit;\n', '        uint256 minted;\n', '    }\n', '\n', '    modifier canMint(uint256 amount) virtual {\n', '        require(isMinter(msg.sender), "Caller has no permission");\n', '        require(minterInfo[msg.sender].minted.add(amount) <= minterInfo[msg.sender].limit, "Minter limit overflow");\n', '        minterInfo[msg.sender].minted = minterInfo[msg.sender].minted.add(amount);\n', '        _;\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public canMint(amount) returns (bool) {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '\n', '    function setMinter(address account, uint256 limit) public onlyOwner {\n', '        require(account != address(0));\n', '\n', '        if (!minterInfo[account].active && limit > 0) {\n', '            _minters.push(account);\n', '            minterInfo[account].active = true;\n', '        }\n', '\n', '        if (limit > minterInfo[account].minted) {\n', '            minterInfo[account].limit = limit;\n', '        } else {\n', '            minterInfo[account].limit = minterInfo[account].minted;\n', '        }\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return(minterInfo[account].active);\n', '    }\n', '\n', '    function getMinters() public view returns(address[] memory) {\n', '        return _minters;\n', '    }\n', '\n', '    function getMintersInfo() public view returns(uint256 amountOfMinters, uint256 totalLimit, uint256 totalMinted) {\n', '        amountOfMinters = _minters.length;\n', '        for (uint256 i = 0; i < amountOfMinters; i++) {\n', '            totalLimit += minterInfo[_minters[i]].limit;\n', '            totalMinted += minterInfo[_minters[i]].minted;\n', '        }\n', '        return (amountOfMinters, totalLimit, totalMinted);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ApproveAndCall Interface.\n', ' * @dev ApproveAndCall system allows to communicate with smart-contracts.\n', ' */\n', 'abstract contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) virtual external;\n', '}\n', '\n', '/**\n', ' * @title The main project contract.\n', ' */\n', 'contract FinandyToken is ERC20Mintable {\n', '\n', '    // initial supply\n', '    uint256 public INITIAL_SUPPLY = 100000000 * 10 ** 8;\n', '\n', '    // maximum cap\n', '    uint256 public MAXIMUM_SUPPLY = 200000000 * 10 ** 8;\n', '\n', '    // registered contracts (to prevent loss of token via transfer function)\n', '    mapping (address => bool) private _contracts;\n', '\n', '    // modified canMint modifier (to prevent exceeding the maximum cap)\n', '    modifier canMint(uint256 amount) override {\n', '        require(isMinter(msg.sender), "Caller has no permission");\n', '        require(minterInfo[msg.sender].minted.add(amount) <= minterInfo[msg.sender].limit, "Minter limit overflow");\n', '        require(totalSupply().add(amount) <= MAXIMUM_SUPPLY, "Total supply cannot exceed the cap");\n', '        minterInfo[msg.sender].minted = minterInfo[msg.sender].minted.add(amount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * @dev constructor function that is called once at deployment of the contract.\n', '      * @param recipient Address to receive initial supply.\n', '      */\n', '    constructor(address initialOwner, address recipient) public Ownable(initialOwner) {\n', '\n', '        // name of the token\n', '        _name = "Finandy";\n', '        // symbol of the token\n', '        _symbol = "FIN";\n', '        // decimals of the token\n', '        _decimals = 8;\n', '\n', '        // creation of initial supply\n', '        _mint(recipient, INITIAL_SUPPLY);\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev modified transfer function that allows to safely send tokens to smart-contract.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public override returns (bool) {\n', '\n', '        if (_contracts[to]) {\n', '            approveAndCall(to, value, new bytes(0));\n', '        } else {\n', '            super.transfer(to, value);\n', '        }\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to send tokens (via Approve and TransferFrom) to other smart-contract.\n', '    * @param spender Address of smart contracts to work with.\n', '    * @param amount Amount of tokens to send.\n', '    * @param extraData Any extra data.\n', '    */\n', '    function approveAndCall(address spender, uint256 amount, bytes memory extraData) public returns (bool) {\n', '        require(approve(spender, amount));\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to register other smart-contracts (to prevent loss of tokens via transfer function).\n', '     * @param account Address of smart contracts to work with.\n', '     */\n', '    function registerContract(address account) external onlyOwner {\n', '        require(_isContract(account), "DigexToken: account is not a smart-contract");\n', '        _contracts[account] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to unregister registered smart-contracts.\n', '     * @param account Address of smart contracts to work with.\n', '     */\n', '    function unregisterContract(address account) external onlyOwner {\n', '        require(isRegistered(account), "DigexToken: account is not registered yet");\n', '        _contracts[account] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (for example promo or bounties).\n', '    * @param ERC20Token Address of ERC20 token.\n', '    * @param recipient Account to receive tokens.\n', '    */\n', '    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\n', '\n', '        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n', '        IERC20(ERC20Token).transfer(recipient, amount);\n', '\n', '    }\n', '\n', '    /**\n', '     * @return true if the address is registered as contract\n', '     * @param account Address to be checked.\n', '     */\n', '    function isRegistered(address account) public view returns (bool) {\n', '        return _contracts[account];\n', '    }\n', '\n', '    /**\n', '     * @return true if `account` is a contract.\n', '     * @param account Address to be checked.\n', '     */\n', '    function _isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '}']