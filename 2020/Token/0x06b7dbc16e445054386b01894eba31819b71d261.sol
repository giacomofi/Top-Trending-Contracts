['pragma solidity ^0.4.19;\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', 'contract TokenERC20 {\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals = 18;\n', '\tuint256 public totalSupply;\n', '\n', '\t// ��mapping����ÿ����ַ��Ӧ�����\n', '\tmapping (address => uint256) public balanceOf;\n', '\t// �洢���˺ŵĿ���\n', '\tmapping (address => mapping (address => uint256)) public allowance;\n', '\t// �¼�������֪ͨ�ͻ��˽��\u05f7���\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\t// �¼�������֪ͨ�ͻ��˴��ұ�����\n', '\tevent Burn(address indexed from, uint256 value);\n', '\t\n', '\t/*\n', '\t*��ʼ������\n', '\t*/\n', '\tfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // ��Ӧ�ķݶ\ue8ec�ݶ����С�Ĵ��ҵ�λ�йأ��ݶ� = ��\n', '\t\tbalanceOf[msg.sender] = totalSupply;                // ������ӵ�����еĴ���\n', '\t\tname = tokenName;                                   // ��������\n', '\t\tsymbol = tokenSymbol;                               // ���ҷ���\n', '}\n', '\n', '\t//���ҽ���ת�Ƶ��ڲ�ʵ��\n', '\tfunction _transfer(address _from, address _to, uint _value) internal {\n', '\t\t// ȷ��Ŀ���ַ��Ϊ0x0����Ϊ0x0��ַ��������\n', '\t\trequire(_to != 0x0);\n', '\t\t// ��鷢�������\n', '\t\trequire(balanceOf[_from] >= _value);\n', '\t\t// ȷ��ת��Ϊ������\n', '\t\trequire(balanceOf[_to] + _value > balanceOf[_to]);\n', '\t\t\n', '\t\t// ����������齻�ף�\n', '\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\t\t// Subtract from the sender\n', '\t\tbalanceOf[_from] -= _value;\n', '\t\t\n', '\t\t// Add the same to the recipient\n', '\t\tbalanceOf[_to] += _value;\n', '\t\tTransfer(_from, _to, _value);\n', '\t\t\n', '\t\t// ��assert���������\u07fc���\n', '\t\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '}\n', '\n', '\t/*****\n', '\t**���ҽ���ת��\n', '\t**���Լ������������ߣ��˺ŷ���`_value`�����ҵ� `_to`�˺�\n', '\t**@param _to �����ߵ�ַ\n', '\t**@param _value ת������\n', '\t**/\n', '\tfunction transfer(address _to, uint256 _value) public {\n', '\t\t_transfer(msg.sender, _to, _value);\n', '\t }\n', '\t \n', '\t /*****\n', '\t**�˺�֮����ҽ���ת��\n', '\t**@param _from �����ߵ�ַ\n', '\t**@param _to �����ߵ�ַ\n', '\t**@param _value ת������\n', '\t**/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\t\trequire(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\t\tallowance[_from][msg.sender] -= _value;\n', '\t\t_transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\t /*****\n', '\t**����ĳ����ַ����Լ�����Դ������������廨�ѵĴ�����\n', '\t**���������`_spender` ���Ѳ����� `_value` ������\n', '\t**@param _spender The address authorized to spend\n', '\t**@param _value the max amount they can spend\n', '\t**/\n', '\tfunction approve(address _spender, uint256 _value) public\n', '\t\treturns (bool success) {\n', '\t\tallowance[msg.sender][_spender] = _value;\n', '\t\treturn true;\n', '\t}\n', '\t/*****\n', '\t**��������һ����ַ����Լ�����ң����������ߣ����������\u0ee8�ѵĴ�����\n', '\t**@param _spender ����Ȩ�ĵ�ַ����Լ��\n', '\t**@param _value ���ɻ��Ѵ�����\n', '\t**@param _extraData ���\u0378���Լ�ĸ�������\n', '\t**/\n', '\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '\t public\n', '\t returns (bool success) {\n', '\t tokenRecipient spender = tokenRecipient(_spender);\n', '\t if (approve(_spender, _value)) {\n', '\t\t// ֪ͨ��Լ\n', '\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\n', '\t\treturn true;\n', '\t\t}\n', '\t }\n', '\t///�����ң����������ߣ��˻���ָ��������\n', '\tfunction burn(uint256 _value) public returns (bool success) {\n', '\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '\t\ttotalSupply -= _value;                      // Updates totalSupply\n', '\t\tBurn(msg.sender, _value);\n', '\t\treturn true;\n', '\t}\n', '\t/*****\n', '\t**�����û��˻���ָ��������\n', '\t**Remove `_value` tokens from the system irreversibly on behalf of `_from\n', '\t**@param _from the address of the sender\n', '\t**@param _value the amount of money to burn\n', '\t**/\n', '\tfunction burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '\t\trequire(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '\t\trequire(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '\t\tbalanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "\t\tallowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '\t\ttotalSupply -= _value;                              // Update totalSupply\n', '\t\tBurn(_from, _value);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.4.19;\n', ' \n', 'contract Token {\n', '    /// token������Ĭ�ϻ�Ϊpublic��������һ��getter�����ӿڣ�����ΪtotalSupply().\n', '    uint256 public totalSupply;\n', ' \n', '    /// ��ȡ�˻�_ownerӵ��token������\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', ' \n', '    //����Ϣ�������˻�����_to�˻�ת����Ϊ_value��token\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', ' \n', '    //���˻�_from�����˻�_toת����Ϊ_value��token����approve�������ʹ��\n', '    function transferFrom(address _from, address _to, uint256 _value) returns  (bool success);\n', ' \n', '    //��Ϣ�����˻������˻�_spender�ܴӷ����˻���ת������Ϊ_value��token\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', ' \n', '    //��ȡ�˻�_spender���Դ��˻�_owner��ת��token������\n', '    function allowance(address _owner, address _spender) constant returns  (uint256 remaining);\n', ' \n', '    //����ת��ʱ����Ҫ�������¼� \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', ' \n', '    //������approve(address _spender, uint256 _value)�ɹ�ִ��ʱ���봥�����¼�\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n']
['pragma solidity ^0.4.19;\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', 'contract TokenERC20 {\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals = 18;\n', '\tuint256 public totalSupply;\n', '\n', '\t// ��mapping����ÿ����ַ��Ӧ�����\n', '\tmapping (address => uint256) public balanceOf;\n', '\t// �洢���˺ŵĿ���\n', '\tmapping (address => mapping (address => uint256)) public allowance;\n', '\t// �¼�������֪ͨ�ͻ��˽��\u05f7���\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\t// �¼�������֪ͨ�ͻ��˴��ұ�����\n', '\tevent Burn(address indexed from, uint256 value);\n', '\t\n', '\t/*\n', '\t*��ʼ������\n', '\t*/\n', '\tfunction TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '\t\ttotalSupply = initialSupply * 10 ** uint256(decimals);  // ��Ӧ�ķݶ\ue8ec�ݶ����С�Ĵ��ҵ�λ�йأ��ݶ� = ��\n', '\t\tbalanceOf[msg.sender] = totalSupply;                // ������ӵ�����еĴ���\n', '\t\tname = tokenName;                                   // ��������\n', '\t\tsymbol = tokenSymbol;                               // ���ҷ���\n', '}\n', '}']
