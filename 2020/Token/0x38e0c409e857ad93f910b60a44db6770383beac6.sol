['pragma solidity >= 0.4.24 < 0.6.0;\n', '\n', '\n', '/**\n', ' * @title ROS Coin\n', ' */\n', '\n', '/**\n', ' * @title ERC20 Standard Interface\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title RosCoin implementation\n', ' */\n', 'contract RosCoin is IERC20 {\n', '    string public name = "Ros Coin";\n', '    string public symbol = "ROS";\n', '    uint8 public decimals = 18;\n', '    \n', '    uint256 pvsaleAmount;\n', '    uint256 salesAmount;\n', '    uint256 rewardAmount;\n', '    uint256 companyAmount;\n', '    uint256 rndAmount;\n', '    \n', '    uint256[] allowance;\n', '    \n', '\n', '    uint256 _totalSupply;\n', '    mapping(address => uint256) balances;\n', '\n', '    // Addresses\n', '    address public owner;\n', '    address public pvsale;\n', '    address public sales;\n', '    address public reward;\n', '    address public company;\n', '    address public rnd;\n', '    \n', '    address public marker;\n', '    address public locker;\n', '    \n', '    IERC20 private _locker;\n', '    IERC20 private _marker;\n', '\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '\n', '        pvsale  = 0xbf98f2BA89cC717459EB666538f4e9Ba6f8d134D;\n', '        sales   = 0xC97F0A011A2dbf5c9E32d0C25A9ee8d9A1F368E4;\n', '        reward  = 0x58755Aac033CA336bE9F40B4d609DBA2339c1bCb;\n', '        company = 0x97697db45109138b06eFF5D5AF857bDfb11c95A6;\n', '        rnd     = 0x1f7b494E6aE6a3D9FBFfc4da76F7B7fBF6aa24d5;\n', '        \n', '        marker  = 0xE3791E6fCFFDFBfEE077e44F6DbD77881c2759F4;\n', '        locker  = 0x628162AFe4E62418bDD36c35Beb2E1710a2E6212;\n', '\n', '        pvsaleAmount   = toWei( 300000000);\n', '        salesAmount    = toWei( 100000000);\n', '        rewardAmount   = toWei( 150000000);\n', '        companyAmount  = toWei( 250000000);\n', '        rndAmount      = toWei( 200000000);\n', '        _totalSupply   = toWei(1000000000);  //1,000,000,000\n', '        \n', '        _locker = IERC20(locker);\n', '        _marker = IERC20(marker);\n', '\n', '        require(_totalSupply == pvsaleAmount + salesAmount + rewardAmount + companyAmount + rndAmount );\n', '        \n', '        balances[owner] = _totalSupply;\n', '\n', '        emit Transfer(address(0), owner, balances[owner]);\n', '        \n', '        transfer(pvsale, pvsaleAmount);\n', '        transfer(sales, salesAmount);\n', '        transfer(reward, rewardAmount);\n', '        transfer(company, companyAmount);\n', '        transfer(rnd, rndAmount);\n', '\n', '        require(balances[owner] == 0);\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        return balances[who];\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require(msg.sender != to);\n', '        require(to != owner);\n', '        require(value > 0);\n', '\n', '        uint256 lockerBalance = _locker.balanceOf(msg.sender);\n', '        uint256 markerBalance = _marker.balanceOf(msg.sender);\n', '\n', '        if (lockerBalance > 0) {\n', '            require(now > 1607558400);\n', '        }\n', '\n', '        if (markerBalance > 0) {\n', '            require(balances[msg.sender] >= markerBalance + value);\n', '        }\n', '\n', '        require( balances[msg.sender] >= value );\n', '        require( balances[to] + value >= balances[to] );    // prevent overflow\n', '\n', '\n', '\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function burnCoins(uint256 value) public {\n', '        require(balances[msg.sender] >= value);\n', '        require(_totalSupply >= value);\n', '        \n', '        balances[msg.sender] -= value;\n', '        _totalSupply -= value;\n', '\n', '        emit Transfer(msg.sender, address(0), value);\n', '    }\n', '\n', '    function toWei(uint256 value) private view returns (uint256) {\n', '        return value * (10 ** uint256(decimals));\n', '    }\n', '}']