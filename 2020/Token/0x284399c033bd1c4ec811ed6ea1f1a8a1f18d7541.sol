['/*\n', ' *\n', ' *\n', ' *               BOGGED\n', ' *      https://views.farm/bogged\n', ' *        \n', ' *\n', ' */\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns(uint256);\n', '\n', '    function balanceOf(address who) external view returns(uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns(uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns(bool);\n', '\n', '    function approve(address spender, uint256 value) external returns(bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns(bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    function ceil(uint256 a, uint256 m) internal pure returns(uint256) {\n', '        uint256 c = add(a, m);\n', '        uint256 d = sub(c, 1);\n', '        return mul(div(d, m), m);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    function name() public view returns(string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns(string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'contract BOGGED is ERC20Detailed {\n', '\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply = 100000 * 1e18;\n', '\n', '    /// @note The base percent for the burn amount.\n', '    uint256 public basePercent = 320;\n', '\n', '    constructor() public ERC20Detailed("BOGGED", "BOGGED", 18) {\n', '        _mint(msg.sender, _totalSupply);\n', '    }\n', '\n', '    /// @return Total number of tokens in circulation\n', '    function totalSupply() public view returns(uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `owner`\n', '     * @param owner The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address owner) public view returns(uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `owner`\n', '     * @param owner The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address owner, address spender) public view returns(uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Find the number of tokens to burn from `value`. Approximated at 0.3125%.\n', '     * @param value The value to find the burn amount from\n', '     * @return The found burn amount\n', '     */\n', '    function findBurnAmount(uint256 value) public view returns(uint256) {\n', '        //Allow transfers of 0.000000000000000001\n', '        if (value == 1) {\n', '            return 0;\n', '        }\n', '        uint256 roundValue = value.ceil(basePercent);\n', '        //Gas optimized\n', '        uint256 burnAmount = roundValue.mul(100).div(32000);\n', '        return burnAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `value` minus `findBurnAmount(value)` tokens from `msg.sender` to `to`, \n', '     * while subtracting `findBurnAmount(value)` tokens from `_totalSupply`. This performs a transfer with an approximated fee of 0.3125%\n', '     * @param to The address of the destination account\n', '     * @param value The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address to, uint256 value) public returns(bool) {\n', '        require(to != address(0));\n', '\n', '        uint256 tokensToBurn = findBurnAmount(value);\n', '        uint256 tokensToTransfer = value.sub(tokensToBurn);\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(tokensToTransfer);\n', '\n', '        _totalSupply = _totalSupply.sub(tokensToBurn);\n', '\n', '        emit Transfer(msg.sender, to, tokensToTransfer);\n', '        emit Transfer(msg.sender, address(0), tokensToBurn);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `value` from `from`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param value The number of tokens that are approved\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint256 value) public returns(bool) {\n', '        require(spender != address(0));\n', '        _allowances[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `value` minus `findBurnAmount(value)` tokens from `from` to `to`, \n', '     * while subtracting `findBurnAmount(value)` tokens from `_totalSupply`. This performs a transfer with an approximated fee of 0.3125%\n', '     * @param from The address of the source account\n', '     * @param to The address of the destination account\n', '     * @param value The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool) {\n', '        require(value <= _allowances[from][msg.sender]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '\n', '        uint256 tokensToBurn = findBurnAmount(value);\n', '        uint256 tokensToTransfer = value.sub(tokensToBurn);\n', '\n', '        _balances[to] = _balances[to].add(tokensToTransfer);\n', '        _totalSupply = _totalSupply.sub(tokensToBurn);\n', '\n', '        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\n', '\n', '        emit Transfer(from, to, tokensToTransfer);\n', '        emit Transfer(from, address(0), tokensToBurn);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @notice Increase allowance of `spender` by 'addedValue'\n", '     * @param spender The address of the account which may transfer tokens\n', '     * @param addedValue Value to be added onto the existing allowance amount\n', '     * @return Whether or not the allowance increase succeeded\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns(bool) {\n', '        require(spender != address(0));\n', '        _allowances[msg.sender][spender] = (_allowances[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @notice Decrease allowance of `spender` by 'subtractedValue'\n", '     * @param spender The address of the account which may transfer tokens\n', '     * @param subtractedValue Value to be subtracted onto the existing allowance amount\n', '     * @return Whether or not the allowance decrease succeeded\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool) {\n', '        require(spender != address(0));\n', '        _allowances[msg.sender][spender] = (_allowances[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(amount != 0);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Burn `amount` of tokens from `msg.sender` by sending them to `address(0)`\n', '     * @param amount The amount of tokens to burn\n', '     */\n', '    function burn(uint256 amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(amount != 0);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[account] = _balances[account].sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Burn `amount` of tokens from `account` by sending them to `address(0)`\n', '     * @param amount The amount of tokens to burn\n', '     */\n', '    function burnFrom(address account, uint256 amount) external {\n', '        require(amount <= _allowances[account][msg.sender]);\n', '        _allowances[account][msg.sender] = _allowances[account][msg.sender].sub(amount);\n', '        _burn(account, amount);\n', '    }\n', '}']