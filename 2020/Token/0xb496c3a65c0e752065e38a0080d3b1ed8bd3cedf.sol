['/*OnePiece t.me/OPTreasure*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract ERC20Interface {\n', '    \n', '    function allowance(address tokenOwner, address spender) \n', '        public \n', '        view \n', '        returns (uint remaining);\n', '   \n', '    function approve(address spender, uint tokens) \n', '        public \n', '        returns (bool success);\n', '    \n', '    function totalSupply() \n', '        public \n', '        view \n', '        returns (uint);\n', '   \n', '    function balanceOf(address tokenOwner) \n', '        public \n', '        view \n', '        returns (uint balance);\n', '        \n', '    function transfer(address to, uint tokens) \n', '        public \n', '        returns (bool success);\n', '        \n', '    function transferFrom(address from, address to, uint tokens) \n', '        public \n', '        returns (bool success);\n', '     \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    \n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 x, uint256 y) \n', '        internal \n', '        pure returns (uint256) \n', '    {\n', '        uint256 z = x + y;\n', '        assert(z >= x);\n', '        return z;\n', '    }\n', '      \n', '    function subtract(uint256 x, uint256 y) \n', '        internal \n', '        pure \n', '        returns (uint256) \n', '    {\n', '        assert(y <= x);\n', '        return x - y;\n', '    }\n', '    \n', '    function multiply(uint256 x, uint256 y) \n', '        internal \n', '        pure \n', '        returns (uint256) \n', '    {\n', '        if (x == 0) {\n', '          return 0;\n', '        }\n', '        uint256 z = x * y;\n', '        assert(z / x == y);\n', '        return z;\n', '    }\n', '    \n', '    function divide(uint256 x, uint256 y) \n', '        internal \n', '        pure \n', '        returns (uint256) \n', '    {\n', '        uint256 z = x / y;\n', '        return z;\n', '    }\n', '    \n', '    function ceil(uint256 x, uint256 y) \n', '        internal \n', '        pure \n', '        returns (uint256) \n', '    {\n', '        uint256 c = add(x,y);\n', '        uint256 d = subtract(c,1);\n', '        return multiply(divide(d,y),y);\n', '    }\n', '}\n', '\n', 'contract OnePiece is ERC20Interface {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    \n', '    uint256 public foundationRatio = 100;\n', '    uint256 public _totalSupply;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    constructor() public {\n', '        name = "OnePieceTreasure";\n', '        symbol = "OPT";\n', '        decimals = 18;\n', '        _totalSupply = 400000000000000000000;\n', '        \n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function getBurnPercent(uint256 value) public view returns (uint256)  {\n', '        uint256 roundValue = value.ceil(foundationRatio);\n', '        uint256 onePercent = roundValue.multiply(foundationRatio).divide(30000); // 3 percent burn\n', '        return onePercent;\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].subtract(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].subtract(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function transfer(address to, uint value) public returns (bool success) {\n', '\n', '        require(value <= balances[msg.sender]);\n', '        require(to != address(0));\n', '    \n', '        uint256 tokensToBurn = getBurnPercent(value);\n', '        uint256 tokensToTransfer = value.subtract(tokensToBurn);\n', '    \n', '        balances[msg.sender] = balances[msg.sender].subtract(value);\n', '        balances[to] = balances[to].add(tokensToTransfer);\n', '    \n', '        _totalSupply = _totalSupply.subtract(tokensToBurn);\n', '    \n', '        emit Transfer(msg.sender, to, tokensToTransfer);\n', '        emit Transfer(msg.sender, address(0), tokensToBurn);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    \n', '}']