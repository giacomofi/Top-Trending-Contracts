['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.6;\n', '\n', '\n', '  interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '     \n', '     event Burn(address indexed from, uint256 value);\n', '\n', '}\n', 'interface ERC223 {\n', '    function transfer(address to, uint value, bytes calldata data)  external returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'interface ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\n', '}\n', '\n', '\n', '\n', 'library SafeMath{\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        if (a == 0) {\n', '        return 0;}\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '         function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '}\n', '\n', '\n', '\n', 'contract TokenContract is IERC20, Pausable,ERC223 {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '    address internal  _admin;\n', '    uint256 private tokenSold;\n', '    uint256 internal lockedBalance;\n', '\n', '    event PayeeAdded(address account, uint256 shares);\n', '    event PaymentReleased(address to, uint256 amount);\n', '    event PaymentReceived(address from, uint256 amount);\n', '    event transferredOwnership (address indexed previousOwner,address indexed currentOwner);\n', '\n', '    uint256 private _totalShares;\n', '    uint256 private _totalReleased;\n', '      address[] public _payees;\n', '      \n', '      struct vestingDetails {\n', '        address user;\n', '        uint256 amount;\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '        bool vestingStatus;\n', '    }\n', '\n', '    mapping(address => uint256) private _shares;\n', '    mapping(address => uint256) private _released;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address=> vestingDetails) public vesting;\n', '\n', '    \n', '    constructor()   public  {\n', '        _admin = msg.sender;\n', '        _symbol = "NBK";  \n', '        _name = "Notebook"; \n', '        _decimals = 18; \n', '        _totalSupply =  98054283* 10**uint(_decimals);\n', '        balances[msg.sender]=_totalSupply;\n', '\n', '    }\n', '    \n', '    modifier ownership()  {\n', '    require(msg.sender == _admin);\n', '        _;\n', '    }\n', '    \n', '    \n', '    \n', '    function name() public view returns (string memory) \n', '    {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) \n', '    {\n', '        return _symbol;\n', '    }\n', '    function _tokenSold() public view returns(uint256) {\n', '        return tokenSold;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) \n', '    {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) \n', '    {\n', '        return _totalSupply;\n', '    }\n', '   \n', '\n', '   function transfer(address _to, uint256 _value) public virtual override returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = balances[msg.sender].sub(_value);\n', '     balances[_to] = (balances[_to]).add( _value);\n', '     emit IERC20.Transfer(msg.sender, _to, _value);\n', '     tokenSold += _value;\n', '     return true;\n', '     \n', '   }\n', '\n', '  function balanceOf(address _owner) public override view returns (uint256 balance) {\n', '    return balances[_owner];\n', '   }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public virtual override returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = (balances[_from]).sub( _value);\n', '    balances[_to] = (balances[_to]).add(_value);\n', '    allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);\n', '    tokenSold += _value;\n', '    \n', '    emit IERC20.Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '   \n', '   function openVesting(address _user,uint256 _amount, uint256 _eTime) ownership public returns(bool)  {\n', '      lockTokens(_amount);\n', '      vesting[_user].user = _user;\n', '      vesting[_user].amount= _amount;\n', '      vesting[_user].startTime = now;\n', '      vesting[_user].endTime = _eTime;\n', '      vesting[_user].vestingStatus = true;\n', '      return true;\n', '  }\n', '  \n', '  function releaseVesting(address _user) ownership public returns(bool) {\n', '      require(now > vesting[_user].endTime);\n', '      vesting[_user].vestingStatus = false;\n', '      unlockTokens(vesting[_user].amount);\n', '      return true;\n', '  }\n', '\n', '   function approve(address _spender, uint256 _value) public override returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '    emit IERC20.Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public override view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', ' \n', '    \n', ' function burn(uint256 _value) public ownership returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '        balances[msg.sender] -= _value;            // Subtract from the sender\n', '        _totalSupply -= _value;                      // Updates totalSupply\n', '        //emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public ownership returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n', '        balances[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        _totalSupply -= _value;                              // Update totalSupply\n', '       // emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '     \n', '  \n', '  \n', ' \n', '  \n', '  //Admin can transfer his ownership to new address\n', '  function transferownership(address _newaddress) ownership public returns(bool){\n', '      require(_newaddress != address(0));\n', '      emit transferredOwnership(_admin, _newaddress);\n', '      _admin=_newaddress;\n', '      return true;\n', '  }\n', '  function ownerAddress() public view returns(address) {\n', '      return _admin;\n', '  }\n', '   function totalShares() public view returns (uint256) {\n', '        return _totalShares;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the total amount of Ether already released.\n', '     */\n', '    function totalReleased() public view returns (uint256) {\n', '        return _totalReleased;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the amount of shares held by an account.\n', '     */\n', '    function shares(address account) public view returns (uint256) {\n', '        return _shares[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the amount of Ether already released to a payee.\n', '     */\n', '    function released(address account) public view returns (uint256) {\n', '        return _released[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the address of the payee number `index`.\n', '     */\n', '    function payee(uint256 index) public view returns (address) {\n', '        return _payees[index];\n', '    }\n', '     receive () external payable virtual {\n', '        emit PaymentReceived(msg.sender, msg.value);\n', '    }\n', '    function distributeEthersToHolders (address[] memory payees, uint256[] memory amountOfEther) public payable {\n', '        // solhint-disable-next-line max-line-length\n', '        require(payees.length == amountOfEther.length, "PaymentSplitter: payees and shares length mismatch");\n', '        require(payees.length > 0, "PaymentSplitter: no payees");\n', '\n', '        for (uint256 i = 0; i < payees.length; i++) {\n', '            _addPayee(payees[i], amountOfEther[i]);\n', '        }\n', '    }\n', '    function _addPayee(address account, uint256 shares_) private {\n', '        require(account != address(0), "PaymentSplitter: account is the zero address");\n', '        require(shares_ > 0, "PaymentSplitter: shares are 0");\n', '        require(_shares[account] == 0, "PaymentSplitter: account already has shares");\n', '\n', '        _payees.push(account);\n', '        _shares[account] = shares_;\n', '        _totalShares = _totalShares.add(shares_);\n', '        emit PayeeAdded(account, shares_);\n', '    }\n', '   function releaseEthersToHolder(address payable account) public   virtual {\n', '        require(_shares[account] > 0, "PaymentSplitter: account has no shares");\n', '        uint256 totalReceived = address(this).balance.add(_totalReleased);\n', '        uint256 payment = totalReceived.mul(_shares[account]).div(_totalShares).sub(_released[account]);\n', '        require(payment != 0, "PaymentSplitter: account is not due payment");\n', '        _released[account] = _released[account].add(payment);\n', '        _totalReleased = _totalReleased.add(payment);\n', '        account.transfer(payment);\n', '        emit PaymentReleased(account, payment);\n', '    }\n', '    \n', '    \n', '    function pauseToken() public ownership whenNotPaused  {\n', '        _pause();\n', '    }\n', '    function unPauseToken() public ownership whenPaused  {\n', '        _unpause();\n', '       \n', '    }\n', '    function transfer(address _to, uint _value, bytes memory _data) public virtual override returns (bool ){\n', '        require(_value > 0 );\n', '        if(isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = (balances[_to]).add( _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '    function lockTokens(uint256 _amount) ownership public returns(bool){\n', '        require( balances[_admin]>=_amount);\n', '        balances[_admin] = balances[_admin].sub(_amount);\n', '        lockedBalance = lockedBalance.add(_amount);\n', '        return true;\n', '  }\n', '\n', '  function unlockTokens(uint256 _amount) ownership public returns (bool) {\n', '        require(lockedBalance >= _amount);\n', '        balances[_admin] = balances[_admin].add(_amount);\n', '        lockedBalance = lockedBalance.sub(_amount);\n', '        return true;\n', '  }\n', '  function  viewLockedBalance() ownership public view returns(uint256) {\n', '        return lockedBalance;\n', '  } \n', '\n', '   \n', '     \n', '   \n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract NBK is TokenContract {\n', '   constructor ()  public  {\n', '\n', '   }\n', '    function transfer(address _to, uint256 _amount) public whenNotPaused override returns(bool) {\n', '       return super.transfer(_to,_amount);\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _amount) public whenNotPaused override returns(bool) {\n', '        return super.transferFrom(_from,_to,_amount);\n', '    }\n', '}']