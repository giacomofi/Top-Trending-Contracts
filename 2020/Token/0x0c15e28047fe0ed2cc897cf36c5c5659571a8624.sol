['// File: contracts/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 9;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/ownership/MultOwnable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract MultOwnable {\n', '  address[] private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  constructor() internal {\n', '    _owner.push(msg.sender);\n', '    emit OwnershipTransferred(address(0), _owner[0]);\n', '  }\n', '\n', '  function checkOwner() private view returns (bool) {\n', '    for (uint8 i = 0; i < _owner.length; i++) {\n', '      if (_owner[i] == msg.sender) {\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function checkNewOwner(address _address) private view returns (bool) {\n', '    for (uint8 i = 0; i < _owner.length; i++) {\n', '      if (_owner[i] == _address) {\n', '        return false;\n', '      }\n', '    }\n', '    return true;\n', '  }\n', '\n', '  modifier isAnOwner() {\n', '    require(checkOwner(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public isAnOwner {\n', '    for (uint8 i = 0; i < _owner.length; i++) {\n', '      if (_owner[i] == msg.sender) {\n', '        _owner[i] = address(0);\n', '        emit OwnershipTransferred(_owner[i], msg.sender);\n', '      }\n', '    }\n', '  }\n', '\n', '  function getOwners() public view returns (address[] memory) {\n', '    return _owner;\n', '  }\n', '\n', '  function addOwnerShip(address newOwner) public isAnOwner {\n', '    _addOwnerShip(newOwner);\n', '  }\n', '\n', '  function _addOwnerShip(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    require(checkNewOwner(newOwner), "Owner already exists");\n', '    _owner.push(newOwner);\n', '    emit OwnershipTransferred(_owner[_owner.length - 1], newOwner);\n', '  }\n', '}\n', '\n', '// File: contracts/TulipToken.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', 'contract TulipToken is MultOwnable, ERC20{\n', '    constructor (string memory name, string memory symbol) public ERC20(name, symbol) MultOwnable(){\n', '    }\n', '\n', '    function contractMint(address account, uint256 amount) external isAnOwner{\n', '        _mint(account, amount);\n', '    }\n', '\n', '    function contractBurn(address account, uint256 amount) external isAnOwner{\n', '        _burn(account, amount);\n', '    }\n', '\n', '\n', '     /* ========== RESTRICTED FUNCTIONS ========== */\n', '    function addOwner(address _newOwner) external isAnOwner {\n', '        addOwnerShip(_newOwner);\n', '    }\n', '\n', '    function getOwner() external view isAnOwner{\n', '        getOwners();\n', '    }\n', '\n', '    function renounceOwner() external isAnOwner {\n', '        renounceOwnership();\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * > Note that this information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * `IERC20.balanceOf` and `IERC20.transfer`.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type,\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n', ' * available, which can be aplied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', '// File: contracts/GardenContractV1.sol\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract GardenContractV1 is Ownable, ReentrancyGuard {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for TulipToken;\n', '  using SafeERC20 for IERC20;\n', '\n', '  /* ========== STATE VARIABLES ========== */\n', '  \n', '  uint256 private _epochBlockStart;\n', '\n', '  uint256 private _epochRedTulipStart;\n', '\n', '  uint8 private _pinkTulipDivider;\n', '\n', '  uint256 private _decimalConverter = 10**9;\n', '\n', '  struct  tulipToken{\n', '      TulipToken token;\n', '      uint256 totalSupply;\n', '      mapping(address => uint256)  balances;\n', '      mapping(address => uint256)  periodFinish;\n', '  }\n', '\n', '  tulipToken[3] private _tulipToken;\n', '\n', '  struct externalToken{\n', '      IERC20 token;\n', '      uint256 rewardsDuration;\n', '      uint256 rewardsMultiplier;\n', '      string rewardsMultiplierType;\n', '      uint256 totalSupply;\n', '      address tokenAddress;\n', '      mapping(address => uint256)  balances;\n', '      mapping(address => uint256)  periodFinish;\n', '  }\n', '\n', '  externalToken[] private _externalToken;\n', '\n', '  /* ========== CONSTRUCTOR ========== */\n', '\n', '  constructor(address _seedToken, address _basicTulipToken, address _advTulipToken) public Ownable() {\n', '    \n', '    _tulipToken[0].token = TulipToken(_seedToken);\n', '    _tulipToken[1].token = TulipToken(_basicTulipToken);\n', '    _tulipToken[2].token = TulipToken(_advTulipToken);\n', '    \n', '    _pinkTulipDivider = 100;\n', '    _epochBlockStart = 1600610400;\n', '    _epochRedTulipStart = _epochBlockStart;\n', '  }\n', '\n', '  /* ========== VIEWS ========== */\n', '\n', '      /* ========== internal ========== */\n', '\n', '  function totalSupply(string calldata name) external view returns (uint256) {\n', '    uint8 i = tulipType(name);\n', '    return _tulipToken[i].totalSupply;\n', '  }\n', '\n', '  function durationRemaining(address account, string calldata name) external view returns (uint256) {\n', '    uint8 i = tulipType(name);\n', '    return _tulipToken[i].periodFinish[account].sub(now);\n', '  }\n', '\n', '  function balanceOf(address account, string calldata name) external view returns (uint256)\n', '  {\n', '    uint8 i = tulipType(name);\n', '    return _tulipToken[i].balances[account];\n', '  }\n', '\n', '      /* ========== external ========== */\n', '\n', '    function totalExternalSupply(address extToken) external view returns (uint256) {\n', '      uint8 i = externalTokenIndex(extToken);\n', '      return _externalToken[i].totalSupply;\n', '    }\n', '\n', '    function externalDurationRemaining(address account, address extToken) external view returns (uint256) {\n', '      uint8 i = externalTokenIndex(extToken);\n', '      return _externalToken[i].periodFinish[account].sub(now);\n', '    }\n', '\n', '    function externalBalanceOf(address account, address extToken) external view returns (uint256)\n', '    {\n', '      uint8 i = externalTokenIndex(extToken);\n', '      return  _externalToken[i].balances[account];\n', '    } \n', '\n', '  /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '      /* ========== internal garden ========== */\n', '  function plant(uint256 amount, string calldata name) external nonReentrant {    \n', '    require(now > _epochBlockStart, "The garden is being set up!");\n', '\n', '    uint8 i = tulipType(name);\n', '\n', '    require(i < 99, "Not a valid tulip name");\n', '    \n', '    require(amount >= 1, "Cannot stake less than 1");\n', '\n', '    if(i == 1){\n', '      uint256 modulo = amount % 100;\n', '      require(modulo == 0, "If planting a pink tulip, has to be multiple of 100");\n', '    }\n', '\n', '    require(_tulipToken[i].balances[msg.sender] == 0 && (_tulipToken[i].periodFinish[msg.sender] == 0 || now > _tulipToken[i].periodFinish[msg.sender]), \n', '    "You must withdraw the previous crop before planting more!");\n', '\n', '    _tulipToken[i].token.safeTransferFrom(msg.sender, address(this), amount.mul(_decimalConverter));\n', '\n', '    _tulipToken[i].totalSupply = _tulipToken[i].totalSupply.add(amount);\n', '\n', '    _tulipToken[i].balances[msg.sender] = _tulipToken[i].balances[msg.sender].add(amount);\n', '\n', '    setTimeStamp(i);\n', '\n', '    emit Staked(msg.sender, amount);\n', '  }\n', '\n', '  \n', '  function withdraw(string memory name) public nonReentrant {\n', '    uint8 i = tulipType(name);\n', '\n', '    require(i < 99, "Not a valid tulip name");\n', '\n', '    require(_tulipToken[i].balances[msg.sender] > 0, "Cannot withdraw 0");\n', '\n', '    _tulipToken[i].token.safeTransfer(msg.sender, _tulipToken[i].balances[msg.sender].mul(_decimalConverter));\n', '\n', '    emit Withdrawn(msg.sender,_tulipToken[i].balances[msg.sender]);\n', '\n', '    zeroHoldings(i);\n', '  }\n', '\n', '\n', '  function harvest(string memory name) public nonReentrant {\n', '    uint8 i = tulipType(name);\n', '\n', '    require(i < 99, "Not a valid tulip name");\n', '    \n', '    require(_tulipToken[i].balances[msg.sender] > 0, "Cannot harvest 0");\n', '    \n', '    require(now > _tulipToken[i].periodFinish[msg.sender], "Cannot harvest until the flowers have bloomed!");\n', '\n', '    uint256 tempAmount;\n', '\n', '    if (i == 2) {\n', '      tempAmount = setRedTulipRewardAmount();\n', '      _tulipToken[0].token.contractMint(msg.sender, tempAmount.mul(_decimalConverter));\n', '      _tulipToken[i].periodFinish[msg.sender] = now.add(7 days);\n', '    } \n', '    else {\n', '      _tulipToken[i].token.contractBurn(address(this), _tulipToken[i].balances[msg.sender].mul(_decimalConverter));\n', '      if(i == 1){\n', '        tempAmount = _tulipToken[i].balances[msg.sender].div(_pinkTulipDivider);\n', '      }\n', '      else{\n', '        tempAmount = _tulipToken[i].balances[msg.sender];\n', '      }\n', '      \n', '      _tulipToken[i + 1].token.contractMint(msg.sender, tempAmount.mul(_decimalConverter));\n', '\n', '      zeroHoldings(i);\n', '    }\n', '    emit RewardPaid(msg.sender, tempAmount);\n', '  }\n', '\n', '      /* ========== external garden ========== */\n', '\n', '  function externalPlant(uint256 amount, address tokenAddress) external nonReentrant {    \n', '    require(now > _epochBlockStart, "The garden is being set up!");\n', '\n', '    uint8 i = externalTokenIndex(tokenAddress);\n', '\n', '    require(i < 99, "Not a valid token address");\n', '\n', '    require(amount > 0, "Cannot stake 0");\n', '\n', '    require(_externalToken[i].balances[msg.sender] == 0 && (_externalToken[i].periodFinish[msg.sender] == 0 || now > _externalToken[i].periodFinish[msg.sender]), \n', '    "You must withdraw the previous stake before planting more!");\n', '\n', '    _externalToken[i].token.safeTransferFrom(msg.sender, address(this), amount);\n', '\n', '    _externalToken[i].totalSupply = _externalToken[i].totalSupply.add(amount);\n', '\n', '    _externalToken[i].balances[msg.sender] = _externalToken[i].balances[msg.sender].add(amount);\n', '\n', '    _externalToken[i].periodFinish[msg.sender] = now.add(_externalToken[i].rewardsDuration);\n', '\n', '    emit Staked(msg.sender, amount);\n', '  }\n', '\n', '  \n', '  function externalWithdraw(address tokenAddress) public nonReentrant {\n', '    uint8 i = externalTokenIndex(tokenAddress);\n', '\n', '    require(i < 99, "Not a valid token address");\n', '\n', '    require(_externalToken[i].totalSupply > 0, "Cannot withdraw 0");\n', '\n', '    _externalToken[i].token.safeTransfer(msg.sender, _externalToken[i].balances[msg.sender]);\n', '\n', '    emit Withdrawn(msg.sender, _externalToken[i].balances[msg.sender]);\n', '\n', '     _externalToken[i].totalSupply = _externalToken[i].totalSupply - _externalToken[i].balances[msg.sender];\n', '     _externalToken[i].balances[msg.sender] = 0;\n', '     _externalToken[i].periodFinish[msg.sender] = 0;\n', '  }\n', '\n', '\n', '  function externalHarvest(address tokenAddress) public nonReentrant {\n', '    uint8 i = externalTokenIndex(tokenAddress);\n', '\n', '    require(i < 99, "Not a valid token address");\n', '\n', '    require(_externalToken[i].totalSupply > 0, "Cannot harvest 0");\n', '\n', '    require(now > _externalToken[i].periodFinish[msg.sender], "Cannot harvest until the flowers have bloomed!");\n', '\n', '    if(keccak256(abi.encodePacked(_externalToken[i].rewardsMultiplier)) == keccak256(abi.encodePacked("div"))){\n', '      _tulipToken[0].token.contractMint(msg.sender, _externalToken[i].totalSupply.div(_externalToken[i].rewardsMultiplier));\n', '    }else{\n', '      _tulipToken[0].token.contractMint(msg.sender, _externalToken[i].totalSupply.mul(_externalToken[i].rewardsMultiplier));\n', '    }\n', '\n', '    _externalToken[i].periodFinish[msg.sender] = now.add(_externalToken[i].rewardsDuration);\n', '    \n', '    emit RewardPaid(msg.sender, _externalToken[i].totalSupply.mul(_externalToken[i].rewardsMultiplier));\n', '  }\n', '\n', '  /* ========== RESTRICTED FUNCTIONS ========== */\n', '\n', '      /* ========== internal functions ========== */\n', '\n', '  function addTokenOwner(address _token, address _newOwner) external onlyOwner\n', '  {\n', '    require(now > _epochBlockStart.add(30 days), "The admin functions are timelocked");\n', '\n', '    TulipToken tempToken = TulipToken(_token);\n', '    tempToken.addOwner(_newOwner);\n', '  }\n', '\n', '  function renounceTokenOwner(address _token) external onlyOwner\n', '  {\n', '    require(now > _epochBlockStart.add(30 days), "The admin functions are timelocked");\n', '\n', '    TulipToken tempToken = TulipToken(_token);\n', '    tempToken.renounceOwner();\n', '  }\n', '\n', '  function changeOwner(address _newOwner) external onlyOwner {\n', '    transferOwnership(_newOwner);\n', '  }\n', '\n', '      /* ========== external functions ========== */\n', '\n', '  function changeExternalTokenDuration(address _tokenAddress, uint256 _newDuration) external onlyOwner {\n', '    uint8 i = externalTokenIndex(_tokenAddress);\n', '\n', '    _externalToken[i].rewardsDuration = _newDuration;\n', '  }\n', '\n', '\n', '  function changeExternalTokenMultiplier(address _tokenAddress, uint256 _newMultiplier, string calldata _multType) external onlyOwner {\n', '    uint8 i = externalTokenIndex(_tokenAddress);\n', '\n', '    _externalToken[i].rewardsMultiplierType = _multType;\n', '    _externalToken[i].rewardsMultiplier = _newMultiplier;\n', '  }\n', '\n', '\n', '  function addExternalToken(address _tokenAddress, uint256 _duration, uint256 _multiplier, string calldata _multiplierType ) external onlyOwner {\n', '    require(keccak256(abi.encodePacked(_multiplierType)) == keccak256(abi.encodePacked("div"))|| keccak256(abi.encodePacked(_multiplierType)) == keccak256(abi.encodePacked("mul")), "Please enter a valid multiplier type");\n', '   \n', '    for(uint8 i = 0; i < _externalToken.length; i++){\n', '      if(_externalToken[i].tokenAddress == _tokenAddress){\n', '        require(_externalToken[i].tokenAddress != _tokenAddress, "This token has already been added!");\n', '      }\n', '    }\n', '\n', '    _externalToken.push(externalToken(\n', '      IERC20(_tokenAddress),\n', '      _duration,\n', '      _multiplier,\n', '      _multiplierType,\n', '      0,\n', '       _tokenAddress\n', '    ));\n', '  }\n', '\n', '\n', '  /* ========== HELPER FUNCTIONS ========== */\n', '\n', '  function tulipType(string memory name) internal pure returns (uint8) {\n', '    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("sTLP"))) {\n', '      return 0;\n', '    }\n', '    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("pTLP"))) {\n', '      return 1;\n', '    }\n', '    if (keccak256(abi.encodePacked(name)) == keccak256(abi.encodePacked("rTLP"))) {\n', '      return 2;\n', '    } else {\n', '      return 99;\n', '    }\n', '  }\n', '\n', '\n', '  function externalTokenIndex(address tokenAddress) internal view returns(uint8){\n', '    for (uint8 i = 0; i < _externalToken.length; i++){\n', '      if(_externalToken[i].tokenAddress == tokenAddress){\n', '        return i;\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  function setTimeStamp(uint8 i) internal{\n', '    if (i == 0) {\n', '      setRewardDurationSeeds();\n', '    }\n', '    if (i == 1) {\n', '      setRewardDurationTulip();\n', '    }\n', '    if (i == 2) {\n', '      _tulipToken[i].periodFinish[msg.sender] = now.add(7 days);\n', '    }\n', '  }\n', '\n', '\n', '  function zeroHoldings(uint8 i) internal{\n', '    _tulipToken[i].totalSupply = _tulipToken[i].totalSupply - _tulipToken[i].balances[msg.sender];\n', '    _tulipToken[i].balances[msg.sender] = 0;\n', '    _tulipToken[i].periodFinish[msg.sender] = 0;\n', '  }\n', '\n', '  /* ========== REAL FUNCTIONS ========== */\n', '  \n', '  function setRewardDurationSeeds() internal returns (bool) {\n', '    uint256 timeSinceEpoch = ((now - _epochBlockStart) / 60 / 60 / 24 / 30) + 1;\n', '\n', '    if (timeSinceEpoch >= 7) {\n', '      _tulipToken[0].periodFinish[msg.sender] = now.add(7 days);\n', '      return true;\n', '    } else {\n', '      _tulipToken[0].periodFinish[msg.sender] = now.add(\n', '        timeSinceEpoch.mul(1 days)\n', '      );\n', '      return true;\n', '    }\n', '  }\n', '\n', '\n', '  function setRewardDurationTulip() internal returns (bool) {\n', '    uint256 timeSinceEpoch = ((now - _epochBlockStart) / 60 / 60 / 24) + 1;\n', '\n', '    if (timeSinceEpoch <= 2) {\n', '      _tulipToken[1].periodFinish[msg.sender] = now.add(2 days);\n', '      return true;\n', '    }\n', '    if (timeSinceEpoch > 2 && timeSinceEpoch <= 7) {\n', '      _tulipToken[1].periodFinish[msg.sender] = now.add(3 days);\n', '      return true;\n', '    }\n', '    if (timeSinceEpoch > 7 && timeSinceEpoch <= 14) {\n', '      _tulipToken[1].periodFinish[msg.sender] = now.add(7 days);\n', '      return true;\n', '    }\n', '    if (timeSinceEpoch > 14) {\n', '      uint256 tempInt = (timeSinceEpoch - 15 days) / 30;\n', '\n', '      if (tempInt >= 7) {\n', '        _tulipToken[1].periodFinish[msg.sender] = now.add(30 days);\n', '        return true;\n', '      } else {\n', '        _tulipToken[1].periodFinish[msg.sender] = now.add(\n', '          14 days + (tempInt.mul(2 days))\n', '        );\n', '        return true;\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  function setRedTulipRewardAmount() internal view returns (uint256) {\n', '    uint256 timeSinceEpoch = (now - _tulipToken[2].periodFinish[msg.sender].sub(7 days)) / 60 / 60 / 24;\n', '    uint256 amountWeeks = timeSinceEpoch.div(7);\n', '    uint256 newtime = now;\n', '    uint256 value = 0;\n', '\n', '    for (uint256 i = amountWeeks; i != 0; i--) {\n', '      uint256 tempTime = newtime.sub(i.mul(7 days));\n', '\n', '      if (tempTime > _epochRedTulipStart && tempTime <= _epochRedTulipStart.add(7 days)) {\n', '        value = value.add(50);\n', '      }\n', '      if (tempTime > _epochRedTulipStart.add(7 days) && tempTime <= _epochRedTulipStart.add(21 days)) {\n', '        value = value.add(25);\n', '      }\n', '      if (tempTime > _epochRedTulipStart.add(21 days)) {\n', '        value = value.add(10);\n', '      }\n', '    }\n', '    return value * _tulipToken[2].balances[msg.sender];\n', '  }\n', '\n', '  /* ========== EVENTS ========== */\n', '  event Staked(address indexed user, uint256 amount);\n', '  event Withdrawn(address indexed user, uint256 amount);\n', '  event RewardPaid(address indexed user, uint256 reward);\n', '}']