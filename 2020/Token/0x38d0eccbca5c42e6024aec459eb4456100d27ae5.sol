['pragma solidity ^0.5.0;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function mint(address account, uint256 amount) public returns (bool);\n', '\n', '    function burn(uint256 amount) public returns (bool);\n', '}\n', '\n', '\n', 'contract YFC_Presale is Ownable {\n', '    address private yfcCoinddress;\n', '    uint256 private price;\n', '    address private messenger;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    constructor(address _yfcCoinddress, uint256 _initialPrice) public {\n', '        yfcCoinddress = _yfcCoinddress;\n', '        price = _initialPrice;\n', '    }\n', '\n', '    event bought(address _buyer, uint256 _paid, uint256 _given);\n', '    event priceChanged(address initiator, uint256 _from, uint256 _to);\n', '    event messengerChanged(address _from, address _to);\n', '    modifier onlyMessenger() {\n', '        require(msg.sender == messenger, "caller is not a messenger");\n', '        _;\n', '    }\n', '\n', '    function updatePrice(uint256 _price) public onlyMessenger {\n', '        uint256 currentprice = price;\n', '        price = _price;\n', '        emit priceChanged(msg.sender, currentprice, _price);\n', '    }\n', '\n', '    function setMessenger(address _messenger) public onlyOwner {\n', '        address currentMessenger = messenger;\n', '        messenger = _messenger;\n', '        emit messengerChanged(currentMessenger, _messenger);\n', '    }\n', '\n', '    function setYFCCoin(address _yfcCoinddress) public onlyOwner {\n', '        yfcCoinddress = _yfcCoinddress;\n', '    }\n', '\n', '    function getPrice() public view returns (uint256 _price) {\n', '        return price;\n', '    }\n', '\n', '    function buyer() public payable {\n', '        require(msg.value > 0, "Invalid amount");\n', '        uint256 amount = msg.value; //.mul(10**18);\n', '        IERC20 YFCCoin = IERC20(yfcCoinddress);\n', '        uint256 amountToSend = amount.div(price).mul(10**18);\n', '        require(\n', '            YFCCoin.transfer(msg.sender, amountToSend),\n', '            "Fail to send fund"\n', '        );\n', '        emit bought(msg.sender, msg.value, amountToSend);\n', '    }\n', '\n', '    function withdrawAllEtherByOwner() public onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function getContractEtherBalance() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '}']