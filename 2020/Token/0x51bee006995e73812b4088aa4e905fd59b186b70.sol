['/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-26\n', ' * Omega Protocol Ltd.\n', '*/\n', '\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20TokenInterface {\n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract OMGPool{\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public maxAllowanceInclusive;\n', '    mapping (address => uint256) public claimedTokens;\n', '    ERC20TokenInterface public erc20Contract;\n', '    \n', '    address private mOwner;\n', '    bool private mIsPaused = false;\n', '    bool private mReentrancyLock = false;\n', '    \n', '    event GetTokens(address requestor, uint256 amount);\n', '    event ReclaimTokens(address owner, uint256 tokenAmount);\n', '    event SetPause(address setter, bool newState, bool oldState);\n', '    event SetMaxAllowance(address setter, uint256 newState, uint256 oldState);\n', '    \n', '    modifier notPaused() {\n', '        require(!mIsPaused);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == mOwner);\n', '        _;\n', '    }\n', '    \n', '    modifier nonReentrant() {\n', '        require(!mReentrancyLock);\n', '        mReentrancyLock = true;\n', '        _;\n', '        mReentrancyLock = false;\n', '    }\n', '    \n', '    function ERC20Faucet(ERC20TokenInterface _erc20ContractAddress, uint256 _maxAllowanceInclusive) public {\n', '        mOwner = msg.sender;\n', '        maxAllowanceInclusive = _maxAllowanceInclusive;\n', '        erc20Contract = _erc20ContractAddress;\n', '    }\n', '    \n', '    function getTokens(uint256 amount) notPaused nonReentrant public returns (bool) {\n', '        require(claimedTokens[msg.sender].add(amount) <= maxAllowanceInclusive);\n', '        require(erc20Contract.balanceOf(this) >= amount);\n', '        \n', '        claimedTokens[msg.sender] = claimedTokens[msg.sender].add(amount);\n', '\n', '        if (!erc20Contract.transfer(msg.sender, amount)) {\n', '            claimedTokens[msg.sender] = claimedTokens[msg.sender].sub(amount);\n', '            return false;\n', '        }\n', '        \n', '        GetTokens(msg.sender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function setMaxAllowance(uint256 _maxAllowanceInclusive) onlyOwner nonReentrant public {\n', '        SetMaxAllowance(msg.sender, _maxAllowanceInclusive, maxAllowanceInclusive);\n', '        maxAllowanceInclusive = _maxAllowanceInclusive;\n', '    }\n', '    \n', '    function reclaimTokens() onlyOwner nonReentrant public returns (bool) {\n', '        uint256 tokenBalance = erc20Contract.balanceOf(this);\n', '        if (!erc20Contract.transfer(msg.sender, tokenBalance)) {\n', '            return false;\n', '        }\n', '\n', '        ReclaimTokens(msg.sender, tokenBalance);\n', '        return true;\n', '    }\n', '    \n', '    function setPause(bool isPaused) onlyOwner nonReentrant public {\n', '        SetPause(msg.sender, isPaused, mIsPaused);\n', '        mIsPaused = isPaused;\n', '    }\n', '}']