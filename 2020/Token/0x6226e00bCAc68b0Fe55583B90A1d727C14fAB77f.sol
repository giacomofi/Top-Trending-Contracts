['pragma solidity ^0.4.25;\n', 'contract MultiVACToken {\n', '    string public name = "MultiVAC";      //  token name\n', '    string public symbol = "MTV";           //  token symbol\n', '    uint256 public decimals = 18;            //  token digit\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    uint256 public totalSupply = 0;\n', '    bool public stopped = false;\n', '    uint256 constant initSupply = 10**10;\n', '    address owner = address(0);\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '    modifier isRunning {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '    modifier validAddress {\n', '        require(address(0) != msg.sender);\n', '        _;\n', '    }\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        totalSupply = initSupply * (10 ** decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_to] += _value;\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public isRunning validAddress returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '    function setName(string _name) public isOwner {\n', '        name = _name;\n', '    }\n', '    function burn(uint256 _value) public isRunning {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[address(0)] += _value;\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '    function () public payable{ \n', '        revert(); \n', '    }\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']