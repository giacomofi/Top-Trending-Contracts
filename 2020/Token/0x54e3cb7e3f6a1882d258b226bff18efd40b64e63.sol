['// contracts/OffshiftVesting.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TimeLock {\n', '    IERC20 token;\n', '\n', '    struct LockBoxStruct {\n', '        address beneficiary;\n', '        uint balance;\n', '        uint releaseTime;\n', '    }\n', '\n', '    LockBoxStruct[] public lockBoxStructs; // This could be a mapping by address, but these numbered lockBoxes support possibility of multiple tranches per address\n', '\n', '    event LogLockBoxDeposit(address sender, uint amount, uint releaseTime);\n', '    event LogLockBoxWithdrawal(address receiver, uint amount);\n', '\n', '    constructor(address tokenContract) public {\n', '        token = IERC20(tokenContract);\n', '    }\n', '\n', '    function deposit(address beneficiary, uint totalAmount, uint trenchAmount, uint firstRelease, uint releaseStride) public returns(bool success) {\n', '        require(token.transferFrom(msg.sender, address(this), totalAmount));\n', '        LockBoxStruct memory l;\n', '        l.beneficiary = beneficiary;\n', '        l.balance = trenchAmount;\n', '        l.releaseTime = firstRelease;\n', '        lockBoxStructs.push(l);\n', '        for (uint i = 1; i < 60; ++i) {\n', '            uint time = firstRelease + (releaseStride * i);\n', '            l.releaseTime = time;\n', '            lockBoxStructs.push(l);\n', '            emit LogLockBoxDeposit(msg.sender, trenchAmount, time);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function withdraw(uint lockBoxNumber) public returns(bool success) {\n', '        LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];\n', '        require(l.beneficiary == msg.sender);\n', '        require(l.releaseTime <= now);\n', '        uint amount = l.balance;\n', '        l.balance = 0;\n', '        emit LogLockBoxWithdrawal(msg.sender, amount);\n', '        require(token.transfer(msg.sender, amount));\n', '        return true;\n', '    }\n', '\n', '}']