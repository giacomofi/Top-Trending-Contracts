['pragma solidity ^0.6.0;\n', '// SPDX-License-Identifier: UNLICENSED\n', '// ----------------------------------------------------------------------------\n', "// 'ezgamers' token contract\n", '\n', '// Symbol      : ezgamers\n', '// Name        : ezg\n', '// Total supply: 1,000,000,000 (1 billion)\n', '// Decimals    : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint);\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', '\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract Token is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol = "EZG";\n', '    string public  name = "Ezgamers";\n', '    uint256 public decimals = 18;\n', '    uint256 _totalSupply = 1e9 * 10 ** (decimals); \n', '    uint256 public soldTokens;\n', '    uint256 private icoEndDate;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        owner = 0x833Cfb9D53cb5dC97F53F715f1555998Cf1251b9;\n', '        icoEndDate = block.timestamp.add(4 weeks);\n', '        balances[address(this)] =  onePercent(totalSupply()).mul(25);\n', '        emit Transfer(address(0), address(this), onePercent(totalSupply()).mul(25));\n', '        balances[address(owner)] =  onePercent(totalSupply()).mul(75);\n', '        emit Transfer(address(0), address(owner), onePercent(totalSupply()).mul(75));\n', '    }\n', '    \n', '    receive() external payable{\n', '        \n', '        require(block.timestamp <= icoEndDate && balanceOf(address(this)) > 0, "pre sale is finished");\n', '        require(msg.value >= 0.25 ether, "Min allowed investment is 0.25 ethers");\n', '        \n', '        // receive ethers\n', '        uint tokens = getTokenAmount(msg.value);\n', '        _transfer(msg.sender, tokens, true);\n', '        // send received funds to the owner\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function getUnSoldTokens() external onlyOwner{\n', '        // sale is over\n', '        require(block.timestamp > icoEndDate && balanceOf((address(this))) > 0, "No tokens in contract to withdraw");\n', '        \n', '        _transfer(owner, balanceOf(address(this)), false); // send all the unsold tokens to the owner\n', '    }\n', '    \n', '    function getTokenAmount(uint256 amount) internal pure returns(uint256){\n', '        return amount * 400000;\n', '    }\n', '    \n', "    /** ERC20Interface function's implementation **/\n", '    \n', '    function totalSupply() public override view returns (uint256){\n', '       return _totalSupply; \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public override returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        uint256 burn_value = 0;\n', '        if (totalSupply().sub(tokens) > 100e6 * 10 ** (decimals)){\n', '            burn_value = onePercent(tokens).mul(6);\n', '            _burn(burn_value);\n', '        }\n', '            \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens.sub(burn_value));\n', '        emit Transfer(msg.sender, to, tokens.sub(burn_value));\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Calculates onePercent of the uint256 amount sent\n', '    // ------------------------------------------------------------------------\n', '    function onePercent(uint256 _tokens) internal pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) public override returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        uint256 burn_value = 0;\n', '        if (totalSupply().sub(tokens) > 100e6 * 10 ** (decimals)){\n', '            burn_value = onePercent(tokens).mul(6);\n', '            _burn(burn_value);\n', '        }\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens.sub(burn_value));\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens.sub(burn_value));\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function _transfer(address to, uint256 tokens, bool purchased) internal {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[address(this)] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[address(this)] = balances[address(this)].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        if(purchased)\n', '            soldTokens = soldTokens.add(tokens);\n', '        emit Transfer(address(this),to,tokens);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(uint256 value) internal {\n', '        _totalSupply = _totalSupply.sub(value);\n', '        balances[address(0)] = balances[address(0)].add(value);\n', '        emit Transfer(address(msg.sender), address(0), value);\n', '    }\n', '}']