['pragma solidity ^0.6.6;\n', '\n', 'library Address\n', '{\n', '    function isContract(address account) internal view returns (bool)\n', '    {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal\n', '    {\n', '        require(address(this).balance >= amount, "Insufficient balance");\n', '\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory)\n', '    { return functionCall(target, data, "Low-level call failed"); }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory)\n', '    { return _functionCallWithValue(target, data, 0, errorMessage); }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory)\n', '    { return functionCallWithValue(target, data, value, "Low-level call with value failed"); }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory)\n', '    {\n', '        require(address(this).balance >= value, "Insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory)\n', '    {\n', '        require(isContract(target), "Call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        \n', '        if (success)\n', '        { return returndata; }\n', '        else\n', '        {\n', '            if (returndata.length > 0)\n', '            {\n', '                assembly\n', '                {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            }\n', '            else\n', '            { revert(errorMessage); }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath\n', '{\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        require(c >= a, "Addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    { return sub(a, b, "Subtraction overflow"); }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '    {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        if (a == 0)\n', '        { return 0; }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "Multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '    { return div(a, b, "Division by zero"); }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '    {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256)\n', '    { return mod(a, b, "Modulo by zero"); }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\n', '    {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract Context\n', '{\n', '    function _msgSender() internal view virtual returns (address payable)\n', '    { return msg.sender; }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory)\n', '    {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20\n', '{\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is Context, IERC20\n', '{\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    uint256 private _totalSupply;\n', '\n', '    constructor () public\n', '    {\n', '        _name = "Spider.Exchange";\n', '        _symbol = "SPDR";\n', '        _decimals = 18;\n', '        _totalSupply = 50000000000000000000000; // \n', '        _balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function name() public view returns (string memory)\n', '    { return _name; }\n', '\n', '    function symbol() public view returns (string memory)\n', '    { return _symbol; }\n', '\n', '    function decimals() public view returns (uint8)\n', '    { return _decimals; }\n', '\n', '    function totalSupply() public view override returns (uint256)\n', '    { return _totalSupply; }\n', '\n', '    function balanceOf(address account) public view override returns (uint256)\n', '    { return _balances[account]; }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256)\n', '    {  return _allowances[owner][spender]; }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool)\n', '    {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "Transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "Decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual\n', '    {\n', '        require(sender != address(0), "Transfer from the zero address");\n', '        require(recipient != address(0), "Transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "Transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual\n', '    {\n', '        require(owner != address(0), "Approve from the zero address");\n', '        require(spender != address(0), "Approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']