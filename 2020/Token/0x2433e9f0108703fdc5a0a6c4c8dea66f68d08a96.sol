['pragma solidity ^0.5.0;\n', '/*\n', '\n', 'website: rrs.world\n', 'dev:  bitcv\n', '\n', '*/\n', '\n', '\n', '// Standar ERC Token Interface\n', 'contract ERC20Interface {\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '   \n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function totalSupply() public view returns (uint);\n', '   \n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     \n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    \n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe Math Library \n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '        uint256 c = add(a,m);\n', '        uint256 d = sub(c,1);\n', '        return mul(div(d,m),m);\n', '    }\n', '}\n', '\n', '\n', 'contract  RRSwap is ERC20Interface {\n', '    \n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; // 18 standard decimal place\n', '    \n', '    uint256 public basePercent = 400;\n', '    uint256 public _totalSupply;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    constructor() public {\n', '        name ="rrs.world";\n', '        symbol = "RRS";\n', '        decimals = 18;\n', '      _totalSupply = 50000000000000000000000;\n', '        \n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function findBurnPercent(uint256 value) public view returns (uint256)  {\n', '        uint256 roundValue = value.ceil(basePercent);\n', '        uint256 onePercent = roundValue.mul(basePercent).div(10000); // 2 percent burn \n', '        return onePercent;\n', '      }\n', '    \n', '    function transfer(address to, uint value) public returns (bool success) {\n', '        // balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        // balances[to] = safeAdd(balances[to], tokens);\n', '        // emit Transfer(msg.sender, to, tokens);\n', '        // return true;\n', '        \n', '        require(value <= balances[msg.sender]);\n', '        require(to != address(0));\n', '    \n', '        uint256 tokensToBurn = findBurnPercent(value);\n', '        uint256 tokensToTransfer = value.sub(tokensToBurn);\n', '    \n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(tokensToTransfer);\n', '    \n', '        _totalSupply = _totalSupply.sub(tokensToBurn);\n', '    \n', '        emit Transfer(msg.sender, to, tokensToTransfer);\n', '        emit Transfer(msg.sender, address(0), tokensToBurn);\n', '        return true;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    \n', '}']