['# Created by interfinex.io\n', '# - The Greeks\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', 'event Transfer:\n', '    sender: indexed(address)\n', '    receiver: indexed(address)\n', '    value: uint256\n', '\n', 'event Approval:\n', '    owner: indexed(address)\n', '    spender: indexed(address)\n', '    value: uint256\n', '\n', 'event ClaimDividends:\n', '    to: indexed(address)\n', '    value: uint256\n', '    totalDividends: uint256\n', '\n', 'event DistributeDividends:\n', '    sender: indexed(address)\n', '    value: uint256\n', '    totalDividends: uint256\n', '\n', 'name: public(String[64])\n', 'symbol: public(String[32])\n', 'decimals: public(uint256)\n', 'totalDividends: public(uint256)\n', 'totalClaimedTokenDividends: public(uint256)\n', 'totalTokenDividends: public(uint256)\n', 'dividend_token: public(address)\n', 'withdraw_address: public(address)\n', '\n', 'balanceOf: public(HashMap[address, uint256])\n', 'allowances: HashMap[address, HashMap[address, uint256]]\n', 'total_supply: public(uint256)\n', 'minter: public(address)\n', 'mintable: public(bool)\n', '\n', 'POINT_MULTIPLIER: constant(uint256) = 10 ** 24\n', '\n', 'lastDividends: public(HashMap[address, uint256])\n', '\n', '@external\n', 'def initializeERC20(\n', '    _name: String[64], \n', '    _symbol: String[32], \n', '    _decimals: uint256, \n', '    _supply: uint256, \n', '    _dividend_token: address,\n', '    _mintable: bool\n', '):\n', '    assert self.minter == ZERO_ADDRESS, "Cannot initialize contract more than once"\n', '    init_supply: uint256 = _supply * 10 ** _decimals\n', '    self.name = _name\n', '    self.symbol = _symbol\n', '    self.decimals = _decimals\n', '    self.balanceOf[msg.sender] = init_supply\n', '    self.total_supply = init_supply\n', '    self.minter = msg.sender\n', '    self.mintable = _mintable\n', '    self.dividend_token = _dividend_token\n', '    ERC20(self.dividend_token).approve(self, MAX_UINT256)\n', '    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)\n', '\n', '@view\n', '@external\n', 'def totalSupply() -> uint256:\n', '    """\n', '    @dev Total number of tokens in existence.\n', '    """\n', '    return self.total_supply\n', '\n', '@view\n', '@external\n', 'def allowance(_owner : address, _spender : address) -> uint256:\n', '    """\n', '    @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    @param _owner The address which owns the funds.\n', '    @param _spender The address which will spend the funds.\n', '    @return An uint256 specifying the amount of tokens still available for the spender.\n', '    """\n', '    return self.allowances[_owner][_spender]\n', '\n', '@view\n', '@internal\n', 'def _dividendsOf(_owner: address) -> uint256:\n', '    return (self.totalDividends - self.lastDividends[_owner]) * self.balanceOf[_owner] / POINT_MULTIPLIER\n', '\n', '@internal\n', 'def _distributeDividends(_from: address, _value: uint256):\n', '    if _value == 0:\n', '        return\n', '    ERC20(self.dividend_token).transferFrom(_from, self, _value)\n', "    # Ignore whatever the contract balance is because the contract can't claim dividends\n", '    self.totalDividends += _value * POINT_MULTIPLIER / (self.total_supply - self.balanceOf[self])\n', '    self.totalTokenDividends += _value\n', '    log DistributeDividends(_from, _value, self.totalDividends)\n', '\n', '@external\n', 'def distributeDividends(_value: uint256):\n', '    self._distributeDividends(msg.sender, _value)\n', '\n', '@internal\n', 'def _distributeExcessBalance():\n', '    """\n', "    @dev    Withdraw excess tokens in the contract. It's possible that excess tokens, \n", '            via dividends or some other means, will accrue in the contract. This provides\n', '            an escape hatch for those funds.\n', '    """\n', '    excess_balance: uint256 = ERC20(self.dividend_token).balanceOf(self) - (self.totalTokenDividends - self.totalClaimedTokenDividends)\n', '    self._distributeDividends(self, excess_balance)\n', '\n', '@view\n', '@external\n', 'def getExcessBalance() -> uint256:\n', '    return ERC20(self.dividend_token).balanceOf(self) - (self.totalTokenDividends - self.totalClaimedTokenDividends)\n', '    \n', '@view\n', '@external\n', 'def dividendsOf(_owner: address) -> uint256:\n', '    return self._dividendsOf(_owner)\n', '\n', '@internal\n', 'def _claimDividends(_to: address):\n', '    if _to == self:\n', '        return\n', '    self._distributeExcessBalance()\n', '    dividends: uint256 = self._dividendsOf(_to)\n', '    self.lastDividends[_to] = self.totalDividends   \n', '    if dividends != 0: # Avoids infinite loop\n', '        ERC20(self.dividend_token).transfer(_to, dividends)\n', '        self.totalClaimedTokenDividends += dividends\n', '        log ClaimDividends(_to, dividends, self.totalDividends)\n', '\n', '@external\n', 'def claimDividends():\n', '    self._claimDividends(msg.sender)\n', '\n', '@external\n', 'def transfer(_to : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Transfer token for a specified address\n', '    @param _to The address to transfer to.\n', '    @param _value The amount to be transferred.\n', '    """\n', '    self._claimDividends(msg.sender)\n', '    self._claimDividends(_to)\n', '    self.balanceOf[msg.sender] -= _value\n', '    self.balanceOf[_to] += _value\n', '    log Transfer(msg.sender, _to, _value)\n', '    return True\n', '\n', '@external\n', 'def transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n', '    """\n', '     @dev Transfer tokens from one address to another.\n', '     @param _from address The address which you want to send tokens from\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amount of tokens to be transferred\n', '    """\n', '    self._claimDividends(_from)\n', '    self._claimDividends(_to)\n', '    self._claimDividends(msg.sender)\n', '    self.balanceOf[_from] -= _value\n', '    self.balanceOf[_to] += _value\n', '    self.allowances[_from][msg.sender] -= _value\n', '    log Transfer(_from, _to, _value)\n', '    return True\n', '\n', '@external\n', 'def approve(_spender : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '         Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    @param _spender The address which will spend the funds.\n', '    @param _value The amount of tokens to be spent.\n', '    """\n', '    self.allowances[msg.sender][_spender] = _value\n', '    log Approval(msg.sender, _spender, _value)\n', '    return True\n', '\n', '@external\n', 'def mint(_to: address, _value: uint256):\n', '    """\n', '    @dev Mint an amount of the token and assigns it to an account.\n', '         This encapsulates the modification of balances such that the\n', '         proper events are emitted.\n', '    @param _to The account that will receive the created tokens.\n', '    @param _value The amount that will be created.\n', '    """\n', '    assert self.mintable == True\n', '    assert msg.sender == self.minter\n', '    assert _to != ZERO_ADDRESS\n', '    self._claimDividends(_to)\n', '    self.total_supply += _value\n', '    self.balanceOf[_to] += _value\n', '    log Transfer(ZERO_ADDRESS, _to, _value)\n', '\n', '\n', '@internal\n', 'def _burn(_to: address, _value: uint256):\n', '    """\n', '    @dev Internal function that burns an amount of the token of a given\n', '         account.\n', '    @param _to The account whose tokens will be burned.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    assert _to != ZERO_ADDRESS\n', '    self._claimDividends(_to)\n', '    self.total_supply -= _value\n', '    self.balanceOf[_to] -= _value\n', '    log Transfer(_to, ZERO_ADDRESS, _value)\n', '\n', '\n', '@external\n', 'def burn(_value: uint256):\n', '    """\n', '    @dev Burn an amount of the token of msg.sender.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    self._burn(msg.sender, _value)\n', '\n', '\n', '@external\n', 'def burnFrom(_to: address, _value: uint256):\n', '    """\n', '    @dev Burn an amount of the token from a given account.\n', '    @param _to The account whose tokens will be burned.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    self._claimDividends(msg.sender)\n', '    self.allowances[_to][msg.sender] -= _value\n', '    self._burn(_to, _value)']