['pragma solidity 0.5.11;\n', '\n', '/**\n', ' * @title OUSD Token Contract\n', ' * @notice ERC20 compatible contract for OUSD\n', ' * @dev Implements an elastic supply\n', ' * @author Origin Protocol Inc\n', ' */\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', 'contract Governable {\n', '    // Storage position of the owner and pendingOwner of the contract\n', '    bytes32\n', '        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\n', '    //keccak256("OUSD.governor");\n', '\n', '    bytes32\n', '        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\n', '    //keccak256("OUSD.pending.governor");\n', '\n', '    event PendingGovernorshipTransfer(\n', '        address indexed previousGovernor,\n', '        address indexed newGovernor\n', '    );\n', '\n', '    event GovernorshipTransferred(\n', '        address indexed previousGovernor,\n', '        address indexed newGovernor\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial Governor.\n', '     */\n', '    constructor() internal {\n', '        _setGovernor(msg.sender);\n', '        emit GovernorshipTransferred(address(0), _governor());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current Governor.\n', '     */\n', '    function governor() public view returns (address) {\n', '        return _governor();\n', '    }\n', '\n', '    function _governor() internal view returns (address governorOut) {\n', '        bytes32 position = governorPosition;\n', '        assembly {\n', '            governorOut := sload(position)\n', '        }\n', '    }\n', '\n', '    function _pendingGovernor()\n', '        internal\n', '        view\n', '        returns (address pendingGovernor)\n', '    {\n', '        bytes32 position = pendingGovernorPosition;\n', '        assembly {\n', '            pendingGovernor := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(isGovernor(), "Caller is not the Governor");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current Governor.\n', '     */\n', '    function isGovernor() public view returns (bool) {\n', '        return msg.sender == _governor();\n', '    }\n', '\n', '    function _setGovernor(address newGovernor) internal {\n', '        bytes32 position = governorPosition;\n', '        assembly {\n', '            sstore(position, newGovernor)\n', '        }\n', '    }\n', '\n', '    function _setPendingGovernor(address newGovernor) internal {\n', '        bytes32 position = pendingGovernorPosition;\n', '        assembly {\n', '            sstore(position, newGovernor)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\n', '     * Can only be called by the current Governor. Must be claimed for this to complete\n', '     * @param _newGovernor Address of the new Governor\n', '     */\n', '    function transferGovernance(address _newGovernor) external onlyGovernor {\n', '        _setPendingGovernor(_newGovernor);\n', '        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim Governance of the contract to a new account (`newGovernor`).\n', '     * Can only be called by the new Governor.\n', '     */\n', '    function claimGovernance() external {\n', '        require(\n', '            msg.sender == _pendingGovernor(),\n', '            "Only the pending Governor can complete the claim"\n', '        );\n', '        _changeGovernor(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Change Governance of the contract to a new account (`newGovernor`).\n', '     * @param _newGovernor Address of the new Governor\n', '     */\n', '    function _changeGovernor(address _newGovernor) internal {\n', '        require(_newGovernor != address(0), "New Governor is address(0)");\n', '        emit GovernorshipTransferred(_governor(), _newGovernor);\n', '        _setGovernor(_newGovernor);\n', '    }\n', '}\n', '\n', 'contract InitializableERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     * @notice To avoid variable shadowing appended `Arg` after arguments name.\n', '     */\n', '    function _initialize(\n', '        string memory nameArg,\n', '        string memory symbolArg,\n', '        uint8 decimalsArg\n', '    ) internal {\n', '        _name = nameArg;\n', '        _symbol = symbolArg;\n', '        _decimals = decimalsArg;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'contract InitializableToken is ERC20, InitializableERC20Detailed {\n', '    /**\n', '     * @dev Initialization function for implementing contract\n', '     * @notice To avoid variable shadowing appended `Arg` after arguments name.\n', '     */\n', '    function _initialize(string memory _nameArg, string memory _symbolArg)\n', '        internal\n', '    {\n', '        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\n', '    }\n', '}\n', '\n', 'contract OUSD is Initializable, InitializableToken, Governable {\n', '    using SafeMath for uint256;\n', '    using StableMath for uint256;\n', '\n', '    event TotalSupplyUpdated(\n', '        uint256 totalSupply,\n', '        uint256 totalCredits,\n', '        uint256 creditsPerToken\n', '    );\n', '\n', '    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private totalCredits;\n', '    // Exchange rate between internal credits and OUSD\n', '    uint256 private creditsPerToken;\n', '\n', '    mapping(address => uint256) private _creditBalances;\n', '\n', '    // Allowances denominated in OUSD\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    address public vaultAddress = address(0);\n', '\n', '    function initialize(\n', '        string calldata _nameArg,\n', '        string calldata _symbolArg,\n', '        address _vaultAddress\n', '    ) external onlyGovernor initializer {\n', '        InitializableToken._initialize(_nameArg, _symbolArg);\n', '\n', '        _totalSupply = 0;\n', '        totalCredits = 0;\n', '        creditsPerToken = 1e18;\n', '\n', '        vaultAddress = _vaultAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Verifies that the caller is the Savings Manager contract\n', '     */\n', '    modifier onlyVault() {\n', '        require(vaultAddress == msg.sender, "Caller is not the Vault");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return The total supply of OUSD.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _account The address to query the balance of.\n', '     * @return A unit256 representing the _amount of base units owned by the\n', '     *         specified address.\n', '     */\n', '    function balanceOf(address _account) public view returns (uint256) {\n', '        if (creditsPerToken == 0) return 0;\n', '        return _creditBalances[_account].divPrecisely(creditsPerToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the credits balance of the specified address.\n', '     * @param _account The address to query the balance of.\n', '     * @return A uint256 representing the _amount of base units owned by the\n', '     *         specified address.\n', '     */\n', '    function creditsBalanceOf(address _account) public view returns (uint256) {\n', '        return _creditBalances[_account];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param _to the address to transfer to.\n', '     * @param _value the _amount to be transferred.\n', '     * @return true on success.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        uint256 creditValue = _removeCredits(msg.sender, _value);\n', '        _creditBalances[_to] = _creditBalances[_to].add(creditValue);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param _from The address you want to send tokens from.\n', '     * @param _to The address you want to transfer to.\n', '     * @param _value The _amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool) {\n', '        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\n', '            _value\n', '        );\n', '\n', '        uint256 creditValue = _removeCredits(_from, _value);\n', '        _creditBalances[_to] = _creditBalances[_to].add(creditValue);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the _amount of tokens that an owner has allowed to a _spender.\n', '     * @param _owner The address which owns the funds.\n', '     * @param _spender The address which will spend the funds.\n', '     * @return The number of tokens still available for the _spender.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified _amount of tokens on behalf of\n', '     * msg.sender. This method is included for ERC20 compatibility.\n', '     * increaseAllowance and decreaseAllowance should be used instead.\n', '     * Changing an allowance with this method brings the risk that someone may transfer both\n', '     * the old and the new allowance - if they are both greater than zero - if a transfer\n', '     * transaction is mined before the later approve() call is mined.\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The _amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        _allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the _amount of tokens that an owner has allowed to a _spender.\n', '     * This method should be used instead of approve() to avoid the double approval vulnerability\n', '     * described above.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The _amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address _spender, uint256 _addedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\n', '            .add(_addedValue);\n', '        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the _amount of tokens that an owner has allowed to a _spender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The _amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address _spender, uint256 _subtractedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = _allowances[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            _allowances[msg.sender][_spender] = 0;\n', '        } else {\n', '            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Mints new tokens, increasing totalSupply.\n', '     */\n', '    function mint(address _account, uint256 _amount) external onlyVault {\n', '        return _mint(_account, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address _account, uint256 _amount) internal {\n', '        require(_account != address(0), "Mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(_amount);\n', '\n', '        uint256 creditAmount = _amount.mulTruncate(creditsPerToken);\n', '        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\n', '        totalCredits = totalCredits.add(creditAmount);\n', '\n', '        emit Transfer(address(0), _account, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Burns tokens, decreasing totalSupply.\n', '     */\n', '    function burn(address account, uint256 amount) external onlyVault {\n', '        return _burn(account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `_amount` tokens from `_account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `_account` cannot be the zero address.\n', '     * - `_account` must have at least `_amount` tokens.\n', '     */\n', '    function _burn(address _account, uint256 _amount) internal {\n', '        require(_account != address(0), "Burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        uint256 creditAmount = _removeCredits(_account, _amount);\n', '        totalCredits = totalCredits.sub(creditAmount);\n', '\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes credits from a credit balance and burns rounding errors.\n', '     * @param _account Account to remove credits from\n', '     * @param _amount Amount in OUSD which will be converted to credits and\n', '     *                removed\n', '     */\n', '    function _removeCredits(address _account, uint256 _amount)\n', '        internal\n', '        returns (uint256 creditAmount)\n', '    {\n', '        creditAmount = _amount.mulTruncate(creditsPerToken);\n', '        uint256 currentCredits = _creditBalances[_account];\n', '        if (\n', '            currentCredits == creditAmount || currentCredits - 1 == creditAmount\n', '        ) {\n', '            _creditBalances[_account] = 0;\n', '        } else if (currentCredits > creditAmount) {\n', '            _creditBalances[_account] = currentCredits - creditAmount;\n', '        } else {\n', '            revert("Remove exceeds balance");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Modify the supply without minting new tokens. This uses a change in\n', '     *      the exchange rate between "credits" and OUSD tokens to change balances.\n', '     * @param _newTotalSupply New total supply of OUSD.\n', '     * @return uint256 representing the new total supply.\n', '     */\n', '    function changeSupply(uint256 _newTotalSupply)\n', '        external\n', '        onlyVault\n', '        returns (uint256)\n', '    {\n', '        require(_totalSupply > 0, "Cannot increase 0 supply");\n', '\n', '        if (_totalSupply == _newTotalSupply) {\n', '            emit TotalSupplyUpdated(\n', '                _totalSupply,\n', '                totalCredits,\n', '                creditsPerToken\n', '            );\n', '            return _totalSupply;\n', '        }\n', '\n', '        _totalSupply = _newTotalSupply;\n', '\n', '        if (_totalSupply > MAX_SUPPLY) _totalSupply = MAX_SUPPLY;\n', '\n', '        creditsPerToken = totalCredits.divPrecisely(_totalSupply);\n', '\n', '        emit TotalSupplyUpdated(_totalSupply, totalCredits, creditsPerToken);\n', '        return _totalSupply;\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /***************************************\n', '                    Helpers\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Adjust the scale of an integer\n', '     * @param adjustment Amount to adjust by e.g. scaleBy(1e18, -1) == 1e17\n', '     */\n', '    function scaleBy(uint256 x, int8 adjustment)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        if (adjustment > 0) {\n', '            x = x.mul(10**uint256(adjustment));\n', '        } else if (adjustment < 0) {\n', '            x = x.div(10**uint256(adjustment * -1));\n', '        }\n', '        return x;\n', '    }\n', '\n', '    /***************************************\n', '               Precise Arithmetic\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x Left hand input to multiplication\n', '     * @param y Right hand input to multiplication\n', '     * @return Result after multiplying the two inputs and then dividing by the shared\n', '     *         scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x Left hand input to multiplication\n', '     * @param y Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return Result after multiplying the two inputs and then dividing by the shared\n', '     *         scale unit\n', '     */\n', '    function mulTruncateScale(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 scale\n', '    ) internal pure returns (uint256) {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        uint256 z = x.mul(y);\n', '        // return 9e38 / 1e18 = 9e18\n', '        return z.div(scale);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x Left hand input to multiplication\n', '     * @param y Right hand input to multiplication\n', '     * @return Result after multiplying the two inputs and then dividing by the shared\n', '     *          scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x.mul(y);\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil.div(FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x Left hand input to division\n', '     * @param y Right hand input to division\n', '     * @return Result after multiplying the left operand by the scale, and\n', '     *         executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        uint256 z = x.mul(FULL_SCALE);\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return z.div(y);\n', '    }\n', '}']