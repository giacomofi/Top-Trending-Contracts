['pragma solidity ^0.4.24;\n', '\n', 'contract EIP20Interface{\n', '    //获取_owner地址的余额\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    //转账:从自己账户向_to地址转入_value个Token\n', '    function transfer(address _to, uint256 _value)public returns (bool success);\n', '    //转账:从_from向_to转_value个Token\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    //允许_spender从自己(调用方)账户转走_value个Token\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    //自己_owner查询__spender地址可以转走自己多少个Token\n', '    function allowance(address _owner, address _spender) view returns (uint256 remaining);\n', '    //转账的时候必须要调用的时间，比如Tranfer,TransferFrom\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    //成功执行approve方法后调用的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract YJCToken is EIP20Interface {\n', '    //1.获取token名字，比如"YaJing Coin"\n', '    string public name;\n', '     //2.获取Token简称,比如"YJC"\n', '    string public symbol;\n', '    //3.获取小数位，比如以太坊的decimals为18\n', '    uint8 public decimals;\n', '     //4.获取token发布的总量，比如HT 5亿\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address=>uint256) balances ;\n', '    mapping(address=>mapping(address=>uint256)) allowances;\n', '    function YJCToken(string _name,string _symbol, uint8 _decimals,uint256 _totalSupply) public{       \n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    totalSupply = _totalSupply;\n', '    balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    //获取_owner地址的余额\n', '    function balanceOf(address _owner) public view returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '    //转账:从自己账户向_to地址转入_value个Token\n', '    function transfer(address _to, uint256 _value)public  returns (bool success){\n', '        require(_value >0 && balances[_to] + _value > balances[_to] && balances[msg.sender] > _value);\n', '        balances[_to] += _value;\n', '        balances[msg.sender] -= _value;\n', '        Transfer(msg.sender, _to,_value);\n', '\n', '        return true;\n', '    }\n', '\n', '    //转账:从_from向_to转_value个Token\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '        uint256 allowan = allowances[_from][_to];\n', '        require(allowan > _value && balances[_from] >= _value && _to == msg.sender && balances[_to] + _value>balances[_to]);\n', '        allowances[_from][_to] -= _value;\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(_from,_to,_value);\n', '        return true;\n', '    }\n', '    //允许_spender从自己(调用方)账户转走_value个Token\n', '    function approve(address _spender, uint256 _value) returns (bool success){\n', '        require(_value >0 && balances[msg.sender] > _value);\n', '        allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender,_spender,_value);\n', '                return true;\n', '    }\n', '    //自己_owner查询_spender地址可以转走自己多少个Token\n', '    function allowance(address _owner, address _spender) view returns (uint256 remaining){\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '}']