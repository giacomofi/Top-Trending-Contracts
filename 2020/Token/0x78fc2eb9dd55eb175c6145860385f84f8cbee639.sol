['pragma solidity 0.6.12;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'abstract contract LamdenTau  {\n', '    function transferFrom(address _from, address _to, uint256 _value) external virtual returns (bool);\n', '    function transfer(address recipient, uint256 amount) external virtual returns (bool);\n', '    function balanceOf(address account) external virtual view returns (uint256);\n', '\n', '}\n', '\n', 'contract TAUSwap is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    LamdenTau tau = LamdenTau(0xc27A2F05fa577a83BA0fDb4c38443c0718356501);\n', '    mapping(address => uint256) swappedBalances;\n', '\n', '    event Swap(address sender, string receiver, uint256 value);\n', '\n', '    function swap(string memory mainnetAddress, uint256 amount) public {\n', '        tau.transferFrom(msg.sender, address(this), amount);\n', '\n', '        swappedBalances[msg.sender] = swappedBalances[msg.sender].add(amount);\n', '\n', '        emit Swap(msg.sender, mainnetAddress, amount);\n', '    }\n', '\n', '    function sweep(address owner, uint256 amount) public onlyOwner {\n', '        if (amount == 0) {\n', '            amount = swappedBalances[owner];\n', '        }\n', '\n', '        swappedBalances[owner] = swappedBalances[owner].sub(amount);\n', '        tau.transfer(address(0x0), amount);\n', '    }\n', '\n', '    function tauRevert(address owner, uint256 amount) public onlyOwner {\n', '        swappedBalances[owner] = swappedBalances[owner].sub(amount);\n', '        tau.transfer(owner, amount);\n', '    }\n', '}']