['pragma solidity ^0.5.13;\n', '\n', '\n', '//* @dev Implementation of the basic standard token.\n', '//* @dev https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', "// 'DGF' 'DGF Bank' token contract\n", '//\n', '// Symbol      : DGF\n', '// Deployed to : // TODO: update contract to address generated\n', '// Name        : Digital Future Bank Token\n', '// Total supply: 1,000,000,000.000000000000000000\n', '// Decimals    : 18\n', '//\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    assert(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    assert(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '\n', '  address payable public owner;\n', '  address payable public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    assert(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address payable _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', 'contract DGFToken is ERC20Interface, Owned {\n', '\n', '  using SafeMath for uint;\n', '\n', '  bytes32 public symbol;\n', '  bytes32 public  name;\n', '  uint8 public decimals;\n', '  uint _totalSupply;\n', '\n', '  // pre-sale bonus\n', '  uint public startDate;\n', '  uint public bonusEnds;\n', '  uint public endDate;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Constructor\n', '  // ------------------------------------------------------------------------\n', '  constructor() public {\n', '    symbol = "DGF";\n', '    name = "Digital Future Bank Token";\n', '    decimals = 18;\n', '    _totalSupply = 1000000000 * 10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Total supply\n', '  // ------------------------------------------------------------------------\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function () external payable {\n', '    assert(now >= startDate && now <= endDate);\n', '    uint tokens;\n', '    if (now <= bonusEnds) \n', '    balances[msg.sender] = SafeMath.add(balances[msg.sender], tokens);\n', '    _totalSupply = SafeMath.add(_totalSupply, tokens);\n', '    // sent to investor\n', '    emit Transfer(address(0), msg.sender, tokens);\n', '    // sent ETH to owner\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '}']