['/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'abstract contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '}\n', '\n', 'contract Token is Ownable, ERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    event Staked(\n', '        address lpToken,\n', '        address user,\n', '        uint256 amount\n', '    );\n', '    \n', '    event Unstaked(\n', '        address user,\n', '        address lpToken,\n', '        uint256 amount\n', '    );\n', '    \n', '    event RewardWithdrawn(\n', '        address user,\n', '        uint256 amount\n', '    );\n', '    \n', '    uint256 private constant rewardMultiplier = 1e17;\n', '    \n', '    struct Stake {\n', '        mapping(address => uint256) lpToStakeAmount; // lp token address to token amount\n', '        uint256 totalStakedAmountByUser; // sum of all lp tokens\n', '        uint256 lastInteractionBlockNumber; // block number at last withdraw\n', '        address[] lpTokens; // list of all lps\n', '    }\n', '    \n', '    mapping(address => Stake) public userToStakes; // user to stake\n', '    uint256 public totalStakedAmount; // sum of stakes by all of the users across all lp\n', '    IUniswapV2Factory public uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '    \n', '    struct TokenStake {\n', '        uint256 amount;\n', '        uint256 lastInteractionTimestamp;\n', '        uint256 stakingPeriodEndTime;\n', '        uint256 rate;\n', '    }\n', '    \n', '    mapping(address => TokenStake) public userToTokenStakes; // user to test token stake\n', '    \n', '    struct Lockup {\n', '        uint256 duration; // duration in seconds\n', '        uint256 rate; // reward rate\n', '    }\n', '    Lockup[8] public lockupPeriods;\n', '    \n', '    IERC20 public swapToken = IERC20(0xEEd2B7756E295A9300e53dD049AeB0751899BAe3);\n', '    uint256 public swapTokenDecimals = 18;\n', '    address public swapTreasury = 0x4eFfA0933a1099b8F95E34964c36Dfd9b7B1A49a;\n', '    \n', '    uint256 public totalTokensStakedAmount;\n', '    \n', '    uint256 public blockMiningTime = 15;\n', '    uint256 public constant MAX_SUPPLY = 6000000 * 10 ** 18;\n', '    \n', '    constructor() public ERC20("TokenBot", "TKB", 18) {\n', '        // _mint(_msgSender(), 1000 * 10 ** 18); // for testing\n', '        // lockupPeriods[0] = Lockup(200, 1e15); for testing\n', '        lockupPeriods[0] = Lockup(604800, 1e15);\n', '        lockupPeriods[1] = Lockup(2592000, 4e15);\n', '        lockupPeriods[2] = Lockup(5184000, 8e15);\n', '        lockupPeriods[3] = Lockup(7776000, 12e15);\n', '        lockupPeriods[4] = Lockup(15552000, 24e15);\n', '        lockupPeriods[5] = Lockup(31104000, 48e15);\n', '        lockupPeriods[6] = Lockup(63113904, 96e15);\n', '        lockupPeriods[7] = Lockup(126227808, 192e15);\n', '    }\n', '    \n', '    function changeBlockMiningTime(uint256 newTime) external onlyOwner {\n', '        require(\n', '            newTime != 0,\n', '            "new time cannot be zero"\n', '        );\n', '        blockMiningTime = newTime;\n', '    }\n', '    \n', '    function swapAndStakeDOG(\n', '        uint256 swapTokenAmount\n', '    ) external {\n', '        require(\n', '            swapTokenAmount != 0,\n', '            "swapTokenAmount should be greater than 0"\n', '        );\n', '        \n', '        require(\n', '            swapToken.transferFrom(_msgSender(), swapTreasury, swapTokenAmount),\n', '            "#transferFrom failed"\n', '        );\n', '        \n', '        uint256 tokensReceived = swapTokenAmount.mul(10 ** uint256(decimals()))\n', '            .div(250 * 10 ** swapTokenDecimals);\n', '        _mint(_msgSender(), tokensReceived);\n', '        \n', '        stakeTKB(tokensReceived, 0);\n', '    }\n', '    \n', '    function stakeTKB(\n', '        uint256 stakeAmount,\n', '        uint256 lockUpPeriodIdx // 0 - 7 - is represented by index of `lockupPeriods` array.\n', '    ) public {\n', '        require(\n', '            stakeAmount != 0,\n', '            "stakeAmount should be greater than 0"\n', '        );\n', '        \n', '        require(\n', '            lockUpPeriodIdx <= 7,\n', '            "lock lockUpPeriodIdx should be between 0 and 7"\n', '        );\n', '        \n', '        TokenStake storage currentStake = userToTokenStakes[_msgSender()];\n', '        require(\n', '            currentStake.amount == 0,\n', '            "address has already staked"\n', '        );\n', '        \n', '        currentStake.amount = stakeAmount;\n', '        \n', '        currentStake.stakingPeriodEndTime = block.timestamp.add(\n', '            lockupPeriods[lockUpPeriodIdx].duration\n', '        );\n', '        \n', '        currentStake.rate = lockupPeriods[lockUpPeriodIdx].rate;\n', '        \n', '        currentStake.lastInteractionTimestamp = block.timestamp;\n', '        totalTokensStakedAmount = totalTokensStakedAmount.add(stakeAmount);\n', '        \n', '        _transfer(_msgSender(), address(this), stakeAmount);\n', '        \n', '        emit Staked(\n', '            address(this),\n', '            msg.sender,\n', '            stakeAmount\n', '        );\n', '    }\n', '    \n', '    function unstakeTKB() external {\n', '        uint256 amountToUnstake = userToTokenStakes[_msgSender()].amount;\n', '        bool executeUnstaking;\n', '        \n', '        if (amountToUnstake != 0) {\n', '            if (userToTokenStakes[_msgSender()].stakingPeriodEndTime <= block.timestamp) {\n', '                executeUnstaking = true;\n', '            }\n', '            \n', '            if (totalSupply() == MAX_SUPPLY) {\n', '                executeUnstaking = true;\n', '            }\n', '        }\n', '        require(\n', '            executeUnstaking,\n', '            "cannot unstake"\n', '        );\n', '        _withdrawRewardTKB(_msgSender());\n', '        totalTokensStakedAmount = totalTokensStakedAmount.sub(amountToUnstake);\n', '        delete userToTokenStakes[_msgSender()];\n', '        _transfer(address(this), _msgSender(), amountToUnstake);\n', '\n', '        emit Unstaked(address(this), _msgSender(), amountToUnstake);\n', '    }    \n', '        \n', '    function withdrawRewardTKB() external {\n', '        _withdrawRewardTKB(_msgSender());\n', '    }\n', '    \n', '    function getTKBRewardByAddress(address user) public view returns(uint256) {\n', '        TokenStake storage currentStake = userToTokenStakes[user];\n', '        \n', '        uint256 secondsElapsed;\n', '        if (block.timestamp > currentStake.stakingPeriodEndTime) {\n', '            if (currentStake.stakingPeriodEndTime < currentStake.lastInteractionTimestamp) {\n', '                return 0;\n', '            }\n', '            secondsElapsed = currentStake.stakingPeriodEndTime\n', '                .sub(currentStake.lastInteractionTimestamp);\n', '        } else {\n', '            secondsElapsed = block.timestamp\n', '                .sub(currentStake.lastInteractionTimestamp);   \n', '        }\n', '        \n', '        uint256 stakeAmount = currentStake.amount;\n', '        uint256 blockCountElapsed = secondsElapsed.div(blockMiningTime);\n', '        \n', '        if (blockCountElapsed == 0 || stakeAmount == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        return currentStake.rate\n', '            .mul(blockCountElapsed)\n', '            .mul(stakeAmount)\n', '            .div(totalTokensStakedAmount);\n', '    }\n', '    \n', '    function _withdrawRewardTKB(address user) internal {\n', '        uint256 rewardAmount = getTKBRewardByAddress(user);\n', '        if (rewardAmount != 0) {\n', '            _mint(_msgSender(), rewardAmount);\n', '            emit RewardWithdrawn(user, rewardAmount);\n', '        }\n', '        userToTokenStakes[_msgSender()].lastInteractionTimestamp = block.timestamp;\n', '    }\n', '    \n', '    function stakeLP(\n', '        uint256 stakeAmount\n', '    ) external {\n', '        require(\n', '            stakeAmount != 0,\n', '            "stakeAmount should be greater than 0"\n', '        );\n', '        \n', '        // only for testing, should be removed.\n', '        // address lpToken = tokenA;\n', '\n', '        address lpToken = uniswapFactory.getPair(\n', '            address(this),\n', '            0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '        );\n', '        \n', '        _withdrawRewardLP(_msgSender());\n', '        \n', '        totalStakedAmount = totalStakedAmount.add(stakeAmount); // add stake amount to sum of all stakes across al lps\n', '        \n', '        Stake storage currentStake = userToStakes[_msgSender()];\n', '        uint256 oldStakeAmountByLP = currentStake.lpToStakeAmount[lpToken];\n', '        \n', '        if (oldStakeAmountByLP == 0) {\n', '            currentStake.lpTokens.push(lpToken);\n', '        }\n', '        \n', '        currentStake.lpToStakeAmount[lpToken] = oldStakeAmountByLP // add stake amount by lp\n', '            .add(stakeAmount);\n', '        \n', '        currentStake.totalStakedAmountByUser = currentStake.totalStakedAmountByUser // add stake amount to sum of all stakes by user\n', '            .add(stakeAmount);\n', '        \n', '        require(\n', '            IERC20(lpToken).transferFrom(_msgSender(), address(this), stakeAmount), // get the tokens from user to the contract\n', '            "#transferFrom failed"\n', '        );\n', '        \n', '        emit Staked(\n', '            lpToken,\n', '            msg.sender,\n', '            stakeAmount\n', '        );\n', '    }\n', '    \n', '    function unstakeLP(\n', '        address[] calldata lpTokens    \n', '    ) external {\n', '        _withdrawRewardLP(_msgSender());\n', '        Stake storage currentStake = userToStakes[_msgSender()];\n', '        address[] storage tokens = currentStake.lpTokens; \n', '        uint256 stakeAmountToDeduct;\n', '        \n', '        // unstake user for lp tokens provided in the array\n', '        for (uint256 i; i < lpTokens.length; i++) {\n', '            uint256 stakeAmount = currentStake.lpToStakeAmount[\n', '                lpTokens[i]\n', '            ];\n', '            \n', '            if (stakeAmount == 0) {\n', '                revert("unstaking an invalid LP token");\n', '            }\n', '            \n', '            delete currentStake.lpToStakeAmount[\n', '                lpTokens[i]\n', '            ];\n', '            \n', '            currentStake.totalStakedAmountByUser = currentStake.totalStakedAmountByUser\n', '                .sub(stakeAmount);\n', '            \n', '            stakeAmountToDeduct = stakeAmountToDeduct.add(stakeAmount);\n', '            \n', '            for (uint256 p; p < tokens.length; p++) {\n', '                if (lpTokens[i] == tokens[p]) {\n', '                    tokens[p] = tokens[tokens.length - 1];\n', '                    tokens.pop();\n', '                }\n', '            }\n', '            \n', '            require(\n', '                IERC20(lpTokens[i]).transfer(_msgSender(), stakeAmount), // transfer staked tokens back to the user\n', '                "#transfer failed"\n', '            );\n', '            \n', '            emit Unstaked(lpTokens[i], _msgSender(), stakeAmount);\n', '        }\n', '        \n', '        totalStakedAmount = totalStakedAmount.sub(stakeAmountToDeduct); // subtract unstaked amount from total staked amount\n', '    }\n', '    \n', '    function withdrawRewardLP() external {\n', '        _withdrawRewardLP(_msgSender());\n', '    }\n', '    \n', '    function getBlockCountSinceLastIntreraction(address user) public view returns(uint256) {\n', '        uint256 lastInteractionBlockNum = userToStakes[user].lastInteractionBlockNumber;\n', '        if (lastInteractionBlockNum == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        return block.number.sub(lastInteractionBlockNum);\n', '    }\n', '    \n', '    function getTotalStakeAmountByUser(address user) public view returns(uint256) {\n', '        return userToStakes[user].totalStakedAmountByUser;\n', '    }\n', '    \n', '    function getAllLPsByUser(address user) public view returns(address[] memory) {\n', '        return userToStakes[user].lpTokens;\n', '    }\n', '    \n', '    function getStakeAmountByUserByLP(\n', '        address lp,\n', '        address user\n', '    ) public view returns(uint256) {\n', '        return userToStakes[user].lpToStakeAmount[lp];\n', '    }\n', '    \n', '    function getLPRewardByAddress(\n', '        address user\n', '    ) public view returns(uint256) {\n', '        if (totalStakedAmount == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        Stake storage currentStake = userToStakes[user];\n', '        \n', '        uint256 blockCount = block.number\n', '            .sub(currentStake.lastInteractionBlockNumber);\n', '        \n', '        uint256 totalReward = blockCount.mul(rewardMultiplier);\n', '        \n', '        return totalReward\n', '            .mul(currentStake.totalStakedAmountByUser)\n', '            .div(totalStakedAmount);\n', '    }\n', '    \n', '    function _withdrawRewardLP(address user) internal {\n', '        uint256 rewardAmount = getLPRewardByAddress(user);\n', '        \n', '        if (rewardAmount != 0) {\n', '            _mint(user, rewardAmount); // mint reward Tokens for the user\n', '            emit RewardWithdrawn(user, rewardAmount);\n', '        }\n', '        \n', '        userToStakes[user].lastInteractionBlockNumber = block.number;\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal override {\n', '        require(\n', '            totalSupply().add(amount) <= MAX_SUPPLY,\n', '            "total supply exceeds max supply"\n', '        );\n', '        super._mint(account, amount);\n', '    }\n', '}']