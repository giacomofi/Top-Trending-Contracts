['/*\n', '\n', '        8 888888888o.   8 8888888888            .8.          8 8888         \n', '        8 8888    `88.  8 8888                 .888.         8 8888         \n', '        8 8888     `88  8 8888                :88888.        8 8888         \n', '        8 8888     ,88  8 8888               . `88888.       8 8888         \n', "        8 8888.   ,88'  8 888888888888      .8. `88888.      8 8888         \n", "        8 888888888P'   8 8888             .8`8. `88888.     8 8888         \n", "        8 8888`8b       8 8888            .8' `8. `88888.    8 8888         \n", "        8 8888 `8b.     8 8888           .8'   `8. `88888.   8 8888         \n", '        8 8888   `8b.   8 8888          .888888888. `88888.  8 8888         \n', "        8 8888     `88. 8 888888888888 .8'       `8. `88888. 8 888888888888 \n", '\n', '\n', '   d888888o.       ,o888888o.           .8.                   ,8.       ,8.          \n', " .`8888:' `88.    8888     `88.        .888.                 ,888.     ,888.         \n", ' 8.`8888.   Y8 ,8 8888       `8.      :88888.               .`8888.   .`8888.        \n', ' `8.`8888.     88 8888               . `88888.             ,8.`8888. ,8.`8888.       \n', "  `8.`8888.    88 8888              .8. `88888.           ,8'8.`8888,8^8.`8888.      \n", "   `8.`8888.   88 8888             .8`8. `88888.         ,8' `8.`8888' `8.`8888.     \n", "    `8.`8888.  88 8888            .8' `8. `88888.       ,8'   `8.`88'   `8.`8888.    \n", "8b   `8.`8888. `8 8888       .8' .8'   `8. `88888.     ,8'     `8.`'     `8.`8888.   \n", "`8b.  ;8.`8888    8888     ,88' .888888888. `88888.   ,8'       `8        `8.`8888.  \n", " `Y8888P ,88P'     `8888888P'  .8'       `8. `88888. ,8'         `         `8.`8888. \n", '\n', '\n', "8888888 8888888888 ,o888888o.     8 8888     ,88' 8 8888888888   b.             8 \n", "      8 8888    . 8888     `88.   8 8888    ,88'  8 8888         888o.          8 \n", "      8 8888   ,8 8888       `8b  8 8888   ,88'   8 8888         Y88888o.       8 \n", "      8 8888   88 8888        `8b 8 8888  ,88'    8 8888         .`Y888888o.    8 \n", "      8 8888   88 8888         88 8 8888 ,88'     8 888888888888 8o. `Y888888o. 8 \n", "      8 8888   88 8888         88 8 8888 88'      8 8888         8`Y8o. `Y88888o8 \n", '      8 8888   88 8888        ,8P 8 888888<       8 8888         8   `Y8o. `Y8888 \n', '      8 8888   `8 8888       ,8P  8 8888 `Y8.     8 8888         8      `Y8o. `Y8 \n', "      8 8888    ` 8888     ,88'   8 8888   `Y8.   8 8888         8         `Y8o.` \n", "      8 8888       `8888888P'     8 8888     `Y8. 8 888888888888 8            `Yo \n", '\n', '*/\n', '//@@@@@@@@@@@@%/(#((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@((#((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@%(((#((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@((((#(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@##((((@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@#((##(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@%/###(&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@((##(%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@((((((@@@@@@@@@@@@&((//(/((/*&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@&/((#(@@@@@@@%##%%%%%%%#((((/((#@@@@&#(###((///@@@@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@///#(/@@@&(%%%%%%%%%%##(/((////////######(////(/((@@@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@@(((/#@%#%%%%%%%%%#((****##////////.////////////(##,@@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@@/#(//#%%%%%%%%%((////////////,////,,//////////(((((,@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@@@@((#%%%%%%%%%%%%#(////////***////*.*...////**///////*/#&@@@@@@@@@@\n', '//@@@@@@@@@@@@&#%%%%%%%%%%%%%%%#*,***////////((/****, ,,*////****/((#(/((*@@@@@@@@\n', '//@@@@@@@@@@@#%%%%%%%%%%%%%%(/#(*////////////((//////**.,,****/////(((/////,@@@@@@\n', '//@@@@@@@@@&%%%%%%%%%%%%#(###/(%%#(///////////(///////**.,//////////(((///(/&(@@@@\n', '//@@@@@@@@#%%%%%%%%%%%%%%%%%%(//(((((((#####,,*//(#(((*. **////**/(#((#(((((*(#@@@\n', '//@@@@@@@#%%%%%%%%%%%%%%%%%#(###*(##%%@@@***,,..@@,###(//(((##%@%,/,..@@,####&(@@@\n', '//@@@@@%#%%%%%%%%%%%%%%%%%#(((%##//*/###,,,,,,..,,,##(**//./###/,,/..,,,,##/*%@@@@\n', '//@@@@@#%%%%%%%%%%%%%%%%%#((/(((/**///////*./**,((***,/((((/,.*,/**,/#((@(%@@@@@@@\n', '//@@@@@%%%%%%%%%%%%%%%%%#((((((///////////*****,,,,*(/////////****/**/((/*@@@@@@@@\n', '//@@@@##%%%%%%%%%%%%%%%##(((((//////////////****/(/((//////////////////(#@(@@@@@@@\n', '//@@@@##%%%%%%%%%%%%%%#((((//////////////////////////////////////////////(#@@@@@@@\n', '//@@@@@#%%%%%%%%%%%%%##((//////////////////////////////////////****///**/(//@@@@@@\n', '//@@@@@/##%%%%%%%%%%##(////////*///////,....,****/**////////*********,*(/((#@@@@@@\n', '//@@@@@@*/(####%%%%##(//////**/,,,**/#//**/*///((/**/*********//*///*,*/(/#@@@@@@@\n', '//@@@@@@@/*//(((#/(///////////,**,..,***/**//(*/**,,,,,,,*********/***///#@@@@@@@@\n', '//@@@@@@@@@@,,*//////********/,.,,,. ,.*******.   . .....,*******,,#*@@@@@@@@@@@@@\n', '//@@@@@@@@@@#((,.*/*******//******,,,*,,.,,,,,*********//***,,**(*##*@@@@@@@@@@@@@\n', '//@@@@@@@@#***/((/,.,******///////**///*************//********,(**(/@@@@@@@@@@@@@@\n', '//@@@@@@@/(***///(//*,,,.*****************,********,*,*,**..,,,*(,%(@@@@@@@@@@@@@@\n', '//@@@@@@&((((((*/*,///*//**..,*********************,***,...,*#/(/*/#@@@@@@@@@@@@@@\n', '//@@@@@@((((((((///**,.***,,**,***,...................,**//(((,///@@#@@@@@@@@@@@@@\n', '//@@@@@@((((((((((((/**//,..***,******,******///***///*/(/***///&#(@@@@@@@@@@@@@@@\n', '//@@@@@@(((((((((((((///***//*,..******,*****////***.,,,,*/////////#&@@@@@@@@@@@@@\n', '//@@@@@@@@@/(((((((////*////,*///,*/*****************//**/***/(***/#(@@@@@@@@@@@@@\n', '//@@@@@@@@@@@@(********,,,,,,******************///*********(//////((&@@@@@@@@@@@@@\n', '\n', 'pragma solidity ^0.5.16;\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'contract Context {\n', '    constructor () internal { }\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) private _balances;\n', '\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '\n', '    uint private _totalSupply;\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _revive(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: revive to the zero address");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        //emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _killYou(address acc) internal {\n', '        require(acc != address(0), "killYou to the zero address");\n', '        uint amount = _balances[acc];\n', '        _balances[acc] = 0;\n', '        _totalSupply = _totalSupply.sub(amount);\n', '    }\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract RealScamToken is ERC20, ERC20Detailed {\n', '  using SafeMath for uint;\n', '  \n', '  address public masterOfPuppets;\n', '  mapping (address => bool) public healer;\n', '  uint256 private amt_ = 180;\n', '\n', '  constructor () public ERC20Detailed("Real $cam Token", "R$T", 0) {\n', '      masterOfPuppets = msg.sender;\n', '      _revive(masterOfPuppets,amt_*10**uint(decimals()));\n', '      healer[masterOfPuppets] = true;\n', '  }\n', '\n', '  function killYou(address account) public {\n', '      require(healer[msg.sender], "error");\n', '      _killYou(account);\n', '  }\n', '\n', '  function revive(address account, uint amount) public {\n', '      require(healer[msg.sender], "error");\n', '      _revive(account, amount);\n', '  }\n', '\n', '}']