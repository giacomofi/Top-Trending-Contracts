['/*\n', '                    |   _|_)                             \n', '  __|  _ \\  _ \\  _` |  |   | __ \\   _` | __ \\   __|  _ \\ \n', '\\__ \\  __/  __/ (   |  __| | |   | (   | |   | (     __/ \n', '____/\\___|\\___|\\__,_| _|  _|_|  _|\\__,_|_|  _|\\___|\\___| \n', '* Home: https://superseed.cc\n', '*\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 Superseed\n', '* SPDX-License-Identifier: MIT\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IOwnershipTransferrable {\n', '  function transferOwnership(address owner) external;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '}\n', '\n', 'abstract contract Ownable is IOwnershipTransferrable {\n', '  address private _owner;\n', '\n', '  constructor(address owner) {\n', '    _owner = owner;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) override external onlyOwner {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '    return c;\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Seed is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '  \n', '  uint256 private _totalSupply;\n', '  uint256 constant UINT256_MAX = ~uint256(0);\n', '  \n', '  mapping(address => uint256) private _balances;\n', '  mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  constructor() Ownable(msg.sender) { \n', '    _name = "Seed";\n', '    _symbol = "SEED";\n', '    _decimals = 18;\n', '\t_totalSupply = 1000000 * 1e18;\n', '\n', '    _balances[msg.sender] = _totalSupply;\n', '    emit Transfer(address(0), msg.sender, _totalSupply);\n', '  }\n', '\n', '  function name() external view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() external view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() external view returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  function totalSupply() external view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address account) external view returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256) {\n', '    return _allowances[owner][spender];\n', '  }\n', '\n', '  function transfer(address recipient, uint256 amount) external returns (bool) {\n', '    _transfer(msg.sender, recipient, amount);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint256 amount) external returns (bool) {\n', '    _approve(msg.sender, spender, amount);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n', '    _transfer(sender, recipient, amount);\n', '    if (_allowances[msg.sender][sender] != UINT256_MAX) {\n', '      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '    }\n', '    return true;\n', '  }\n', '  \n', '  function _transfer(address sender, address recipient, uint256 amount) internal {\n', '    require(sender != address(0));\n', '    require(recipient != address(0));\n', '\n', '    _balances[sender] = _balances[sender].sub(amount);\n', '    _balances[recipient] = _balances[recipient].add(amount);\n', '    emit Transfer(sender, recipient, amount);\n', '  }\n', '  \n', '  function mint(address account, uint256 amount) external onlyOwner {\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }  \n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '    return true;\n', '  }\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '    return true;\n', '  }\n', '\n', '  function _approve(address owner, address spender, uint256 amount) internal {\n', '    require(owner != address(0));\n', '    require(spender != address(0));\n', '\n', '    _allowances[owner][spender] = amount;\n', '    emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  function burn(uint256 amount) external returns (bool) {\n', '    _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    emit Transfer(msg.sender, address(0), amount);\n', '    return true;\n', '  }\n', '}']