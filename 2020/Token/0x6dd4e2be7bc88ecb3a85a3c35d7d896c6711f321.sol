['pragma solidity ^0.5.1;\n', '\n', 'contract ERC20Interface {\n', '    // 代币名称\n', '    string public name;\n', '    // 代币符号或者说简写\n', '    string public symbol;\n', '    // 代币小数点位数，代币的最小单位\n', '    uint8 public decimals;\n', '    // 代币的发行总量\n', '    uint public totalSupply;\n', '\n', '    // 实现代币交易，用于给某个地址转移代币\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    // 实现代币用户之间的交易，从一个地址转移代币到另一个地址\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    // 允许spender多次从你的账户取款，并且最多可取tokens个，主要用于某些场景下授权委托其他用户从你的账户上花费代币\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    // 查询spender允许从tokenOwner上花费的代币数量\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '\n', '    // 代币交易时触发的事件，即调用transfer方法时触发\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    // 允许其他用户从你的账户上花费代币时触发的事件，即调用approve方法时触发\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// 实现ERC-20标准接口\n', 'contract STAR is ERC20Interface {\n', '    // 存储每个地址的余额（因为是public的所以会自动生成balanceOf方法）\n', '    mapping (address => uint256) public balanceOf;\n', '    // 存储每个地址可操作的地址及其可操作的金额\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    // 初始化属性\n', '    constructor() public {\n', '        name = "SUPER STAR";\n', '        symbol = "STAR"; \n', '        decimals = 6;\n', '        totalSupply = 190000000 * 10**uint(decimals);\n', '        // 初始化该代币的账户会拥有所有的代币\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        // 检验接收者地址是否合法\n', '        require(to != address(0));\n', '        // 检验发送者账户余额是否足够\n', '        require(balanceOf[msg.sender] >= tokens);\n', '        // 检验是否会发生溢出\n', '        require(balanceOf[to] + tokens >= balanceOf[to]);\n', '\n', '        // 扣除发送者账户余额\n', '        balanceOf[msg.sender] -= tokens;\n', '        // 增加接收者账户余额\n', '        balanceOf[to] += tokens;\n', '\n', '        // 触发相应的事件\n', '        emit Transfer(msg.sender, to, tokens);\n', '\n', '                success = true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        // 检验地址是否合法\n', '        require(to != address(0) && from != address(0));\n', '        // 检验发送者账户余额是否足够\n', '        require(balanceOf[from] >= tokens);\n', '        // 检验操作的金额是否是被允许的\n', '        require(allowed[from][msg.sender] <= tokens);\n', '        // 检验是否会发生溢出\n', '        require(balanceOf[to] + tokens >= balanceOf[to]);\n', '\n', '        // 扣除发送者账户余额\n', '        balanceOf[from] -= tokens;\n', '        // 增加接收者账户余额\n', '        balanceOf[to] += tokens;\n', '\n', '        // 触发相应的事件\n', '        emit Transfer(from, to, tokens);   \n', '\n', '        success = true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        // 触发相应的事件\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        success = true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '}']