['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'import "./SafeMath.sol";\n', '\n', 'contract PlasmaVesting {\n', '    using SafeMath for uint256;\n', '\n', '    address public ppay;\n', '    address public recipient;\n', '\n', '    uint256 public vestingAmount;\n', '    uint256 public vestingBegin;\n', '    uint256 public vestingCliff;\n', '    uint256 public vestingEnd;\n', '\n', '    uint256 public lastUpdate;\n', '\n', '    constructor(\n', '        address ppay_,\n', '        address recipient_,\n', '        uint256 vestingAmount_,\n', '        uint256 vestingBegin_,\n', '        uint256 vestingCliff_,\n', '        uint256 vestingEnd_\n', '    ) public {\n', "        require(vestingBegin_ >= block.timestamp, 'PlasmaVesting::constructor: vesting begin too early');\n", "        require(vestingCliff_ >= vestingBegin_, 'PlasmaVesting::constructor: cliff is too early');\n", "        require(vestingEnd_ > vestingCliff_, 'PlasmaVesting::constructor: end is too early');\n", '\n', '        ppay = ppay_;\n', '        recipient = recipient_;\n', '\n', '        vestingAmount = vestingAmount_;\n', '        vestingBegin = vestingBegin_;\n', '        vestingCliff = vestingCliff_;\n', '        vestingEnd = vestingEnd_;\n', '\n', '        lastUpdate = vestingBegin;\n', '    }\n', '\n', '    function setRecipient(address recipient_) external {\n', "        require(msg.sender == recipient, 'PlasmaVesting::setRecipient: unauthorized');\n", '        recipient = recipient_;\n', '    }\n', '\n', '    function claim() external returns (bool) {\n', "        require(block.timestamp >= vestingCliff, 'PlasmaVesting::claim: not time yet');\n", '        uint256 amount;\n', '        if (block.timestamp >= vestingEnd) {\n', '            amount = IPpay(ppay).balanceOf(address(this));\n', '        } else {\n', '            amount = vestingAmount.mul(block.timestamp - lastUpdate).div(vestingEnd - vestingBegin);\n', '            lastUpdate = block.timestamp;\n', '        }\n', '        return IPpay(ppay).transfer(recipient, amount);\n', '    }\n', '}\n', '\n', 'interface IPpay {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address dst, uint256 rawAmount) external returns (bool);\n', '}']